
Adv_STM32_class_ADC_2nd_assigment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009930  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  08009ac0  08009ac0  00019ac0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a040  0800a040  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a040  0800a040  0001a040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a048  0800a048  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a048  0800a048  0001a048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a04c  0800a04c  0001a04c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000412c  200001e0  0800a230  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  2000430c  0800a230  0002430c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000177ff  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003552  00000000  00000000  00037a0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  0003af68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  0003c200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002505a  00000000  00000000  0003d350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016245  00000000  00000000  000623aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0b75  00000000  00000000  000785ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00159164  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e50  00000000  00000000  001591b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009aa8 	.word	0x08009aa8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08009aa8 	.word	0x08009aa8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <vApplicationGetIdleTaskMemory+0x2c>)
 8000eb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <vApplicationGetIdleTaskMemory+0x30>)
 8000eb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2280      	movs	r2, #128	; 0x80
 8000ebc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	200001fc 	.word	0x200001fc
 8000ed0:	20000250 	.word	0x20000250

08000ed4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000edc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ee0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d013      	beq.n	8000f14 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000eec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ef0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ef4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d00b      	beq.n	8000f14 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000efc:	e000      	b.n	8000f00 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000efe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f00:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d0f9      	beq.n	8000efe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f0a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f14:	687b      	ldr	r3, [r7, #4]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b086      	sub	sp, #24
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	60f8      	str	r0, [r7, #12]
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
	for (i = 0; i <len; i++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	e009      	b.n	8000f4c <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	1c5a      	adds	r2, r3, #1
 8000f3c:	60ba      	str	r2, [r7, #8]
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ffc7 	bl	8000ed4 <ITM_SendChar>
	for (i = 0; i <len; i++)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	dbf1      	blt.n	8000f38 <_write+0x16>
	return len;
 8000f54:	687b      	ldr	r3, [r7, #4]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f66:	f000 fdcf 	bl	8001b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6a:	f000 f877 	bl	800105c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6e:	f000 f9d1 	bl	8001314 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f72:	f000 f8dd 	bl	8001130 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000f76:	f000 f9a3 	bl	80012c0 <MX_USART2_UART_Init>
  MX_TIM2_Init(1000);
 8000f7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f7e:	f000 f929 	bl	80011d4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */



  HAL_TIM_Base_Start(&htim2);
 8000f82:	4829      	ldr	r0, [pc, #164]	; (8001028 <main+0xc8>)
 8000f84:	f002 fae8 	bl	8003558 <HAL_TIM_Base_Start>
  HAL_ADC_Start_IT(&hadc1);
 8000f88:	4828      	ldr	r0, [pc, #160]	; (800102c <main+0xcc>)
 8000f8a:	f000 fe43 	bl	8001c14 <HAL_ADC_Start_IT>
  HAL_UART_Receive_IT(&huart2, Rx_data, 10);
 8000f8e:	220a      	movs	r2, #10
 8000f90:	4927      	ldr	r1, [pc, #156]	; (8001030 <main+0xd0>)
 8000f92:	4828      	ldr	r0, [pc, #160]	; (8001034 <main+0xd4>)
 8000f94:	f003 fb1d 	bl	80045d2 <HAL_UART_Receive_IT>

  /************************* Create Integer Queue ****************************/
  SimpleQueue = xQueueCreate(5, sizeof (int));
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2104      	movs	r1, #4
 8000f9c:	2005      	movs	r0, #5
 8000f9e:	f004 f9bd 	bl	800531c <xQueueGenericCreate>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4a24      	ldr	r2, [pc, #144]	; (8001038 <main+0xd8>)
 8000fa6:	6013      	str	r3, [r2, #0]
  if (SimpleQueue == 0)  // Queue not created
 8000fa8:	4b23      	ldr	r3, [pc, #140]	; (8001038 <main+0xd8>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d103      	bne.n	8000fb8 <main+0x58>
  {
//	  char *str = "Unable to create Integer Queue\n\n";
//	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
	  printf("Unable to create Integer Queue\n\n");
 8000fb0:	4822      	ldr	r0, [pc, #136]	; (800103c <main+0xdc>)
 8000fb2:	f006 fcbb 	bl	800792c <puts>
 8000fb6:	e002      	b.n	8000fbe <main+0x5e>
  }
  else
  {
//	  char *str = "Integer Queue Created successfully\n\n";
//	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
	  printf("Integer Queue Created successfully\n\n");
 8000fb8:	4821      	ldr	r0, [pc, #132]	; (8001040 <main+0xe0>)
 8000fba:	f006 fcb7 	bl	800792c <puts>
  }

  /************************** create ST QUEUE **********************************/
  St_Queue_Handler = xQueueCreate(2, sizeof (my_struct));
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2108      	movs	r1, #8
 8000fc2:	2002      	movs	r0, #2
 8000fc4:	f004 f9aa 	bl	800531c <xQueueGenericCreate>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4a1e      	ldr	r2, [pc, #120]	; (8001044 <main+0xe4>)
 8000fcc:	6013      	str	r3, [r2, #0]

  if (St_Queue_Handler == 0) // if there is some error while creating queue
 8000fce:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <main+0xe4>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d10d      	bne.n	8000ff2 <main+0x92>
	{
	  char *str = "Unable to create STRUCTURE Queue\n\n";
 8000fd6:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <main+0xe8>)
 8000fd8:	603b      	str	r3, [r7, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000fda:	6838      	ldr	r0, [r7, #0]
 8000fdc:	f7ff f8f8 	bl	80001d0 <strlen>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe8:	6839      	ldr	r1, [r7, #0]
 8000fea:	4812      	ldr	r0, [pc, #72]	; (8001034 <main+0xd4>)
 8000fec:	f003 fa5f 	bl	80044ae <HAL_UART_Transmit>
 8000ff0:	e00c      	b.n	800100c <main+0xac>
	}
  else
	{
	  char *str = "STRUCTURE Queue Created successfully\n\n";
 8000ff2:	4b16      	ldr	r3, [pc, #88]	; (800104c <main+0xec>)
 8000ff4:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff f8ea 	bl	80001d0 <strlen>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
 8001004:	6879      	ldr	r1, [r7, #4]
 8001006:	480b      	ldr	r0, [pc, #44]	; (8001034 <main+0xd4>)
 8001008:	f003 fa51 	bl	80044ae <HAL_UART_Transmit>
	}

  /****************************** Task related******************************/
  //xTaskCreate(ADC_Queue_Task, "ADC_Queue",  128, NULL, 3, &ADC_Queue_Handler);
  xTaskCreate(Data_Processing_Task, "DSP", 128, NULL, 3, &Data_Processing_Handler);
 800100c:	4b10      	ldr	r3, [pc, #64]	; (8001050 <main+0xf0>)
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	2303      	movs	r3, #3
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2300      	movs	r3, #0
 8001016:	2280      	movs	r2, #128	; 0x80
 8001018:	490e      	ldr	r1, [pc, #56]	; (8001054 <main+0xf4>)
 800101a:	480f      	ldr	r0, [pc, #60]	; (8001058 <main+0xf8>)
 800101c:	f004 fca7 	bl	800596e <xTaskCreate>



  vTaskStartScheduler();
 8001020:	f004 fe10 	bl	8005c44 <vTaskStartScheduler>
  /* USER CODE END 2 */


  /* USER CODE BEGIN WHILE */
  while (1)
 8001024:	e7fe      	b.n	8001024 <main+0xc4>
 8001026:	bf00      	nop
 8001028:	2000421c 	.word	0x2000421c
 800102c:	200041cc 	.word	0x200041cc
 8001030:	200041b8 	.word	0x200041b8
 8001034:	20004264 	.word	0x20004264
 8001038:	200041c8 	.word	0x200041c8
 800103c:	08009ac0 	.word	0x08009ac0
 8001040:	08009ae0 	.word	0x08009ae0
 8001044:	20004214 	.word	0x20004214
 8001048:	08009b04 	.word	0x08009b04
 800104c:	08009b28 	.word	0x08009b28
 8001050:	200041c4 	.word	0x200041c4
 8001054:	08009b50 	.word	0x08009b50
 8001058:	080013b9 	.word	0x080013b9

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b094      	sub	sp, #80	; 0x50
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	f107 0320 	add.w	r3, r7, #32
 8001066:	2230      	movs	r2, #48	; 0x30
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f005 ff66 	bl	8006f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001070:	f107 030c 	add.w	r3, r7, #12
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	4b28      	ldr	r3, [pc, #160]	; (8001128 <SystemClock_Config+0xcc>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	4a27      	ldr	r2, [pc, #156]	; (8001128 <SystemClock_Config+0xcc>)
 800108a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108e:	6413      	str	r3, [r2, #64]	; 0x40
 8001090:	4b25      	ldr	r3, [pc, #148]	; (8001128 <SystemClock_Config+0xcc>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800109c:	2300      	movs	r3, #0
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	4b22      	ldr	r3, [pc, #136]	; (800112c <SystemClock_Config+0xd0>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a21      	ldr	r2, [pc, #132]	; (800112c <SystemClock_Config+0xd0>)
 80010a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010aa:	6013      	str	r3, [r2, #0]
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <SystemClock_Config+0xd0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b8:	2302      	movs	r3, #2
 80010ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010bc:	2301      	movs	r3, #1
 80010be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c0:	2310      	movs	r3, #16
 80010c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c4:	2302      	movs	r3, #2
 80010c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010c8:	2300      	movs	r3, #0
 80010ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010cc:	2308      	movs	r3, #8
 80010ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80010d0:	2364      	movs	r3, #100	; 0x64
 80010d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010d4:	2302      	movs	r3, #2
 80010d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010d8:	2304      	movs	r3, #4
 80010da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010dc:	f107 0320 	add.w	r3, r7, #32
 80010e0:	4618      	mov	r0, r3
 80010e2:	f001 fd43 	bl	8002b6c <HAL_RCC_OscConfig>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010ec:	f000 face 	bl	800168c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f0:	230f      	movs	r3, #15
 80010f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f4:	2302      	movs	r3, #2
 80010f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001100:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001102:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001106:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2103      	movs	r1, #3
 800110e:	4618      	mov	r0, r3
 8001110:	f001 ffa4 	bl	800305c <HAL_RCC_ClockConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800111a:	f000 fab7 	bl	800168c <Error_Handler>
  }
}
 800111e:	bf00      	nop
 8001120:	3750      	adds	r7, #80	; 0x50
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800
 800112c:	40007000 	.word	0x40007000

08001130 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001136:	463b      	mov	r3, r7
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001142:	4b22      	ldr	r3, [pc, #136]	; (80011cc <MX_ADC1_Init+0x9c>)
 8001144:	4a22      	ldr	r2, [pc, #136]	; (80011d0 <MX_ADC1_Init+0xa0>)
 8001146:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001148:	4b20      	ldr	r3, [pc, #128]	; (80011cc <MX_ADC1_Init+0x9c>)
 800114a:	2200      	movs	r2, #0
 800114c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800114e:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <MX_ADC1_Init+0x9c>)
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001154:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <MX_ADC1_Init+0x9c>)
 8001156:	2201      	movs	r2, #1
 8001158:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <MX_ADC1_Init+0x9c>)
 800115c:	2201      	movs	r2, #1
 800115e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001160:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <MX_ADC1_Init+0x9c>)
 8001162:	2200      	movs	r2, #0
 8001164:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <MX_ADC1_Init+0x9c>)
 800116a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800116e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001170:	4b16      	ldr	r3, [pc, #88]	; (80011cc <MX_ADC1_Init+0x9c>)
 8001172:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001176:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001178:	4b14      	ldr	r3, [pc, #80]	; (80011cc <MX_ADC1_Init+0x9c>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800117e:	4b13      	ldr	r3, [pc, #76]	; (80011cc <MX_ADC1_Init+0x9c>)
 8001180:	2201      	movs	r2, #1
 8001182:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <MX_ADC1_Init+0x9c>)
 8001186:	2200      	movs	r2, #0
 8001188:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <MX_ADC1_Init+0x9c>)
 800118e:	2201      	movs	r2, #1
 8001190:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001192:	480e      	ldr	r0, [pc, #56]	; (80011cc <MX_ADC1_Init+0x9c>)
 8001194:	f000 fcfa 	bl	8001b8c <HAL_ADC_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800119e:	f000 fa75 	bl	800168c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80011a2:	2310      	movs	r3, #16
 80011a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011a6:	2301      	movs	r3, #1
 80011a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80011aa:	2302      	movs	r3, #2
 80011ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ae:	463b      	mov	r3, r7
 80011b0:	4619      	mov	r1, r3
 80011b2:	4806      	ldr	r0, [pc, #24]	; (80011cc <MX_ADC1_Init+0x9c>)
 80011b4:	f000 ff6e 	bl	8002094 <HAL_ADC_ConfigChannel>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80011be:	f000 fa65 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200041cc 	.word	0x200041cc
 80011d0:	40012000 	.word	0x40012000

080011d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(uint16_t SPS)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b090      	sub	sp, #64	; 0x40
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	80fb      	strh	r3, [r7, #6]

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]
 8001206:	615a      	str	r2, [r3, #20]
 8001208:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800120a:	4b2c      	ldr	r3, [pc, #176]	; (80012bc <MX_TIM2_Init+0xe8>)
 800120c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001210:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50000;
 8001212:	4b2a      	ldr	r3, [pc, #168]	; (80012bc <MX_TIM2_Init+0xe8>)
 8001214:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001218:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121a:	4b28      	ldr	r3, [pc, #160]	; (80012bc <MX_TIM2_Init+0xe8>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = SPS; //SPS = 100 --> 100ms,
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	4a26      	ldr	r2, [pc, #152]	; (80012bc <MX_TIM2_Init+0xe8>)
 8001224:	60d3      	str	r3, [r2, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001226:	4b25      	ldr	r3, [pc, #148]	; (80012bc <MX_TIM2_Init+0xe8>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122c:	4b23      	ldr	r3, [pc, #140]	; (80012bc <MX_TIM2_Init+0xe8>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001232:	4822      	ldr	r0, [pc, #136]	; (80012bc <MX_TIM2_Init+0xe8>)
 8001234:	f002 f940 	bl	80034b8 <HAL_TIM_Base_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800123e:	f000 fa25 	bl	800168c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001242:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001248:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800124c:	4619      	mov	r1, r3
 800124e:	481b      	ldr	r0, [pc, #108]	; (80012bc <MX_TIM2_Init+0xe8>)
 8001250:	f002 fc7a 	bl	8003b48 <HAL_TIM_ConfigClockSource>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800125a:	f000 fa17 	bl	800168c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800125e:	4817      	ldr	r0, [pc, #92]	; (80012bc <MX_TIM2_Init+0xe8>)
 8001260:	f002 fa52 	bl	8003708 <HAL_TIM_PWM_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800126a:	f000 fa0f 	bl	800168c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800126e:	2320      	movs	r3, #32
 8001270:	62bb      	str	r3, [r7, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001276:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800127a:	4619      	mov	r1, r3
 800127c:	480f      	ldr	r0, [pc, #60]	; (80012bc <MX_TIM2_Init+0xe8>)
 800127e:	f003 f839 	bl	80042f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM2_Init+0xb8>
  {
    Error_Handler();
 8001288:	f000 fa00 	bl	800168c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800128c:	2360      	movs	r3, #96	; 0x60
 800128e:	60fb      	str	r3, [r7, #12]
  sConfigOC.Pulse = 8;
 8001290:	2308      	movs	r3, #8
 8001292:	613b      	str	r3, [r7, #16]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	2204      	movs	r2, #4
 80012a2:	4619      	mov	r1, r3
 80012a4:	4805      	ldr	r0, [pc, #20]	; (80012bc <MX_TIM2_Init+0xe8>)
 80012a6:	f002 fb91 	bl	80039cc <HAL_TIM_PWM_ConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 80012b0:	f000 f9ec 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	3740      	adds	r7, #64	; 0x40
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	2000421c 	.word	0x2000421c

080012c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012c6:	4a12      	ldr	r2, [pc, #72]	; (8001310 <MX_USART2_UART_Init+0x50>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012f8:	f003 f88c 	bl	8004414 <HAL_UART_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001302:	f000 f9c3 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20004264 	.word	0x20004264
 8001310:	40004400 	.word	0x40004400

08001314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131a:	f107 030c 	add.w	r3, r7, #12
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <MX_GPIO_Init+0x9c>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a1f      	ldr	r2, [pc, #124]	; (80013b0 <MX_GPIO_Init+0x9c>)
 8001334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <MX_GPIO_Init+0x9c>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	607b      	str	r3, [r7, #4]
 800134a:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <MX_GPIO_Init+0x9c>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a18      	ldr	r2, [pc, #96]	; (80013b0 <MX_GPIO_Init+0x9c>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <MX_GPIO_Init+0x9c>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	603b      	str	r3, [r7, #0]
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <MX_GPIO_Init+0x9c>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a11      	ldr	r2, [pc, #68]	; (80013b0 <MX_GPIO_Init+0x9c>)
 800136c:	f043 0308 	orr.w	r3, r3, #8
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <MX_GPIO_Init+0x9c>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800137e:	2200      	movs	r2, #0
 8001380:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001384:	480b      	ldr	r0, [pc, #44]	; (80013b4 <MX_GPIO_Init+0xa0>)
 8001386:	f001 fbbd 	bl	8002b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800138a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800138e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001390:	2301      	movs	r3, #1
 8001392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800139c:	f107 030c 	add.w	r3, r7, #12
 80013a0:	4619      	mov	r1, r3
 80013a2:	4804      	ldr	r0, [pc, #16]	; (80013b4 <MX_GPIO_Init+0xa0>)
 80013a4:	f001 fa12 	bl	80027cc <HAL_GPIO_Init>

}
 80013a8:	bf00      	nop
 80013aa:	3720      	adds	r7, #32
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020c00 	.word	0x40020c00

080013b8 <Data_Processing_Task>:
 * V25 = Voltage at 25°C, for STM32F407 = 0.76V
 * Avg_Slope = 2.5mV/°C
 */

void Data_Processing_Task (void* argument)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	int received = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60bb      	str	r3, [r7, #8]
	uint32_t TickDelay = pdMS_TO_TICKS(100);
 80013c4:	2364      	movs	r3, #100	; 0x64
 80013c6:	60fb      	str	r3, [r7, #12]
	while (1)
	{
//		char str[100];
		if (xQueueReceive(SimpleQueue, &received, portMAX_DELAY) != pdTRUE)
 80013c8:	4b4f      	ldr	r3, [pc, #316]	; (8001508 <Data_Processing_Task+0x150>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f107 0108 	add.w	r1, r7, #8
 80013d0:	f04f 32ff 	mov.w	r2, #4294967295
 80013d4:	4618      	mov	r0, r3
 80013d6:	f004 f895 	bl	8005504 <xQueueReceive>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d003      	beq.n	80013e8 <Data_Processing_Task+0x30>
		{
//			HAL_UART_Transmit(&huart2, (uint8_t *)"Error in Receiving from Queue\n\n", 31, 1000);
			printf("Error in Receiving from Queue\n\n");
 80013e0:	484a      	ldr	r0, [pc, #296]	; (800150c <Data_Processing_Task+0x154>)
 80013e2:	f006 faa3 	bl	800792c <puts>
 80013e6:	e00a      	b.n	80013fe <Data_Processing_Task+0x46>
		}
		else
		{
			sum = sum + received;
 80013e8:	4b49      	ldr	r3, [pc, #292]	; (8001510 <Data_Processing_Task+0x158>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	4413      	add	r3, r2
 80013f0:	4a47      	ldr	r2, [pc, #284]	; (8001510 <Data_Processing_Task+0x158>)
 80013f2:	6013      	str	r3, [r2, #0]
			count++;
 80013f4:	4b47      	ldr	r3, [pc, #284]	; (8001514 <Data_Processing_Task+0x15c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	3301      	adds	r3, #1
 80013fa:	4a46      	ldr	r2, [pc, #280]	; (8001514 <Data_Processing_Task+0x15c>)
 80013fc:	6013      	str	r3, [r2, #0]
		}
		if (count == 5)
 80013fe:	4b45      	ldr	r3, [pc, #276]	; (8001514 <Data_Processing_Task+0x15c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b05      	cmp	r3, #5
 8001404:	d174      	bne.n	80014f0 <Data_Processing_Task+0x138>
		{
			sum = sum/5;
 8001406:	4b42      	ldr	r3, [pc, #264]	; (8001510 <Data_Processing_Task+0x158>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a43      	ldr	r2, [pc, #268]	; (8001518 <Data_Processing_Task+0x160>)
 800140c:	fb82 1203 	smull	r1, r2, r2, r3
 8001410:	1052      	asrs	r2, r2, #1
 8001412:	17db      	asrs	r3, r3, #31
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	4a3e      	ldr	r2, [pc, #248]	; (8001510 <Data_Processing_Task+0x158>)
 8001418:	6013      	str	r3, [r2, #0]
			sum *= 3300;
 800141a:	4b3d      	ldr	r3, [pc, #244]	; (8001510 <Data_Processing_Task+0x158>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001422:	fb02 f303 	mul.w	r3, r2, r3
 8001426:	4a3a      	ldr	r2, [pc, #232]	; (8001510 <Data_Processing_Task+0x158>)
 8001428:	6013      	str	r3, [r2, #0]
			sum /= 0xfff; //Reading in mV (adc * 3300/4096)
 800142a:	4b39      	ldr	r3, [pc, #228]	; (8001510 <Data_Processing_Task+0x158>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a3b      	ldr	r2, [pc, #236]	; (800151c <Data_Processing_Task+0x164>)
 8001430:	fb82 1203 	smull	r1, r2, r2, r3
 8001434:	441a      	add	r2, r3
 8001436:	12d2      	asrs	r2, r2, #11
 8001438:	17db      	asrs	r3, r3, #31
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	4a34      	ldr	r2, [pc, #208]	; (8001510 <Data_Processing_Task+0x158>)
 800143e:	6013      	str	r3, [r2, #0]
			sum /= 1000.0; //Reading in Volts
 8001440:	4b33      	ldr	r3, [pc, #204]	; (8001510 <Data_Processing_Task+0x158>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff f86d 	bl	8000524 <__aeabi_i2d>
 800144a:	f04f 0200 	mov.w	r2, #0
 800144e:	4b34      	ldr	r3, [pc, #208]	; (8001520 <Data_Processing_Task+0x168>)
 8001450:	f7ff f9fc 	bl	800084c <__aeabi_ddiv>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	f7ff fb7c 	bl	8000b58 <__aeabi_d2iz>
 8001460:	4603      	mov	r3, r0
 8001462:	4a2b      	ldr	r2, [pc, #172]	; (8001510 <Data_Processing_Task+0x158>)
 8001464:	6013      	str	r3, [r2, #0]
			sum -= 0.760; // Subtract the reference voltage at 25°C
 8001466:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <Data_Processing_Task+0x158>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f85a 	bl	8000524 <__aeabi_i2d>
 8001470:	a321      	add	r3, pc, #132	; (adr r3, 80014f8 <Data_Processing_Task+0x140>)
 8001472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001476:	f7fe ff07 	bl	8000288 <__aeabi_dsub>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4610      	mov	r0, r2
 8001480:	4619      	mov	r1, r3
 8001482:	f7ff fb69 	bl	8000b58 <__aeabi_d2iz>
 8001486:	4603      	mov	r3, r0
 8001488:	4a21      	ldr	r2, [pc, #132]	; (8001510 <Data_Processing_Task+0x158>)
 800148a:	6013      	str	r3, [r2, #0]
			sum /= .0025; // Divide by slope 2.5mV
 800148c:	4b20      	ldr	r3, [pc, #128]	; (8001510 <Data_Processing_Task+0x158>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff f847 	bl	8000524 <__aeabi_i2d>
 8001496:	a31a      	add	r3, pc, #104	; (adr r3, 8001500 <Data_Processing_Task+0x148>)
 8001498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149c:	f7ff f9d6 	bl	800084c <__aeabi_ddiv>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f7ff fb56 	bl	8000b58 <__aeabi_d2iz>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4a18      	ldr	r2, [pc, #96]	; (8001510 <Data_Processing_Task+0x158>)
 80014b0:	6013      	str	r3, [r2, #0]
			sum += 25.0; // Add the 25°C
 80014b2:	4b17      	ldr	r3, [pc, #92]	; (8001510 <Data_Processing_Task+0x158>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff f834 	bl	8000524 <__aeabi_i2d>
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	4b18      	ldr	r3, [pc, #96]	; (8001524 <Data_Processing_Task+0x16c>)
 80014c2:	f7fe fee3 	bl	800028c <__adddf3>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fb43 	bl	8000b58 <__aeabi_d2iz>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4a0e      	ldr	r2, [pc, #56]	; (8001510 <Data_Processing_Task+0x158>)
 80014d6:	6013      	str	r3, [r2, #0]
			printf("Temperature value: %d\n\n", sum);
 80014d8:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <Data_Processing_Task+0x158>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4619      	mov	r1, r3
 80014de:	4812      	ldr	r0, [pc, #72]	; (8001528 <Data_Processing_Task+0x170>)
 80014e0:	f006 f99e 	bl	8007820 <iprintf>
			count = 0;
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <Data_Processing_Task+0x15c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
			sum = 0;
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <Data_Processing_Task+0x158>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
		}
//		sprintf(str, "ADC value: %d \n",sum);
//		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);

		vTaskDelay(TickDelay);
 80014f0:	68f8      	ldr	r0, [r7, #12]
 80014f2:	f004 fb73 	bl	8005bdc <vTaskDelay>
		if (xQueueReceive(SimpleQueue, &received, portMAX_DELAY) != pdTRUE)
 80014f6:	e767      	b.n	80013c8 <Data_Processing_Task+0x10>
 80014f8:	851eb852 	.word	0x851eb852
 80014fc:	3fe851eb 	.word	0x3fe851eb
 8001500:	47ae147b 	.word	0x47ae147b
 8001504:	3f647ae1 	.word	0x3f647ae1
 8001508:	200041c8 	.word	0x200041c8
 800150c:	08009b54 	.word	0x08009b54
 8001510:	20000450 	.word	0x20000450
 8001514:	20000454 	.word	0x20000454
 8001518:	66666667 	.word	0x66666667
 800151c:	80080081 	.word	0x80080081
 8001520:	408f4000 	.word	0x408f4000
 8001524:	40390000 	.word	0x40390000
 8001528:	08009b74 	.word	0x08009b74

0800152c <HAL_ADC_ConvCpltCallback>:
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b084      	sub	sp, #16
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */

  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001538:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800153c:	4814      	ldr	r0, [pc, #80]	; (8001590 <HAL_ADC_ConvCpltCallback+0x64>)
 800153e:	f001 fafa 	bl	8002b36 <HAL_GPIO_TogglePin>
  adcValue = HAL_ADC_GetValue(&hadc1);
 8001542:	4814      	ldr	r0, [pc, #80]	; (8001594 <HAL_ADC_ConvCpltCallback+0x68>)
 8001544:	f000 fd85 	bl	8002052 <HAL_ADC_GetValue>
 8001548:	4603      	mov	r3, r0
 800154a:	b29a      	uxth	r2, r3
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <HAL_ADC_ConvCpltCallback+0x6c>)
 800154e:	801a      	strh	r2, [r3, #0]

  if (xQueueSendToFrontFromISR(SimpleQueue, &adcValue, &xHigherPriorityTaskWoken) == pdPASS)
 8001550:	4b12      	ldr	r3, [pc, #72]	; (800159c <HAL_ADC_ConvCpltCallback+0x70>)
 8001552:	6818      	ldr	r0, [r3, #0]
 8001554:	f107 020c 	add.w	r2, r7, #12
 8001558:	2301      	movs	r3, #1
 800155a:	490f      	ldr	r1, [pc, #60]	; (8001598 <HAL_ADC_ConvCpltCallback+0x6c>)
 800155c:	f003 ff37 	bl	80053ce <xQueueGenericSendFromISR>
 8001560:	4603      	mov	r3, r0
 8001562:	2b01      	cmp	r3, #1
 8001564:	d105      	bne.n	8001572 <HAL_ADC_ConvCpltCallback+0x46>
  {
//			sprintf(str, "Successfully sent number %d to the queue\n\n", adcValue);
//			HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
	printf("Successfully sent number %d to the queue\n\n", adcValue);
 8001566:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <HAL_ADC_ConvCpltCallback+0x6c>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	4619      	mov	r1, r3
 800156c:	480c      	ldr	r0, [pc, #48]	; (80015a0 <HAL_ADC_ConvCpltCallback+0x74>)
 800156e:	f006 f957 	bl	8007820 <iprintf>
  }
// Did sending to the queue unblock a higher priority task?
  portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d007      	beq.n	8001588 <HAL_ADC_ConvCpltCallback+0x5c>
 8001578:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <HAL_ADC_ConvCpltCallback+0x78>)
 800157a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	f3bf 8f4f 	dsb	sy
 8001584:	f3bf 8f6f 	isb	sy

}
 8001588:	bf00      	nop
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40020c00 	.word	0x40020c00
 8001594:	200041cc 	.word	0x200041cc
 8001598:	200042a8 	.word	0x200042a8
 800159c:	200041c8 	.word	0x200041c8
 80015a0:	08009b8c 	.word	0x08009b8c
 80015a4:	e000ed04 	.word	0xe000ed04

080015a8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(huart, Rx_data, 10); //restart the interrupt reception mode
 80015b0:	220a      	movs	r2, #10
 80015b2:	4926      	ldr	r1, [pc, #152]	; (800164c <HAL_UART_RxCpltCallback+0xa4>)
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f003 f80c 	bl	80045d2 <HAL_UART_Receive_IT>

	 /* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE as
	 it will get set to pdTRUE inside the interrupt safe API function if a
	 context switch is required. */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]

	/*****************Extract character received from Rx_data*******************/
	// Extract the first token
	   char * token = strtok(Rx_data, " ");
 80015be:	4924      	ldr	r1, [pc, #144]	; (8001650 <HAL_UART_RxCpltCallback+0xa8>)
 80015c0:	4822      	ldr	r0, [pc, #136]	; (800164c <HAL_UART_RxCpltCallback+0xa4>)
 80015c2:	f006 f9bb 	bl	800793c <strtok>
 80015c6:	60f8      	str	r0, [r7, #12]
	   // loop through the string to extract all other tokens
	   while( token != NULL ) {
 80015c8:	e008      	b.n	80015dc <HAL_UART_RxCpltCallback+0x34>
		  printf( " %s\n", token ); //printing each token
 80015ca:	68f9      	ldr	r1, [r7, #12]
 80015cc:	4821      	ldr	r0, [pc, #132]	; (8001654 <HAL_UART_RxCpltCallback+0xac>)
 80015ce:	f006 f927 	bl	8007820 <iprintf>
		  token = strtok(NULL, " ");
 80015d2:	491f      	ldr	r1, [pc, #124]	; (8001650 <HAL_UART_RxCpltCallback+0xa8>)
 80015d4:	2000      	movs	r0, #0
 80015d6:	f006 f9b1 	bl	800793c <strtok>
 80015da:	60f8      	str	r0, [r7, #12]
	   while( token != NULL ) {
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f3      	bne.n	80015ca <HAL_UART_RxCpltCallback+0x22>
	   }

	/*****************ALOOCATE MEMORY TO THE PTR *******************************/
	ptrtostruct = pvPortMalloc(sizeof (my_struct));
 80015e2:	2008      	movs	r0, #8
 80015e4:	f005 fa88 	bl	8006af8 <pvPortMalloc>
 80015e8:	4603      	mov	r3, r0
 80015ea:	4a1b      	ldr	r2, [pc, #108]	; (8001658 <HAL_UART_RxCpltCallback+0xb0>)
 80015ec:	6013      	str	r3, [r2, #0]

	/********** LOAD THE DATA ***********/
	ptrtostruct->str = token[0];
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	461a      	mov	r2, r3
 80015f4:	4b18      	ldr	r3, [pc, #96]	; (8001658 <HAL_UART_RxCpltCallback+0xb0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	601a      	str	r2, [r3, #0]
	ptrtostruct->sampling_rate = (uint16_t)token[1];
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	3301      	adds	r3, #1
 80015fe:	781a      	ldrb	r2, [r3, #0]
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <HAL_UART_RxCpltCallback+0xb0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	b292      	uxth	r2, r2
 8001606:	809a      	strh	r2, [r3, #4]

	if (xQueueSendToFrontFromISR(SimpleQueue, &ptrtostruct, &xHigherPriorityTaskWoken) == pdPASS)
 8001608:	4b14      	ldr	r3, [pc, #80]	; (800165c <HAL_UART_RxCpltCallback+0xb4>)
 800160a:	6818      	ldr	r0, [r3, #0]
 800160c:	f107 0208 	add.w	r2, r7, #8
 8001610:	2301      	movs	r3, #1
 8001612:	4911      	ldr	r1, [pc, #68]	; (8001658 <HAL_UART_RxCpltCallback+0xb0>)
 8001614:	f003 fedb 	bl	80053ce <xQueueGenericSendFromISR>
 8001618:	4603      	mov	r3, r0
 800161a:	2b01      	cmp	r3, #1
 800161c:	d106      	bne.n	800162c <HAL_UART_RxCpltCallback+0x84>
	{
		HAL_UART_Transmit(huart, (uint8_t *)"\n\nSent from ISR\n\n", 17, 500);
 800161e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001622:	2211      	movs	r2, #17
 8001624:	490e      	ldr	r1, [pc, #56]	; (8001660 <HAL_UART_RxCpltCallback+0xb8>)
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f002 ff41 	bl	80044ae <HAL_UART_Transmit>
	 xHigherPriorityTaskWoken was set to pdTRUE inside xSemaphoreGiveFromISR()
	 then calling portEND_SWITCHING_ISR() will request a context switch. If
	 xHigherPriorityTaskWoken is still pdFALSE then calling
	 portEND_SWITCHING_ISR() will have no effect */

	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d007      	beq.n	8001642 <HAL_UART_RxCpltCallback+0x9a>
 8001632:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <HAL_UART_RxCpltCallback+0xbc>)
 8001634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	f3bf 8f4f 	dsb	sy
 800163e:	f3bf 8f6f 	isb	sy
}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200041b8 	.word	0x200041b8
 8001650:	08009bb8 	.word	0x08009bb8
 8001654:	08009bbc 	.word	0x08009bbc
 8001658:	20004218 	.word	0x20004218
 800165c:	200041c8 	.word	0x200041c8
 8001660:	08009bc4 	.word	0x08009bc4
 8001664:	e000ed04 	.word	0xe000ed04

08001668 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a04      	ldr	r2, [pc, #16]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d101      	bne.n	800167e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800167a:	f000 fa67 	bl	8001b4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40001000 	.word	0x40001000

0800168c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001690:	b672      	cpsid	i
}
 8001692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001694:	e7fe      	b.n	8001694 <Error_Handler+0x8>
	...

08001698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_MspInit+0x54>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	4a11      	ldr	r2, [pc, #68]	; (80016ec <HAL_MspInit+0x54>)
 80016a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ac:	6453      	str	r3, [r2, #68]	; 0x44
 80016ae:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <HAL_MspInit+0x54>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	603b      	str	r3, [r7, #0]
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_MspInit+0x54>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <HAL_MspInit+0x54>)
 80016c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <HAL_MspInit+0x54>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	210f      	movs	r1, #15
 80016da:	f06f 0001 	mvn.w	r0, #1
 80016de:	f000 ffb9 	bl	8002654 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023800 	.word	0x40023800

080016f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0e      	ldr	r2, [pc, #56]	; (8001738 <HAL_ADC_MspInit+0x48>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d115      	bne.n	800172e <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	4b0d      	ldr	r3, [pc, #52]	; (800173c <HAL_ADC_MspInit+0x4c>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	4a0c      	ldr	r2, [pc, #48]	; (800173c <HAL_ADC_MspInit+0x4c>)
 800170c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001710:	6453      	str	r3, [r2, #68]	; 0x44
 8001712:	4b0a      	ldr	r3, [pc, #40]	; (800173c <HAL_ADC_MspInit+0x4c>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2105      	movs	r1, #5
 8001722:	2012      	movs	r0, #18
 8001724:	f000 ff96 	bl	8002654 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001728:	2012      	movs	r0, #18
 800172a:	f000 ffaf 	bl	800268c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40012000 	.word	0x40012000
 800173c:	40023800 	.word	0x40023800

08001740 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001750:	d10d      	bne.n	800176e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b09      	ldr	r3, [pc, #36]	; (800177c <HAL_TIM_Base_MspInit+0x3c>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	4a08      	ldr	r2, [pc, #32]	; (800177c <HAL_TIM_Base_MspInit+0x3c>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6413      	str	r3, [r2, #64]	; 0x40
 8001762:	4b06      	ldr	r3, [pc, #24]	; (800177c <HAL_TIM_Base_MspInit+0x3c>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800176e:	bf00      	nop
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800

08001780 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a1d      	ldr	r2, [pc, #116]	; (8001814 <HAL_UART_MspInit+0x94>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d133      	bne.n	800180a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	613b      	str	r3, [r7, #16]
 80017a6:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <HAL_UART_MspInit+0x98>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a1b      	ldr	r2, [pc, #108]	; (8001818 <HAL_UART_MspInit+0x98>)
 80017ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
 80017b2:	4b19      	ldr	r3, [pc, #100]	; (8001818 <HAL_UART_MspInit+0x98>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <HAL_UART_MspInit+0x98>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a14      	ldr	r2, [pc, #80]	; (8001818 <HAL_UART_MspInit+0x98>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_UART_MspInit+0x98>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017da:	230c      	movs	r3, #12
 80017dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e6:	2303      	movs	r3, #3
 80017e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017ea:	2307      	movs	r3, #7
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4619      	mov	r1, r3
 80017f4:	4809      	ldr	r0, [pc, #36]	; (800181c <HAL_UART_MspInit+0x9c>)
 80017f6:	f000 ffe9 	bl	80027cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2105      	movs	r1, #5
 80017fe:	2026      	movs	r0, #38	; 0x26
 8001800:	f000 ff28 	bl	8002654 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001804:	2026      	movs	r0, #38	; 0x26
 8001806:	f000 ff41 	bl	800268c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800180a:	bf00      	nop
 800180c:	3728      	adds	r7, #40	; 0x28
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40004400 	.word	0x40004400
 8001818:	40023800 	.word	0x40023800
 800181c:	40020000 	.word	0x40020000

08001820 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08c      	sub	sp, #48	; 0x30
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001830:	2200      	movs	r2, #0
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	2036      	movs	r0, #54	; 0x36
 8001836:	f000 ff0d 	bl	8002654 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800183a:	2036      	movs	r0, #54	; 0x36
 800183c:	f000 ff26 	bl	800268c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <HAL_InitTick+0xa4>)
 8001846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001848:	4a1e      	ldr	r2, [pc, #120]	; (80018c4 <HAL_InitTick+0xa4>)
 800184a:	f043 0310 	orr.w	r3, r3, #16
 800184e:	6413      	str	r3, [r2, #64]	; 0x40
 8001850:	4b1c      	ldr	r3, [pc, #112]	; (80018c4 <HAL_InitTick+0xa4>)
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800185c:	f107 0210 	add.w	r2, r7, #16
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	4611      	mov	r1, r2
 8001866:	4618      	mov	r0, r3
 8001868:	f001 fdf4 	bl	8003454 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800186c:	f001 fdca 	bl	8003404 <HAL_RCC_GetPCLK1Freq>
 8001870:	4603      	mov	r3, r0
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001878:	4a13      	ldr	r2, [pc, #76]	; (80018c8 <HAL_InitTick+0xa8>)
 800187a:	fba2 2303 	umull	r2, r3, r2, r3
 800187e:	0c9b      	lsrs	r3, r3, #18
 8001880:	3b01      	subs	r3, #1
 8001882:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HAL_InitTick+0xac>)
 8001886:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <HAL_InitTick+0xb0>)
 8001888:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <HAL_InitTick+0xac>)
 800188c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001890:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001892:	4a0e      	ldr	r2, [pc, #56]	; (80018cc <HAL_InitTick+0xac>)
 8001894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001896:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <HAL_InitTick+0xac>)
 800189a:	2200      	movs	r2, #0
 800189c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800189e:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <HAL_InitTick+0xac>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80018a4:	4809      	ldr	r0, [pc, #36]	; (80018cc <HAL_InitTick+0xac>)
 80018a6:	f001 fe07 	bl	80034b8 <HAL_TIM_Base_Init>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d104      	bne.n	80018ba <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80018b0:	4806      	ldr	r0, [pc, #24]	; (80018cc <HAL_InitTick+0xac>)
 80018b2:	f001 feb9 	bl	8003628 <HAL_TIM_Base_Start_IT>
 80018b6:	4603      	mov	r3, r0
 80018b8:	e000      	b.n	80018bc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3730      	adds	r7, #48	; 0x30
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40023800 	.word	0x40023800
 80018c8:	431bde83 	.word	0x431bde83
 80018cc:	200042b0 	.word	0x200042b0
 80018d0:	40001000 	.word	0x40001000

080018d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018d8:	e7fe      	b.n	80018d8 <NMI_Handler+0x4>

080018da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018de:	e7fe      	b.n	80018de <HardFault_Handler+0x4>

080018e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e4:	e7fe      	b.n	80018e4 <MemManage_Handler+0x4>

080018e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e6:	b480      	push	{r7}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ea:	e7fe      	b.n	80018ea <BusFault_Handler+0x4>

080018ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <UsageFault_Handler+0x4>

080018f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001904:	4802      	ldr	r0, [pc, #8]	; (8001910 <ADC_IRQHandler+0x10>)
 8001906:	f000 fa63 	bl	8001dd0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200041cc 	.word	0x200041cc

08001914 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001918:	4802      	ldr	r0, [pc, #8]	; (8001924 <USART2_IRQHandler+0x10>)
 800191a:	f002 fe8b 	bl	8004634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20004264 	.word	0x20004264

08001928 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800192c:	4802      	ldr	r0, [pc, #8]	; (8001938 <TIM6_DAC_IRQHandler+0x10>)
 800192e:	f001 ff44 	bl	80037ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	200042b0 	.word	0x200042b0

0800193c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
	return 1;
 8001940:	2301      	movs	r3, #1
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <_kill>:

int _kill(int pid, int sig)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001956:	f005 fab9 	bl	8006ecc <__errno>
 800195a:	4603      	mov	r3, r0
 800195c:	2216      	movs	r2, #22
 800195e:	601a      	str	r2, [r3, #0]
	return -1;
 8001960:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001964:	4618      	mov	r0, r3
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <_exit>:

void _exit (int status)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001974:	f04f 31ff 	mov.w	r1, #4294967295
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff ffe7 	bl	800194c <_kill>
	while (1) {}		/* Make sure we hang here */
 800197e:	e7fe      	b.n	800197e <_exit+0x12>

08001980 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	e00a      	b.n	80019a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001992:	f3af 8000 	nop.w
 8001996:	4601      	mov	r1, r0
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	1c5a      	adds	r2, r3, #1
 800199c:	60ba      	str	r2, [r7, #8]
 800199e:	b2ca      	uxtb	r2, r1
 80019a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	3301      	adds	r3, #1
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	dbf0      	blt.n	8001992 <_read+0x12>
	}

return len;
 80019b0:	687b      	ldr	r3, [r7, #4]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <_close>:
	}
	return len;
}

int _close(int file)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
	return -1;
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b083      	sub	sp, #12
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
 80019da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019e2:	605a      	str	r2, [r3, #4]
	return 0;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <_isatty>:

int _isatty(int file)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
	return 1;
 80019fa:	2301      	movs	r3, #1
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
	return 0;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3714      	adds	r7, #20
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a2c:	4a14      	ldr	r2, [pc, #80]	; (8001a80 <_sbrk+0x5c>)
 8001a2e:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <_sbrk+0x60>)
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <_sbrk+0x64>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d102      	bne.n	8001a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <_sbrk+0x64>)
 8001a42:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <_sbrk+0x68>)
 8001a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a46:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <_sbrk+0x64>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d207      	bcs.n	8001a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a54:	f005 fa3a 	bl	8006ecc <__errno>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a62:	e009      	b.n	8001a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a64:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <_sbrk+0x64>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6a:	4b07      	ldr	r3, [pc, #28]	; (8001a88 <_sbrk+0x64>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	4a05      	ldr	r2, [pc, #20]	; (8001a88 <_sbrk+0x64>)
 8001a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a76:	68fb      	ldr	r3, [r7, #12]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20020000 	.word	0x20020000
 8001a84:	00004000 	.word	0x00004000
 8001a88:	20000458 	.word	0x20000458
 8001a8c:	20004310 	.word	0x20004310

08001a90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <SystemInit+0x20>)
 8001a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a9a:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <SystemInit+0x20>)
 8001a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ab8:	480d      	ldr	r0, [pc, #52]	; (8001af0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aba:	490e      	ldr	r1, [pc, #56]	; (8001af4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001abc:	4a0e      	ldr	r2, [pc, #56]	; (8001af8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac0:	e002      	b.n	8001ac8 <LoopCopyDataInit>

08001ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac6:	3304      	adds	r3, #4

08001ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001acc:	d3f9      	bcc.n	8001ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ace:	4a0b      	ldr	r2, [pc, #44]	; (8001afc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ad0:	4c0b      	ldr	r4, [pc, #44]	; (8001b00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad4:	e001      	b.n	8001ada <LoopFillZerobss>

08001ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad8:	3204      	adds	r2, #4

08001ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001adc:	d3fb      	bcc.n	8001ad6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ade:	f7ff ffd7 	bl	8001a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ae2:	f005 f9f9 	bl	8006ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ae6:	f7ff fa3b 	bl	8000f60 <main>
  bx  lr    
 8001aea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001aec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001af8:	0800a050 	.word	0x0800a050
  ldr r2, =_sbss
 8001afc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001b00:	2000430c 	.word	0x2000430c

08001b04 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b04:	e7fe      	b.n	8001b04 <CAN1_RX0_IRQHandler>
	...

08001b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <HAL_Init+0x40>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a0d      	ldr	r2, [pc, #52]	; (8001b48 <HAL_Init+0x40>)
 8001b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_Init+0x40>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0a      	ldr	r2, [pc, #40]	; (8001b48 <HAL_Init+0x40>)
 8001b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <HAL_Init+0x40>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <HAL_Init+0x40>)
 8001b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b30:	2003      	movs	r0, #3
 8001b32:	f000 fd84 	bl	800263e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b36:	2000      	movs	r0, #0
 8001b38:	f7ff fe72 	bl	8001820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b3c:	f7ff fdac 	bl	8001698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40023c00 	.word	0x40023c00

08001b4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_IncTick+0x20>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_IncTick+0x24>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <HAL_IncTick+0x24>)
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000008 	.word	0x20000008
 8001b70:	200042f8 	.word	0x200042f8

08001b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  return uwTick;
 8001b78:	4b03      	ldr	r3, [pc, #12]	; (8001b88 <HAL_GetTick+0x14>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	200042f8 	.word	0x200042f8

08001b8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e033      	b.n	8001c0a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d109      	bne.n	8001bbe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f7ff fda0 	bl	80016f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	f003 0310 	and.w	r3, r3, #16
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d118      	bne.n	8001bfc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bd2:	f023 0302 	bic.w	r3, r3, #2
 8001bd6:	f043 0202 	orr.w	r2, r3, #2
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 fb7a 	bl	80022d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f023 0303 	bic.w	r3, r3, #3
 8001bf2:	f043 0201 	orr.w	r2, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	641a      	str	r2, [r3, #64]	; 0x40
 8001bfa:	e001      	b.n	8001c00 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d101      	bne.n	8001c2e <HAL_ADC_Start_IT+0x1a>
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	e0bd      	b.n	8001daa <HAL_ADC_Start_IT+0x196>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d018      	beq.n	8001c76 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 0201 	orr.w	r2, r2, #1
 8001c52:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c54:	4b58      	ldr	r3, [pc, #352]	; (8001db8 <HAL_ADC_Start_IT+0x1a4>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a58      	ldr	r2, [pc, #352]	; (8001dbc <HAL_ADC_Start_IT+0x1a8>)
 8001c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5e:	0c9a      	lsrs	r2, r3, #18
 8001c60:	4613      	mov	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	4413      	add	r3, r2
 8001c66:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c68:	e002      	b.n	8001c70 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f9      	bne.n	8001c6a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	f040 8085 	bne.w	8001d90 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c8e:	f023 0301 	bic.w	r3, r3, #1
 8001c92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d007      	beq.n	8001cb8 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cb0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cc4:	d106      	bne.n	8001cd4 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	f023 0206 	bic.w	r2, r3, #6
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	645a      	str	r2, [r3, #68]	; 0x44
 8001cd2:	e002      	b.n	8001cda <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ce2:	4b37      	ldr	r3, [pc, #220]	; (8001dc0 <HAL_ADC_Start_IT+0x1ac>)
 8001ce4:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001cee:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	6812      	ldr	r2, [r2, #0]
 8001cfa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001cfe:	f043 0320 	orr.w	r3, r3, #32
 8001d02:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 031f 	and.w	r3, r3, #31
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d12a      	bne.n	8001d66 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a2b      	ldr	r2, [pc, #172]	; (8001dc4 <HAL_ADC_Start_IT+0x1b0>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d015      	beq.n	8001d46 <HAL_ADC_Start_IT+0x132>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a2a      	ldr	r2, [pc, #168]	; (8001dc8 <HAL_ADC_Start_IT+0x1b4>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d105      	bne.n	8001d30 <HAL_ADC_Start_IT+0x11c>
 8001d24:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <HAL_ADC_Start_IT+0x1ac>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 031f 	and.w	r3, r3, #31
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00a      	beq.n	8001d46 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a25      	ldr	r2, [pc, #148]	; (8001dcc <HAL_ADC_Start_IT+0x1b8>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d136      	bne.n	8001da8 <HAL_ADC_Start_IT+0x194>
 8001d3a:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <HAL_ADC_Start_IT+0x1ac>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f003 0310 	and.w	r3, r3, #16
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d130      	bne.n	8001da8 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d129      	bne.n	8001da8 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	e020      	b.n	8001da8 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a16      	ldr	r2, [pc, #88]	; (8001dc4 <HAL_ADC_Start_IT+0x1b0>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d11b      	bne.n	8001da8 <HAL_ADC_Start_IT+0x194>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d114      	bne.n	8001da8 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	e00b      	b.n	8001da8 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	f043 0210 	orr.w	r2, r3, #16
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da0:	f043 0201 	orr.w	r2, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	431bde83 	.word	0x431bde83
 8001dc0:	40012300 	.word	0x40012300
 8001dc4:	40012000 	.word	0x40012000
 8001dc8:	40012100 	.word	0x40012100
 8001dcc:	40012200 	.word	0x40012200

08001dd0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	bf0c      	ite	eq
 8001dee:	2301      	moveq	r3, #1
 8001df0:	2300      	movne	r3, #0
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0320 	and.w	r3, r3, #32
 8001e00:	2b20      	cmp	r3, #32
 8001e02:	bf0c      	ite	eq
 8001e04:	2301      	moveq	r3, #1
 8001e06:	2300      	movne	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d049      	beq.n	8001ea6 <HAL_ADC_IRQHandler+0xd6>
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d046      	beq.n	8001ea6 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	f003 0310 	and.w	r3, r3, #16
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d105      	bne.n	8001e30 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e28:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d12b      	bne.n	8001e96 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d127      	bne.n	8001e96 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d006      	beq.n	8001e62 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d119      	bne.n	8001e96 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f022 0220 	bic.w	r2, r2, #32
 8001e70:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d105      	bne.n	8001e96 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f043 0201 	orr.w	r2, r3, #1
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff fb48 	bl	800152c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f06f 0212 	mvn.w	r2, #18
 8001ea4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b04      	cmp	r3, #4
 8001eb2:	bf0c      	ite	eq
 8001eb4:	2301      	moveq	r3, #1
 8001eb6:	2300      	movne	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec6:	2b80      	cmp	r3, #128	; 0x80
 8001ec8:	bf0c      	ite	eq
 8001eca:	2301      	moveq	r3, #1
 8001ecc:	2300      	movne	r3, #0
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d057      	beq.n	8001f88 <HAL_ADC_IRQHandler+0x1b8>
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d054      	beq.n	8001f88 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	f003 0310 	and.w	r3, r3, #16
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d105      	bne.n	8001ef6 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d139      	bne.n	8001f78 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d006      	beq.n	8001f20 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d12b      	bne.n	8001f78 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d124      	bne.n	8001f78 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d11d      	bne.n	8001f78 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d119      	bne.n	8001f78 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f52:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d105      	bne.n	8001f78 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	f043 0201 	orr.w	r2, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 faa9 	bl	80024d0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f06f 020c 	mvn.w	r2, #12
 8001f86:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	bf0c      	ite	eq
 8001f96:	2301      	moveq	r3, #1
 8001f98:	2300      	movne	r3, #0
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa8:	2b40      	cmp	r3, #64	; 0x40
 8001faa:	bf0c      	ite	eq
 8001fac:	2301      	moveq	r3, #1
 8001fae:	2300      	movne	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d017      	beq.n	8001fea <HAL_ADC_IRQHandler+0x21a>
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d014      	beq.n	8001fea <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d10d      	bne.n	8001fea <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f846 	bl	800206c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0201 	mvn.w	r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0320 	and.w	r3, r3, #32
 8001ff4:	2b20      	cmp	r3, #32
 8001ff6:	bf0c      	ite	eq
 8001ff8:	2301      	moveq	r3, #1
 8001ffa:	2300      	movne	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800200a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800200e:	bf0c      	ite	eq
 8002010:	2301      	moveq	r3, #1
 8002012:	2300      	movne	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d015      	beq.n	800204a <HAL_ADC_IRQHandler+0x27a>
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d012      	beq.n	800204a <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002028:	f043 0202 	orr.w	r2, r3, #2
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f06f 0220 	mvn.w	r2, #32
 8002038:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f820 	bl	8002080 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0220 	mvn.w	r2, #32
 8002048:	601a      	str	r2, [r3, #0]
  }
}
 800204a:	bf00      	nop
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d101      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x1c>
 80020ac:	2302      	movs	r3, #2
 80020ae:	e105      	b.n	80022bc <HAL_ADC_ConfigChannel+0x228>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b09      	cmp	r3, #9
 80020be:	d925      	bls.n	800210c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68d9      	ldr	r1, [r3, #12]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	461a      	mov	r2, r3
 80020ce:	4613      	mov	r3, r2
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	4413      	add	r3, r2
 80020d4:	3b1e      	subs	r3, #30
 80020d6:	2207      	movs	r2, #7
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43da      	mvns	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	400a      	ands	r2, r1
 80020e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	68d9      	ldr	r1, [r3, #12]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	4618      	mov	r0, r3
 80020f8:	4603      	mov	r3, r0
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4403      	add	r3, r0
 80020fe:	3b1e      	subs	r3, #30
 8002100:	409a      	lsls	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	e022      	b.n	8002152 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6919      	ldr	r1, [r3, #16]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	b29b      	uxth	r3, r3
 8002118:	461a      	mov	r2, r3
 800211a:	4613      	mov	r3, r2
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	4413      	add	r3, r2
 8002120:	2207      	movs	r2, #7
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43da      	mvns	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	400a      	ands	r2, r1
 800212e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6919      	ldr	r1, [r3, #16]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	b29b      	uxth	r3, r3
 8002140:	4618      	mov	r0, r3
 8002142:	4603      	mov	r3, r0
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4403      	add	r3, r0
 8002148:	409a      	lsls	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	430a      	orrs	r2, r1
 8002150:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b06      	cmp	r3, #6
 8002158:	d824      	bhi.n	80021a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	3b05      	subs	r3, #5
 800216c:	221f      	movs	r2, #31
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43da      	mvns	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	400a      	ands	r2, r1
 800217a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	b29b      	uxth	r3, r3
 8002188:	4618      	mov	r0, r3
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	3b05      	subs	r3, #5
 8002196:	fa00 f203 	lsl.w	r2, r0, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	635a      	str	r2, [r3, #52]	; 0x34
 80021a2:	e04c      	b.n	800223e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	2b0c      	cmp	r3, #12
 80021aa:	d824      	bhi.n	80021f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	3b23      	subs	r3, #35	; 0x23
 80021be:	221f      	movs	r2, #31
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43da      	mvns	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	400a      	ands	r2, r1
 80021cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	b29b      	uxth	r3, r3
 80021da:	4618      	mov	r0, r3
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	3b23      	subs	r3, #35	; 0x23
 80021e8:	fa00 f203 	lsl.w	r2, r0, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	631a      	str	r2, [r3, #48]	; 0x30
 80021f4:	e023      	b.n	800223e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	3b41      	subs	r3, #65	; 0x41
 8002208:	221f      	movs	r2, #31
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43da      	mvns	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	400a      	ands	r2, r1
 8002216:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	b29b      	uxth	r3, r3
 8002224:	4618      	mov	r0, r3
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	3b41      	subs	r3, #65	; 0x41
 8002232:	fa00 f203 	lsl.w	r2, r0, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800223e:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <HAL_ADC_ConfigChannel+0x234>)
 8002240:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a21      	ldr	r2, [pc, #132]	; (80022cc <HAL_ADC_ConfigChannel+0x238>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d109      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x1cc>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b12      	cmp	r3, #18
 8002252:	d105      	bne.n	8002260 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a19      	ldr	r2, [pc, #100]	; (80022cc <HAL_ADC_ConfigChannel+0x238>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d123      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x21e>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b10      	cmp	r3, #16
 8002270:	d003      	beq.n	800227a <HAL_ADC_ConfigChannel+0x1e6>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b11      	cmp	r3, #17
 8002278:	d11b      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b10      	cmp	r3, #16
 800228c:	d111      	bne.n	80022b2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800228e:	4b10      	ldr	r3, [pc, #64]	; (80022d0 <HAL_ADC_ConfigChannel+0x23c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a10      	ldr	r2, [pc, #64]	; (80022d4 <HAL_ADC_ConfigChannel+0x240>)
 8002294:	fba2 2303 	umull	r2, r3, r2, r3
 8002298:	0c9a      	lsrs	r2, r3, #18
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022a4:	e002      	b.n	80022ac <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	3b01      	subs	r3, #1
 80022aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f9      	bne.n	80022a6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	40012300 	.word	0x40012300
 80022cc:	40012000 	.word	0x40012000
 80022d0:	20000000 	.word	0x20000000
 80022d4:	431bde83 	.word	0x431bde83

080022d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022e0:	4b79      	ldr	r3, [pc, #484]	; (80024c8 <ADC_Init+0x1f0>)
 80022e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	431a      	orrs	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800230c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6859      	ldr	r1, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	021a      	lsls	r2, r3, #8
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002330:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6859      	ldr	r1, [r3, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002352:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6899      	ldr	r1, [r3, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68da      	ldr	r2, [r3, #12]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236a:	4a58      	ldr	r2, [pc, #352]	; (80024cc <ADC_Init+0x1f4>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d022      	beq.n	80023b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800237e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6899      	ldr	r1, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6899      	ldr	r1, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	e00f      	b.n	80023d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0202 	bic.w	r2, r2, #2
 80023e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6899      	ldr	r1, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	7e1b      	ldrb	r3, [r3, #24]
 80023f0:	005a      	lsls	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d01b      	beq.n	800243c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002412:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002422:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6859      	ldr	r1, [r3, #4]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242e:	3b01      	subs	r3, #1
 8002430:	035a      	lsls	r2, r3, #13
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	430a      	orrs	r2, r1
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	e007      	b.n	800244c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800244a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	3b01      	subs	r3, #1
 8002468:	051a      	lsls	r2, r3, #20
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002480:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6899      	ldr	r1, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800248e:	025a      	lsls	r2, r3, #9
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6899      	ldr	r1, [r3, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	029a      	lsls	r2, r3, #10
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	609a      	str	r2, [r3, #8]
}
 80024bc:	bf00      	nop
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	40012300 	.word	0x40012300
 80024cc:	0f000001 	.word	0x0f000001

080024d0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f4:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <__NVIC_SetPriorityGrouping+0x44>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002500:	4013      	ands	r3, r2
 8002502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800250c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002516:	4a04      	ldr	r2, [pc, #16]	; (8002528 <__NVIC_SetPriorityGrouping+0x44>)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	60d3      	str	r3, [r2, #12]
}
 800251c:	bf00      	nop
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002530:	4b04      	ldr	r3, [pc, #16]	; (8002544 <__NVIC_GetPriorityGrouping+0x18>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	0a1b      	lsrs	r3, r3, #8
 8002536:	f003 0307 	and.w	r3, r3, #7
}
 800253a:	4618      	mov	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000ed00 	.word	0xe000ed00

08002548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	2b00      	cmp	r3, #0
 8002558:	db0b      	blt.n	8002572 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	f003 021f 	and.w	r2, r3, #31
 8002560:	4907      	ldr	r1, [pc, #28]	; (8002580 <__NVIC_EnableIRQ+0x38>)
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	095b      	lsrs	r3, r3, #5
 8002568:	2001      	movs	r0, #1
 800256a:	fa00 f202 	lsl.w	r2, r0, r2
 800256e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	e000e100 	.word	0xe000e100

08002584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	6039      	str	r1, [r7, #0]
 800258e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002594:	2b00      	cmp	r3, #0
 8002596:	db0a      	blt.n	80025ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	b2da      	uxtb	r2, r3
 800259c:	490c      	ldr	r1, [pc, #48]	; (80025d0 <__NVIC_SetPriority+0x4c>)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	0112      	lsls	r2, r2, #4
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	440b      	add	r3, r1
 80025a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025ac:	e00a      	b.n	80025c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	4908      	ldr	r1, [pc, #32]	; (80025d4 <__NVIC_SetPriority+0x50>)
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	3b04      	subs	r3, #4
 80025bc:	0112      	lsls	r2, r2, #4
 80025be:	b2d2      	uxtb	r2, r2
 80025c0:	440b      	add	r3, r1
 80025c2:	761a      	strb	r2, [r3, #24]
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	e000e100 	.word	0xe000e100
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d8:	b480      	push	{r7}
 80025da:	b089      	sub	sp, #36	; 0x24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f1c3 0307 	rsb	r3, r3, #7
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	bf28      	it	cs
 80025f6:	2304      	movcs	r3, #4
 80025f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	3304      	adds	r3, #4
 80025fe:	2b06      	cmp	r3, #6
 8002600:	d902      	bls.n	8002608 <NVIC_EncodePriority+0x30>
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3b03      	subs	r3, #3
 8002606:	e000      	b.n	800260a <NVIC_EncodePriority+0x32>
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800260c:	f04f 32ff 	mov.w	r2, #4294967295
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43da      	mvns	r2, r3
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	401a      	ands	r2, r3
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002620:	f04f 31ff 	mov.w	r1, #4294967295
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	fa01 f303 	lsl.w	r3, r1, r3
 800262a:	43d9      	mvns	r1, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002630:	4313      	orrs	r3, r2
         );
}
 8002632:	4618      	mov	r0, r3
 8002634:	3724      	adds	r7, #36	; 0x24
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7ff ff4c 	bl	80024e4 <__NVIC_SetPriorityGrouping>
}
 800264c:	bf00      	nop
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
 8002660:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002662:	2300      	movs	r3, #0
 8002664:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002666:	f7ff ff61 	bl	800252c <__NVIC_GetPriorityGrouping>
 800266a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	68b9      	ldr	r1, [r7, #8]
 8002670:	6978      	ldr	r0, [r7, #20]
 8002672:	f7ff ffb1 	bl	80025d8 <NVIC_EncodePriority>
 8002676:	4602      	mov	r2, r0
 8002678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800267c:	4611      	mov	r1, r2
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff ff80 	bl	8002584 <__NVIC_SetPriority>
}
 8002684:	bf00      	nop
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ff54 	bl	8002548 <__NVIC_EnableIRQ>
}
 80026a0:	bf00      	nop
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026b6:	f7ff fa5d 	bl	8001b74 <HAL_GetTick>
 80026ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d008      	beq.n	80026da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2280      	movs	r2, #128	; 0x80
 80026cc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e052      	b.n	8002780 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0216 	bic.w	r2, r2, #22
 80026e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695a      	ldr	r2, [r3, #20]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d103      	bne.n	800270a <HAL_DMA_Abort+0x62>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002706:	2b00      	cmp	r3, #0
 8002708:	d007      	beq.n	800271a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0208 	bic.w	r2, r2, #8
 8002718:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0201 	bic.w	r2, r2, #1
 8002728:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800272a:	e013      	b.n	8002754 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800272c:	f7ff fa22 	bl	8001b74 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b05      	cmp	r3, #5
 8002738:	d90c      	bls.n	8002754 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2220      	movs	r2, #32
 800273e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2203      	movs	r2, #3
 800274c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e015      	b.n	8002780 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1e4      	bne.n	800272c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002766:	223f      	movs	r2, #63	; 0x3f
 8002768:	409a      	lsls	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d004      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2280      	movs	r2, #128	; 0x80
 80027a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e00c      	b.n	80027c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2205      	movs	r2, #5
 80027aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0201 	bic.w	r2, r2, #1
 80027bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b089      	sub	sp, #36	; 0x24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027da:	2300      	movs	r3, #0
 80027dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027de:	2300      	movs	r3, #0
 80027e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
 80027e6:	e16b      	b.n	8002ac0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027e8:	2201      	movs	r2, #1
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4013      	ands	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	429a      	cmp	r2, r3
 8002802:	f040 815a 	bne.w	8002aba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	2b01      	cmp	r3, #1
 8002810:	d005      	beq.n	800281e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800281a:	2b02      	cmp	r3, #2
 800281c:	d130      	bne.n	8002880 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	005b      	lsls	r3, r3, #1
 8002828:	2203      	movs	r2, #3
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43db      	mvns	r3, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4013      	ands	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	68da      	ldr	r2, [r3, #12]
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4313      	orrs	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002854:	2201      	movs	r2, #1
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	091b      	lsrs	r3, r3, #4
 800286a:	f003 0201 	and.w	r2, r3, #1
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b03      	cmp	r3, #3
 800288a:	d017      	beq.n	80028bc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	2203      	movs	r2, #3
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d123      	bne.n	8002910 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	08da      	lsrs	r2, r3, #3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3208      	adds	r2, #8
 80028d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	220f      	movs	r2, #15
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	08da      	lsrs	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	3208      	adds	r2, #8
 800290a:	69b9      	ldr	r1, [r7, #24]
 800290c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	2203      	movs	r2, #3
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 0203 	and.w	r2, r3, #3
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4313      	orrs	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	f000 80b4 	beq.w	8002aba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	4b60      	ldr	r3, [pc, #384]	; (8002ad8 <HAL_GPIO_Init+0x30c>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	4a5f      	ldr	r2, [pc, #380]	; (8002ad8 <HAL_GPIO_Init+0x30c>)
 800295c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002960:	6453      	str	r3, [r2, #68]	; 0x44
 8002962:	4b5d      	ldr	r3, [pc, #372]	; (8002ad8 <HAL_GPIO_Init+0x30c>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800296e:	4a5b      	ldr	r2, [pc, #364]	; (8002adc <HAL_GPIO_Init+0x310>)
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	089b      	lsrs	r3, r3, #2
 8002974:	3302      	adds	r3, #2
 8002976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	220f      	movs	r2, #15
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43db      	mvns	r3, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4013      	ands	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a52      	ldr	r2, [pc, #328]	; (8002ae0 <HAL_GPIO_Init+0x314>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d02b      	beq.n	80029f2 <HAL_GPIO_Init+0x226>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a51      	ldr	r2, [pc, #324]	; (8002ae4 <HAL_GPIO_Init+0x318>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d025      	beq.n	80029ee <HAL_GPIO_Init+0x222>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a50      	ldr	r2, [pc, #320]	; (8002ae8 <HAL_GPIO_Init+0x31c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d01f      	beq.n	80029ea <HAL_GPIO_Init+0x21e>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a4f      	ldr	r2, [pc, #316]	; (8002aec <HAL_GPIO_Init+0x320>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d019      	beq.n	80029e6 <HAL_GPIO_Init+0x21a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a4e      	ldr	r2, [pc, #312]	; (8002af0 <HAL_GPIO_Init+0x324>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d013      	beq.n	80029e2 <HAL_GPIO_Init+0x216>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a4d      	ldr	r2, [pc, #308]	; (8002af4 <HAL_GPIO_Init+0x328>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d00d      	beq.n	80029de <HAL_GPIO_Init+0x212>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a4c      	ldr	r2, [pc, #304]	; (8002af8 <HAL_GPIO_Init+0x32c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d007      	beq.n	80029da <HAL_GPIO_Init+0x20e>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a4b      	ldr	r2, [pc, #300]	; (8002afc <HAL_GPIO_Init+0x330>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d101      	bne.n	80029d6 <HAL_GPIO_Init+0x20a>
 80029d2:	2307      	movs	r3, #7
 80029d4:	e00e      	b.n	80029f4 <HAL_GPIO_Init+0x228>
 80029d6:	2308      	movs	r3, #8
 80029d8:	e00c      	b.n	80029f4 <HAL_GPIO_Init+0x228>
 80029da:	2306      	movs	r3, #6
 80029dc:	e00a      	b.n	80029f4 <HAL_GPIO_Init+0x228>
 80029de:	2305      	movs	r3, #5
 80029e0:	e008      	b.n	80029f4 <HAL_GPIO_Init+0x228>
 80029e2:	2304      	movs	r3, #4
 80029e4:	e006      	b.n	80029f4 <HAL_GPIO_Init+0x228>
 80029e6:	2303      	movs	r3, #3
 80029e8:	e004      	b.n	80029f4 <HAL_GPIO_Init+0x228>
 80029ea:	2302      	movs	r3, #2
 80029ec:	e002      	b.n	80029f4 <HAL_GPIO_Init+0x228>
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <HAL_GPIO_Init+0x228>
 80029f2:	2300      	movs	r3, #0
 80029f4:	69fa      	ldr	r2, [r7, #28]
 80029f6:	f002 0203 	and.w	r2, r2, #3
 80029fa:	0092      	lsls	r2, r2, #2
 80029fc:	4093      	lsls	r3, r2
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a04:	4935      	ldr	r1, [pc, #212]	; (8002adc <HAL_GPIO_Init+0x310>)
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	089b      	lsrs	r3, r3, #2
 8002a0a:	3302      	adds	r3, #2
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a12:	4b3b      	ldr	r3, [pc, #236]	; (8002b00 <HAL_GPIO_Init+0x334>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a36:	4a32      	ldr	r2, [pc, #200]	; (8002b00 <HAL_GPIO_Init+0x334>)
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a3c:	4b30      	ldr	r3, [pc, #192]	; (8002b00 <HAL_GPIO_Init+0x334>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	43db      	mvns	r3, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d003      	beq.n	8002a60 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a60:	4a27      	ldr	r2, [pc, #156]	; (8002b00 <HAL_GPIO_Init+0x334>)
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a66:	4b26      	ldr	r3, [pc, #152]	; (8002b00 <HAL_GPIO_Init+0x334>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4013      	ands	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a8a:	4a1d      	ldr	r2, [pc, #116]	; (8002b00 <HAL_GPIO_Init+0x334>)
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a90:	4b1b      	ldr	r3, [pc, #108]	; (8002b00 <HAL_GPIO_Init+0x334>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d003      	beq.n	8002ab4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ab4:	4a12      	ldr	r2, [pc, #72]	; (8002b00 <HAL_GPIO_Init+0x334>)
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	3301      	adds	r3, #1
 8002abe:	61fb      	str	r3, [r7, #28]
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	2b0f      	cmp	r3, #15
 8002ac4:	f67f ae90 	bls.w	80027e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ac8:	bf00      	nop
 8002aca:	bf00      	nop
 8002acc:	3724      	adds	r7, #36	; 0x24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	40013800 	.word	0x40013800
 8002ae0:	40020000 	.word	0x40020000
 8002ae4:	40020400 	.word	0x40020400
 8002ae8:	40020800 	.word	0x40020800
 8002aec:	40020c00 	.word	0x40020c00
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40021400 	.word	0x40021400
 8002af8:	40021800 	.word	0x40021800
 8002afc:	40021c00 	.word	0x40021c00
 8002b00:	40013c00 	.word	0x40013c00

08002b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	807b      	strh	r3, [r7, #2]
 8002b10:	4613      	mov	r3, r2
 8002b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b14:	787b      	ldrb	r3, [r7, #1]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b1a:	887a      	ldrh	r2, [r7, #2]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b20:	e003      	b.n	8002b2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b22:	887b      	ldrh	r3, [r7, #2]
 8002b24:	041a      	lsls	r2, r3, #16
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	619a      	str	r2, [r3, #24]
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b085      	sub	sp, #20
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b48:	887a      	ldrh	r2, [r7, #2]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	041a      	lsls	r2, r3, #16
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	43d9      	mvns	r1, r3
 8002b54:	887b      	ldrh	r3, [r7, #2]
 8002b56:	400b      	ands	r3, r1
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	619a      	str	r2, [r3, #24]
}
 8002b5e:	bf00      	nop
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
	...

08002b6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e264      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d075      	beq.n	8002c76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b8a:	4ba3      	ldr	r3, [pc, #652]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d00c      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b96:	4ba0      	ldr	r3, [pc, #640]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d112      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ba2:	4b9d      	ldr	r3, [pc, #628]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002baa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bae:	d10b      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb0:	4b99      	ldr	r3, [pc, #612]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d05b      	beq.n	8002c74 <HAL_RCC_OscConfig+0x108>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d157      	bne.n	8002c74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e23f      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd0:	d106      	bne.n	8002be0 <HAL_RCC_OscConfig+0x74>
 8002bd2:	4b91      	ldr	r3, [pc, #580]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a90      	ldr	r2, [pc, #576]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	e01d      	b.n	8002c1c <HAL_RCC_OscConfig+0xb0>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002be8:	d10c      	bne.n	8002c04 <HAL_RCC_OscConfig+0x98>
 8002bea:	4b8b      	ldr	r3, [pc, #556]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a8a      	ldr	r2, [pc, #552]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	4b88      	ldr	r3, [pc, #544]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a87      	ldr	r2, [pc, #540]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c00:	6013      	str	r3, [r2, #0]
 8002c02:	e00b      	b.n	8002c1c <HAL_RCC_OscConfig+0xb0>
 8002c04:	4b84      	ldr	r3, [pc, #528]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a83      	ldr	r2, [pc, #524]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c0e:	6013      	str	r3, [r2, #0]
 8002c10:	4b81      	ldr	r3, [pc, #516]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a80      	ldr	r2, [pc, #512]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d013      	beq.n	8002c4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c24:	f7fe ffa6 	bl	8001b74 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2a:	e008      	b.n	8002c3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c2c:	f7fe ffa2 	bl	8001b74 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b64      	cmp	r3, #100	; 0x64
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e204      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3e:	4b76      	ldr	r3, [pc, #472]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d0f0      	beq.n	8002c2c <HAL_RCC_OscConfig+0xc0>
 8002c4a:	e014      	b.n	8002c76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7fe ff92 	bl	8001b74 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c54:	f7fe ff8e 	bl	8001b74 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b64      	cmp	r3, #100	; 0x64
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e1f0      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c66:	4b6c      	ldr	r3, [pc, #432]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0xe8>
 8002c72:	e000      	b.n	8002c76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d063      	beq.n	8002d4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c82:	4b65      	ldr	r3, [pc, #404]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 030c 	and.w	r3, r3, #12
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00b      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c8e:	4b62      	ldr	r3, [pc, #392]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c96:	2b08      	cmp	r3, #8
 8002c98:	d11c      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c9a:	4b5f      	ldr	r3, [pc, #380]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d116      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca6:	4b5c      	ldr	r3, [pc, #368]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d005      	beq.n	8002cbe <HAL_RCC_OscConfig+0x152>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d001      	beq.n	8002cbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e1c4      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cbe:	4b56      	ldr	r3, [pc, #344]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4952      	ldr	r1, [pc, #328]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd2:	e03a      	b.n	8002d4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d020      	beq.n	8002d1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cdc:	4b4f      	ldr	r3, [pc, #316]	; (8002e1c <HAL_RCC_OscConfig+0x2b0>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce2:	f7fe ff47 	bl	8001b74 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cea:	f7fe ff43 	bl	8001b74 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e1a5      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfc:	4b46      	ldr	r3, [pc, #280]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d08:	4b43      	ldr	r3, [pc, #268]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	4940      	ldr	r1, [pc, #256]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	600b      	str	r3, [r1, #0]
 8002d1c:	e015      	b.n	8002d4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d1e:	4b3f      	ldr	r3, [pc, #252]	; (8002e1c <HAL_RCC_OscConfig+0x2b0>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7fe ff26 	bl	8001b74 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d2c:	f7fe ff22 	bl	8001b74 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e184      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3e:	4b36      	ldr	r3, [pc, #216]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d030      	beq.n	8002db8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d016      	beq.n	8002d8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d5e:	4b30      	ldr	r3, [pc, #192]	; (8002e20 <HAL_RCC_OscConfig+0x2b4>)
 8002d60:	2201      	movs	r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d64:	f7fe ff06 	bl	8001b74 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d6c:	f7fe ff02 	bl	8001b74 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e164      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7e:	4b26      	ldr	r3, [pc, #152]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0x200>
 8002d8a:	e015      	b.n	8002db8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d8c:	4b24      	ldr	r3, [pc, #144]	; (8002e20 <HAL_RCC_OscConfig+0x2b4>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d92:	f7fe feef 	bl	8001b74 <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d98:	e008      	b.n	8002dac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d9a:	f7fe feeb 	bl	8001b74 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e14d      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dac:	4b1a      	ldr	r3, [pc, #104]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db0:	f003 0302 	and.w	r3, r3, #2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f0      	bne.n	8002d9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 80a0 	beq.w	8002f06 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dca:	4b13      	ldr	r3, [pc, #76]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10f      	bne.n	8002df6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	4b0f      	ldr	r3, [pc, #60]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	4a0e      	ldr	r2, [pc, #56]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de4:	6413      	str	r3, [r2, #64]	; 0x40
 8002de6:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <HAL_RCC_OscConfig+0x2ac>)
 8002de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002df2:	2301      	movs	r3, #1
 8002df4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df6:	4b0b      	ldr	r3, [pc, #44]	; (8002e24 <HAL_RCC_OscConfig+0x2b8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d121      	bne.n	8002e46 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e02:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <HAL_RCC_OscConfig+0x2b8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a07      	ldr	r2, [pc, #28]	; (8002e24 <HAL_RCC_OscConfig+0x2b8>)
 8002e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0e:	f7fe feb1 	bl	8001b74 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e14:	e011      	b.n	8002e3a <HAL_RCC_OscConfig+0x2ce>
 8002e16:	bf00      	nop
 8002e18:	40023800 	.word	0x40023800
 8002e1c:	42470000 	.word	0x42470000
 8002e20:	42470e80 	.word	0x42470e80
 8002e24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e28:	f7fe fea4 	bl	8001b74 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e106      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e3a:	4b85      	ldr	r3, [pc, #532]	; (8003050 <HAL_RCC_OscConfig+0x4e4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d106      	bne.n	8002e5c <HAL_RCC_OscConfig+0x2f0>
 8002e4e:	4b81      	ldr	r3, [pc, #516]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e52:	4a80      	ldr	r2, [pc, #512]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	6713      	str	r3, [r2, #112]	; 0x70
 8002e5a:	e01c      	b.n	8002e96 <HAL_RCC_OscConfig+0x32a>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2b05      	cmp	r3, #5
 8002e62:	d10c      	bne.n	8002e7e <HAL_RCC_OscConfig+0x312>
 8002e64:	4b7b      	ldr	r3, [pc, #492]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e68:	4a7a      	ldr	r2, [pc, #488]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002e6a:	f043 0304 	orr.w	r3, r3, #4
 8002e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e70:	4b78      	ldr	r3, [pc, #480]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e74:	4a77      	ldr	r2, [pc, #476]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002e76:	f043 0301 	orr.w	r3, r3, #1
 8002e7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7c:	e00b      	b.n	8002e96 <HAL_RCC_OscConfig+0x32a>
 8002e7e:	4b75      	ldr	r3, [pc, #468]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	4a74      	ldr	r2, [pc, #464]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002e84:	f023 0301 	bic.w	r3, r3, #1
 8002e88:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8a:	4b72      	ldr	r3, [pc, #456]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8e:	4a71      	ldr	r2, [pc, #452]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002e90:	f023 0304 	bic.w	r3, r3, #4
 8002e94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d015      	beq.n	8002eca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9e:	f7fe fe69 	bl	8001b74 <HAL_GetTick>
 8002ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea4:	e00a      	b.n	8002ebc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea6:	f7fe fe65 	bl	8001b74 <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e0c5      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ebc:	4b65      	ldr	r3, [pc, #404]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0ee      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x33a>
 8002ec8:	e014      	b.n	8002ef4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eca:	f7fe fe53 	bl	8001b74 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ed0:	e00a      	b.n	8002ee8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ed2:	f7fe fe4f 	bl	8001b74 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e0af      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee8:	4b5a      	ldr	r3, [pc, #360]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1ee      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ef4:	7dfb      	ldrb	r3, [r7, #23]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d105      	bne.n	8002f06 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002efa:	4b56      	ldr	r3, [pc, #344]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	4a55      	ldr	r2, [pc, #340]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 809b 	beq.w	8003046 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f10:	4b50      	ldr	r3, [pc, #320]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 030c 	and.w	r3, r3, #12
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d05c      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d141      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f24:	4b4c      	ldr	r3, [pc, #304]	; (8003058 <HAL_RCC_OscConfig+0x4ec>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f2a:	f7fe fe23 	bl	8001b74 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f30:	e008      	b.n	8002f44 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f32:	f7fe fe1f 	bl	8001b74 <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e081      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f44:	4b43      	ldr	r3, [pc, #268]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d1f0      	bne.n	8002f32 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69da      	ldr	r2, [r3, #28]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	019b      	lsls	r3, r3, #6
 8002f60:	431a      	orrs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f66:	085b      	lsrs	r3, r3, #1
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	041b      	lsls	r3, r3, #16
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f72:	061b      	lsls	r3, r3, #24
 8002f74:	4937      	ldr	r1, [pc, #220]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f7a:	4b37      	ldr	r3, [pc, #220]	; (8003058 <HAL_RCC_OscConfig+0x4ec>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f80:	f7fe fdf8 	bl	8001b74 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f88:	f7fe fdf4 	bl	8001b74 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e056      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9a:	4b2e      	ldr	r3, [pc, #184]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0x41c>
 8002fa6:	e04e      	b.n	8003046 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fa8:	4b2b      	ldr	r3, [pc, #172]	; (8003058 <HAL_RCC_OscConfig+0x4ec>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fae:	f7fe fde1 	bl	8001b74 <HAL_GetTick>
 8002fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb4:	e008      	b.n	8002fc8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb6:	f7fe fddd 	bl	8001b74 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e03f      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc8:	4b22      	ldr	r3, [pc, #136]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1f0      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x44a>
 8002fd4:	e037      	b.n	8003046 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e032      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fe2:	4b1c      	ldr	r3, [pc, #112]	; (8003054 <HAL_RCC_OscConfig+0x4e8>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d028      	beq.n	8003042 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d121      	bne.n	8003042 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d11a      	bne.n	8003042 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003012:	4013      	ands	r3, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003018:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800301a:	4293      	cmp	r3, r2
 800301c:	d111      	bne.n	8003042 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	085b      	lsrs	r3, r3, #1
 800302a:	3b01      	subs	r3, #1
 800302c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800302e:	429a      	cmp	r2, r3
 8003030:	d107      	bne.n	8003042 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800303e:	429a      	cmp	r2, r3
 8003040:	d001      	beq.n	8003046 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40007000 	.word	0x40007000
 8003054:	40023800 	.word	0x40023800
 8003058:	42470060 	.word	0x42470060

0800305c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e0cc      	b.n	800320a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003070:	4b68      	ldr	r3, [pc, #416]	; (8003214 <HAL_RCC_ClockConfig+0x1b8>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d90c      	bls.n	8003098 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307e:	4b65      	ldr	r3, [pc, #404]	; (8003214 <HAL_RCC_ClockConfig+0x1b8>)
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003086:	4b63      	ldr	r3, [pc, #396]	; (8003214 <HAL_RCC_ClockConfig+0x1b8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	429a      	cmp	r2, r3
 8003092:	d001      	beq.n	8003098 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e0b8      	b.n	800320a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d020      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030b0:	4b59      	ldr	r3, [pc, #356]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	4a58      	ldr	r2, [pc, #352]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030c8:	4b53      	ldr	r3, [pc, #332]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	4a52      	ldr	r2, [pc, #328]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030d4:	4b50      	ldr	r3, [pc, #320]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	494d      	ldr	r1, [pc, #308]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d044      	beq.n	800317c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d107      	bne.n	800310a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fa:	4b47      	ldr	r3, [pc, #284]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d119      	bne.n	800313a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e07f      	b.n	800320a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d003      	beq.n	800311a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003116:	2b03      	cmp	r3, #3
 8003118:	d107      	bne.n	800312a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800311a:	4b3f      	ldr	r3, [pc, #252]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d109      	bne.n	800313a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e06f      	b.n	800320a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312a:	4b3b      	ldr	r3, [pc, #236]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e067      	b.n	800320a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800313a:	4b37      	ldr	r3, [pc, #220]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f023 0203 	bic.w	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	4934      	ldr	r1, [pc, #208]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 8003148:	4313      	orrs	r3, r2
 800314a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800314c:	f7fe fd12 	bl	8001b74 <HAL_GetTick>
 8003150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003152:	e00a      	b.n	800316a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003154:	f7fe fd0e 	bl	8001b74 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e04f      	b.n	800320a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316a:	4b2b      	ldr	r3, [pc, #172]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 020c 	and.w	r2, r3, #12
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	429a      	cmp	r2, r3
 800317a:	d1eb      	bne.n	8003154 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800317c:	4b25      	ldr	r3, [pc, #148]	; (8003214 <HAL_RCC_ClockConfig+0x1b8>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	429a      	cmp	r2, r3
 8003188:	d20c      	bcs.n	80031a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318a:	4b22      	ldr	r3, [pc, #136]	; (8003214 <HAL_RCC_ClockConfig+0x1b8>)
 800318c:	683a      	ldr	r2, [r7, #0]
 800318e:	b2d2      	uxtb	r2, r2
 8003190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003192:	4b20      	ldr	r3, [pc, #128]	; (8003214 <HAL_RCC_ClockConfig+0x1b8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d001      	beq.n	80031a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e032      	b.n	800320a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d008      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031b0:	4b19      	ldr	r3, [pc, #100]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	4916      	ldr	r1, [pc, #88]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d009      	beq.n	80031e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ce:	4b12      	ldr	r3, [pc, #72]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	490e      	ldr	r1, [pc, #56]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031e2:	f000 f821 	bl	8003228 <HAL_RCC_GetSysClockFreq>
 80031e6:	4602      	mov	r2, r0
 80031e8:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	091b      	lsrs	r3, r3, #4
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	490a      	ldr	r1, [pc, #40]	; (800321c <HAL_RCC_ClockConfig+0x1c0>)
 80031f4:	5ccb      	ldrb	r3, [r1, r3]
 80031f6:	fa22 f303 	lsr.w	r3, r2, r3
 80031fa:	4a09      	ldr	r2, [pc, #36]	; (8003220 <HAL_RCC_ClockConfig+0x1c4>)
 80031fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031fe:	4b09      	ldr	r3, [pc, #36]	; (8003224 <HAL_RCC_ClockConfig+0x1c8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7fe fb0c 	bl	8001820 <HAL_InitTick>

  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	3710      	adds	r7, #16
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	40023c00 	.word	0x40023c00
 8003218:	40023800 	.word	0x40023800
 800321c:	08009be0 	.word	0x08009be0
 8003220:	20000000 	.word	0x20000000
 8003224:	20000004 	.word	0x20000004

08003228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003228:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800322c:	b084      	sub	sp, #16
 800322e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	607b      	str	r3, [r7, #4]
 8003234:	2300      	movs	r3, #0
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	2300      	movs	r3, #0
 800323a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003240:	4b67      	ldr	r3, [pc, #412]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 030c 	and.w	r3, r3, #12
 8003248:	2b08      	cmp	r3, #8
 800324a:	d00d      	beq.n	8003268 <HAL_RCC_GetSysClockFreq+0x40>
 800324c:	2b08      	cmp	r3, #8
 800324e:	f200 80bd 	bhi.w	80033cc <HAL_RCC_GetSysClockFreq+0x1a4>
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <HAL_RCC_GetSysClockFreq+0x34>
 8003256:	2b04      	cmp	r3, #4
 8003258:	d003      	beq.n	8003262 <HAL_RCC_GetSysClockFreq+0x3a>
 800325a:	e0b7      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800325c:	4b61      	ldr	r3, [pc, #388]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800325e:	60bb      	str	r3, [r7, #8]
       break;
 8003260:	e0b7      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003262:	4b61      	ldr	r3, [pc, #388]	; (80033e8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003264:	60bb      	str	r3, [r7, #8]
      break;
 8003266:	e0b4      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003268:	4b5d      	ldr	r3, [pc, #372]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003270:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003272:	4b5b      	ldr	r3, [pc, #364]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d04d      	beq.n	800331a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800327e:	4b58      	ldr	r3, [pc, #352]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	099b      	lsrs	r3, r3, #6
 8003284:	461a      	mov	r2, r3
 8003286:	f04f 0300 	mov.w	r3, #0
 800328a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800328e:	f04f 0100 	mov.w	r1, #0
 8003292:	ea02 0800 	and.w	r8, r2, r0
 8003296:	ea03 0901 	and.w	r9, r3, r1
 800329a:	4640      	mov	r0, r8
 800329c:	4649      	mov	r1, r9
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	f04f 0300 	mov.w	r3, #0
 80032a6:	014b      	lsls	r3, r1, #5
 80032a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032ac:	0142      	lsls	r2, r0, #5
 80032ae:	4610      	mov	r0, r2
 80032b0:	4619      	mov	r1, r3
 80032b2:	ebb0 0008 	subs.w	r0, r0, r8
 80032b6:	eb61 0109 	sbc.w	r1, r1, r9
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	018b      	lsls	r3, r1, #6
 80032c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032c8:	0182      	lsls	r2, r0, #6
 80032ca:	1a12      	subs	r2, r2, r0
 80032cc:	eb63 0301 	sbc.w	r3, r3, r1
 80032d0:	f04f 0000 	mov.w	r0, #0
 80032d4:	f04f 0100 	mov.w	r1, #0
 80032d8:	00d9      	lsls	r1, r3, #3
 80032da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032de:	00d0      	lsls	r0, r2, #3
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	eb12 0208 	adds.w	r2, r2, r8
 80032e8:	eb43 0309 	adc.w	r3, r3, r9
 80032ec:	f04f 0000 	mov.w	r0, #0
 80032f0:	f04f 0100 	mov.w	r1, #0
 80032f4:	0259      	lsls	r1, r3, #9
 80032f6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80032fa:	0250      	lsls	r0, r2, #9
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4610      	mov	r0, r2
 8003302:	4619      	mov	r1, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	461a      	mov	r2, r3
 8003308:	f04f 0300 	mov.w	r3, #0
 800330c:	f7fd fc4c 	bl	8000ba8 <__aeabi_uldivmod>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4613      	mov	r3, r2
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	e04a      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800331a:	4b31      	ldr	r3, [pc, #196]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	099b      	lsrs	r3, r3, #6
 8003320:	461a      	mov	r2, r3
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	f240 10ff 	movw	r0, #511	; 0x1ff
 800332a:	f04f 0100 	mov.w	r1, #0
 800332e:	ea02 0400 	and.w	r4, r2, r0
 8003332:	ea03 0501 	and.w	r5, r3, r1
 8003336:	4620      	mov	r0, r4
 8003338:	4629      	mov	r1, r5
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	014b      	lsls	r3, r1, #5
 8003344:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003348:	0142      	lsls	r2, r0, #5
 800334a:	4610      	mov	r0, r2
 800334c:	4619      	mov	r1, r3
 800334e:	1b00      	subs	r0, r0, r4
 8003350:	eb61 0105 	sbc.w	r1, r1, r5
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	018b      	lsls	r3, r1, #6
 800335e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003362:	0182      	lsls	r2, r0, #6
 8003364:	1a12      	subs	r2, r2, r0
 8003366:	eb63 0301 	sbc.w	r3, r3, r1
 800336a:	f04f 0000 	mov.w	r0, #0
 800336e:	f04f 0100 	mov.w	r1, #0
 8003372:	00d9      	lsls	r1, r3, #3
 8003374:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003378:	00d0      	lsls	r0, r2, #3
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	1912      	adds	r2, r2, r4
 8003380:	eb45 0303 	adc.w	r3, r5, r3
 8003384:	f04f 0000 	mov.w	r0, #0
 8003388:	f04f 0100 	mov.w	r1, #0
 800338c:	0299      	lsls	r1, r3, #10
 800338e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003392:	0290      	lsls	r0, r2, #10
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4610      	mov	r0, r2
 800339a:	4619      	mov	r1, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	461a      	mov	r2, r3
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	f7fd fc00 	bl	8000ba8 <__aeabi_uldivmod>
 80033a8:	4602      	mov	r2, r0
 80033aa:	460b      	mov	r3, r1
 80033ac:	4613      	mov	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033b0:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	0c1b      	lsrs	r3, r3, #16
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	3301      	adds	r3, #1
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c8:	60bb      	str	r3, [r7, #8]
      break;
 80033ca:	e002      	b.n	80033d2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80033ce:	60bb      	str	r3, [r7, #8]
      break;
 80033d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033d2:	68bb      	ldr	r3, [r7, #8]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3710      	adds	r7, #16
 80033d8:	46bd      	mov	sp, r7
 80033da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80033de:	bf00      	nop
 80033e0:	40023800 	.word	0x40023800
 80033e4:	00f42400 	.word	0x00f42400
 80033e8:	007a1200 	.word	0x007a1200

080033ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033f0:	4b03      	ldr	r3, [pc, #12]	; (8003400 <HAL_RCC_GetHCLKFreq+0x14>)
 80033f2:	681b      	ldr	r3, [r3, #0]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	20000000 	.word	0x20000000

08003404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003408:	f7ff fff0 	bl	80033ec <HAL_RCC_GetHCLKFreq>
 800340c:	4602      	mov	r2, r0
 800340e:	4b05      	ldr	r3, [pc, #20]	; (8003424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	0a9b      	lsrs	r3, r3, #10
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	4903      	ldr	r1, [pc, #12]	; (8003428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800341a:	5ccb      	ldrb	r3, [r1, r3]
 800341c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003420:	4618      	mov	r0, r3
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40023800 	.word	0x40023800
 8003428:	08009bf0 	.word	0x08009bf0

0800342c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003430:	f7ff ffdc 	bl	80033ec <HAL_RCC_GetHCLKFreq>
 8003434:	4602      	mov	r2, r0
 8003436:	4b05      	ldr	r3, [pc, #20]	; (800344c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	0b5b      	lsrs	r3, r3, #13
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	4903      	ldr	r1, [pc, #12]	; (8003450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003442:	5ccb      	ldrb	r3, [r1, r3]
 8003444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003448:	4618      	mov	r0, r3
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40023800 	.word	0x40023800
 8003450:	08009bf0 	.word	0x08009bf0

08003454 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	220f      	movs	r2, #15
 8003462:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003464:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 0203 	and.w	r2, r3, #3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003470:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <HAL_RCC_GetClockConfig+0x5c>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800347c:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <HAL_RCC_GetClockConfig+0x5c>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003488:	4b09      	ldr	r3, [pc, #36]	; (80034b0 <HAL_RCC_GetClockConfig+0x5c>)
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	08db      	lsrs	r3, r3, #3
 800348e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003496:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <HAL_RCC_GetClockConfig+0x60>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0207 	and.w	r2, r3, #7
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	601a      	str	r2, [r3, #0]
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	40023800 	.word	0x40023800
 80034b4:	40023c00 	.word	0x40023c00

080034b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e041      	b.n	800354e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d106      	bne.n	80034e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7fe f92e 	bl	8001740 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2202      	movs	r2, #2
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3304      	adds	r3, #4
 80034f4:	4619      	mov	r1, r3
 80034f6:	4610      	mov	r0, r2
 80034f8:	f000 fc12 	bl	8003d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b01      	cmp	r3, #1
 800356a:	d001      	beq.n	8003570 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e046      	b.n	80035fe <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2202      	movs	r2, #2
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a23      	ldr	r2, [pc, #140]	; (800360c <HAL_TIM_Base_Start+0xb4>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d022      	beq.n	80035c8 <HAL_TIM_Base_Start+0x70>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800358a:	d01d      	beq.n	80035c8 <HAL_TIM_Base_Start+0x70>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a1f      	ldr	r2, [pc, #124]	; (8003610 <HAL_TIM_Base_Start+0xb8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d018      	beq.n	80035c8 <HAL_TIM_Base_Start+0x70>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a1e      	ldr	r2, [pc, #120]	; (8003614 <HAL_TIM_Base_Start+0xbc>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d013      	beq.n	80035c8 <HAL_TIM_Base_Start+0x70>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a1c      	ldr	r2, [pc, #112]	; (8003618 <HAL_TIM_Base_Start+0xc0>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00e      	beq.n	80035c8 <HAL_TIM_Base_Start+0x70>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a1b      	ldr	r2, [pc, #108]	; (800361c <HAL_TIM_Base_Start+0xc4>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d009      	beq.n	80035c8 <HAL_TIM_Base_Start+0x70>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a19      	ldr	r2, [pc, #100]	; (8003620 <HAL_TIM_Base_Start+0xc8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d004      	beq.n	80035c8 <HAL_TIM_Base_Start+0x70>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a18      	ldr	r2, [pc, #96]	; (8003624 <HAL_TIM_Base_Start+0xcc>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d111      	bne.n	80035ec <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2b06      	cmp	r3, #6
 80035d8:	d010      	beq.n	80035fc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f042 0201 	orr.w	r2, r2, #1
 80035e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ea:	e007      	b.n	80035fc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40010000 	.word	0x40010000
 8003610:	40000400 	.word	0x40000400
 8003614:	40000800 	.word	0x40000800
 8003618:	40000c00 	.word	0x40000c00
 800361c:	40010400 	.word	0x40010400
 8003620:	40014000 	.word	0x40014000
 8003624:	40001800 	.word	0x40001800

08003628 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b01      	cmp	r3, #1
 800363a:	d001      	beq.n	8003640 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e04e      	b.n	80036de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a23      	ldr	r2, [pc, #140]	; (80036ec <HAL_TIM_Base_Start_IT+0xc4>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d022      	beq.n	80036a8 <HAL_TIM_Base_Start_IT+0x80>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800366a:	d01d      	beq.n	80036a8 <HAL_TIM_Base_Start_IT+0x80>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a1f      	ldr	r2, [pc, #124]	; (80036f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d018      	beq.n	80036a8 <HAL_TIM_Base_Start_IT+0x80>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a1e      	ldr	r2, [pc, #120]	; (80036f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d013      	beq.n	80036a8 <HAL_TIM_Base_Start_IT+0x80>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a1c      	ldr	r2, [pc, #112]	; (80036f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00e      	beq.n	80036a8 <HAL_TIM_Base_Start_IT+0x80>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a1b      	ldr	r2, [pc, #108]	; (80036fc <HAL_TIM_Base_Start_IT+0xd4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d009      	beq.n	80036a8 <HAL_TIM_Base_Start_IT+0x80>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a19      	ldr	r2, [pc, #100]	; (8003700 <HAL_TIM_Base_Start_IT+0xd8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d004      	beq.n	80036a8 <HAL_TIM_Base_Start_IT+0x80>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a18      	ldr	r2, [pc, #96]	; (8003704 <HAL_TIM_Base_Start_IT+0xdc>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d111      	bne.n	80036cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 0307 	and.w	r3, r3, #7
 80036b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2b06      	cmp	r3, #6
 80036b8:	d010      	beq.n	80036dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f042 0201 	orr.w	r2, r2, #1
 80036c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036ca:	e007      	b.n	80036dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3714      	adds	r7, #20
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	40010000 	.word	0x40010000
 80036f0:	40000400 	.word	0x40000400
 80036f4:	40000800 	.word	0x40000800
 80036f8:	40000c00 	.word	0x40000c00
 80036fc:	40010400 	.word	0x40010400
 8003700:	40014000 	.word	0x40014000
 8003704:	40001800 	.word	0x40001800

08003708 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e041      	b.n	800379e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 f839 	bl	80037a6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2202      	movs	r2, #2
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3304      	adds	r3, #4
 8003744:	4619      	mov	r1, r3
 8003746:	4610      	mov	r0, r2
 8003748:	f000 faea 	bl	8003d20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2201      	movs	r2, #1
 8003750:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d122      	bne.n	8003816 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d11b      	bne.n	8003816 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f06f 0202 	mvn.w	r2, #2
 80037e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	f003 0303 	and.w	r3, r3, #3
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d003      	beq.n	8003804 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 fa71 	bl	8003ce4 <HAL_TIM_IC_CaptureCallback>
 8003802:	e005      	b.n	8003810 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 fa63 	bl	8003cd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 fa74 	bl	8003cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b04      	cmp	r3, #4
 8003822:	d122      	bne.n	800386a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f003 0304 	and.w	r3, r3, #4
 800382e:	2b04      	cmp	r3, #4
 8003830:	d11b      	bne.n	800386a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f06f 0204 	mvn.w	r2, #4
 800383a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2202      	movs	r2, #2
 8003840:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 fa47 	bl	8003ce4 <HAL_TIM_IC_CaptureCallback>
 8003856:	e005      	b.n	8003864 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 fa39 	bl	8003cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fa4a 	bl	8003cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	f003 0308 	and.w	r3, r3, #8
 8003874:	2b08      	cmp	r3, #8
 8003876:	d122      	bne.n	80038be <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b08      	cmp	r3, #8
 8003884:	d11b      	bne.n	80038be <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f06f 0208 	mvn.w	r2, #8
 800388e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2204      	movs	r2, #4
 8003894:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	f003 0303 	and.w	r3, r3, #3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 fa1d 	bl	8003ce4 <HAL_TIM_IC_CaptureCallback>
 80038aa:	e005      	b.n	80038b8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 fa0f 	bl	8003cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fa20 	bl	8003cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	f003 0310 	and.w	r3, r3, #16
 80038c8:	2b10      	cmp	r3, #16
 80038ca:	d122      	bne.n	8003912 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f003 0310 	and.w	r3, r3, #16
 80038d6:	2b10      	cmp	r3, #16
 80038d8:	d11b      	bne.n	8003912 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f06f 0210 	mvn.w	r2, #16
 80038e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2208      	movs	r2, #8
 80038e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f9f3 	bl	8003ce4 <HAL_TIM_IC_CaptureCallback>
 80038fe:	e005      	b.n	800390c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 f9e5 	bl	8003cd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f9f6 	bl	8003cf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b01      	cmp	r3, #1
 800391e:	d10e      	bne.n	800393e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b01      	cmp	r3, #1
 800392c:	d107      	bne.n	800393e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f06f 0201 	mvn.w	r2, #1
 8003936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7fd fe95 	bl	8001668 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003948:	2b80      	cmp	r3, #128	; 0x80
 800394a:	d10e      	bne.n	800396a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003956:	2b80      	cmp	r3, #128	; 0x80
 8003958:	d107      	bne.n	800396a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 fd4b 	bl	8004400 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003974:	2b40      	cmp	r3, #64	; 0x40
 8003976:	d10e      	bne.n	8003996 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003982:	2b40      	cmp	r3, #64	; 0x40
 8003984:	d107      	bne.n	8003996 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800398e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 f9bb 	bl	8003d0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	f003 0320 	and.w	r3, r3, #32
 80039a0:	2b20      	cmp	r3, #32
 80039a2:	d10e      	bne.n	80039c2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	2b20      	cmp	r3, #32
 80039b0:	d107      	bne.n	80039c2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f06f 0220 	mvn.w	r2, #32
 80039ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 fd15 	bl	80043ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039c2:	bf00      	nop
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d101      	bne.n	80039e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80039e2:	2302      	movs	r3, #2
 80039e4:	e0ac      	b.n	8003b40 <HAL_TIM_PWM_ConfigChannel+0x174>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b0c      	cmp	r3, #12
 80039f2:	f200 809f 	bhi.w	8003b34 <HAL_TIM_PWM_ConfigChannel+0x168>
 80039f6:	a201      	add	r2, pc, #4	; (adr r2, 80039fc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80039f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fc:	08003a31 	.word	0x08003a31
 8003a00:	08003b35 	.word	0x08003b35
 8003a04:	08003b35 	.word	0x08003b35
 8003a08:	08003b35 	.word	0x08003b35
 8003a0c:	08003a71 	.word	0x08003a71
 8003a10:	08003b35 	.word	0x08003b35
 8003a14:	08003b35 	.word	0x08003b35
 8003a18:	08003b35 	.word	0x08003b35
 8003a1c:	08003ab3 	.word	0x08003ab3
 8003a20:	08003b35 	.word	0x08003b35
 8003a24:	08003b35 	.word	0x08003b35
 8003a28:	08003b35 	.word	0x08003b35
 8003a2c:	08003af3 	.word	0x08003af3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68b9      	ldr	r1, [r7, #8]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fa12 	bl	8003e60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699a      	ldr	r2, [r3, #24]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0208 	orr.w	r2, r2, #8
 8003a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0204 	bic.w	r2, r2, #4
 8003a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6999      	ldr	r1, [r3, #24]
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	691a      	ldr	r2, [r3, #16]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	619a      	str	r2, [r3, #24]
      break;
 8003a6e:	e062      	b.n	8003b36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68b9      	ldr	r1, [r7, #8]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fa62 	bl	8003f40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	699a      	ldr	r2, [r3, #24]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699a      	ldr	r2, [r3, #24]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6999      	ldr	r1, [r3, #24]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	021a      	lsls	r2, r3, #8
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	619a      	str	r2, [r3, #24]
      break;
 8003ab0:	e041      	b.n	8003b36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68b9      	ldr	r1, [r7, #8]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 fab7 	bl	800402c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	69da      	ldr	r2, [r3, #28]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f042 0208 	orr.w	r2, r2, #8
 8003acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	69da      	ldr	r2, [r3, #28]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0204 	bic.w	r2, r2, #4
 8003adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	69d9      	ldr	r1, [r3, #28]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	61da      	str	r2, [r3, #28]
      break;
 8003af0:	e021      	b.n	8003b36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68b9      	ldr	r1, [r7, #8]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 fb0b 	bl	8004114 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	69da      	ldr	r2, [r3, #28]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	69da      	ldr	r2, [r3, #28]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69d9      	ldr	r1, [r3, #28]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	021a      	lsls	r2, r3, #8
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	61da      	str	r2, [r3, #28]
      break;
 8003b32:	e000      	b.n	8003b36 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003b34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b3e:	2300      	movs	r3, #0
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d101      	bne.n	8003b60 <HAL_TIM_ConfigClockSource+0x18>
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	e0b3      	b.n	8003cc8 <HAL_TIM_ConfigClockSource+0x180>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b98:	d03e      	beq.n	8003c18 <HAL_TIM_ConfigClockSource+0xd0>
 8003b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b9e:	f200 8087 	bhi.w	8003cb0 <HAL_TIM_ConfigClockSource+0x168>
 8003ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba6:	f000 8085 	beq.w	8003cb4 <HAL_TIM_ConfigClockSource+0x16c>
 8003baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bae:	d87f      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x168>
 8003bb0:	2b70      	cmp	r3, #112	; 0x70
 8003bb2:	d01a      	beq.n	8003bea <HAL_TIM_ConfigClockSource+0xa2>
 8003bb4:	2b70      	cmp	r3, #112	; 0x70
 8003bb6:	d87b      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x168>
 8003bb8:	2b60      	cmp	r3, #96	; 0x60
 8003bba:	d050      	beq.n	8003c5e <HAL_TIM_ConfigClockSource+0x116>
 8003bbc:	2b60      	cmp	r3, #96	; 0x60
 8003bbe:	d877      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x168>
 8003bc0:	2b50      	cmp	r3, #80	; 0x50
 8003bc2:	d03c      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0xf6>
 8003bc4:	2b50      	cmp	r3, #80	; 0x50
 8003bc6:	d873      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x168>
 8003bc8:	2b40      	cmp	r3, #64	; 0x40
 8003bca:	d058      	beq.n	8003c7e <HAL_TIM_ConfigClockSource+0x136>
 8003bcc:	2b40      	cmp	r3, #64	; 0x40
 8003bce:	d86f      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x168>
 8003bd0:	2b30      	cmp	r3, #48	; 0x30
 8003bd2:	d064      	beq.n	8003c9e <HAL_TIM_ConfigClockSource+0x156>
 8003bd4:	2b30      	cmp	r3, #48	; 0x30
 8003bd6:	d86b      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x168>
 8003bd8:	2b20      	cmp	r3, #32
 8003bda:	d060      	beq.n	8003c9e <HAL_TIM_ConfigClockSource+0x156>
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d867      	bhi.n	8003cb0 <HAL_TIM_ConfigClockSource+0x168>
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d05c      	beq.n	8003c9e <HAL_TIM_ConfigClockSource+0x156>
 8003be4:	2b10      	cmp	r3, #16
 8003be6:	d05a      	beq.n	8003c9e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003be8:	e062      	b.n	8003cb0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6818      	ldr	r0, [r3, #0]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	6899      	ldr	r1, [r3, #8]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f000 fb5b 	bl	80042b4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c0c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	609a      	str	r2, [r3, #8]
      break;
 8003c16:	e04e      	b.n	8003cb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6818      	ldr	r0, [r3, #0]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	6899      	ldr	r1, [r3, #8]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f000 fb44 	bl	80042b4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689a      	ldr	r2, [r3, #8]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c3a:	609a      	str	r2, [r3, #8]
      break;
 8003c3c:	e03b      	b.n	8003cb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	6859      	ldr	r1, [r3, #4]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f000 fab8 	bl	80041c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2150      	movs	r1, #80	; 0x50
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 fb11 	bl	800427e <TIM_ITRx_SetConfig>
      break;
 8003c5c:	e02b      	b.n	8003cb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	6859      	ldr	r1, [r3, #4]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	f000 fad7 	bl	800421e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2160      	movs	r1, #96	; 0x60
 8003c76:	4618      	mov	r0, r3
 8003c78:	f000 fb01 	bl	800427e <TIM_ITRx_SetConfig>
      break;
 8003c7c:	e01b      	b.n	8003cb6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6818      	ldr	r0, [r3, #0]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	6859      	ldr	r1, [r3, #4]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	f000 fa98 	bl	80041c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2140      	movs	r1, #64	; 0x40
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 faf1 	bl	800427e <TIM_ITRx_SetConfig>
      break;
 8003c9c:	e00b      	b.n	8003cb6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4610      	mov	r0, r2
 8003caa:	f000 fae8 	bl	800427e <TIM_ITRx_SetConfig>
        break;
 8003cae:	e002      	b.n	8003cb6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003cb0:	bf00      	nop
 8003cb2:	e000      	b.n	8003cb6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003cb4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a40      	ldr	r2, [pc, #256]	; (8003e34 <TIM_Base_SetConfig+0x114>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d013      	beq.n	8003d60 <TIM_Base_SetConfig+0x40>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d3e:	d00f      	beq.n	8003d60 <TIM_Base_SetConfig+0x40>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a3d      	ldr	r2, [pc, #244]	; (8003e38 <TIM_Base_SetConfig+0x118>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d00b      	beq.n	8003d60 <TIM_Base_SetConfig+0x40>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a3c      	ldr	r2, [pc, #240]	; (8003e3c <TIM_Base_SetConfig+0x11c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d007      	beq.n	8003d60 <TIM_Base_SetConfig+0x40>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	4a3b      	ldr	r2, [pc, #236]	; (8003e40 <TIM_Base_SetConfig+0x120>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d003      	beq.n	8003d60 <TIM_Base_SetConfig+0x40>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a3a      	ldr	r2, [pc, #232]	; (8003e44 <TIM_Base_SetConfig+0x124>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d108      	bne.n	8003d72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a2f      	ldr	r2, [pc, #188]	; (8003e34 <TIM_Base_SetConfig+0x114>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d02b      	beq.n	8003dd2 <TIM_Base_SetConfig+0xb2>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d80:	d027      	beq.n	8003dd2 <TIM_Base_SetConfig+0xb2>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a2c      	ldr	r2, [pc, #176]	; (8003e38 <TIM_Base_SetConfig+0x118>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d023      	beq.n	8003dd2 <TIM_Base_SetConfig+0xb2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a2b      	ldr	r2, [pc, #172]	; (8003e3c <TIM_Base_SetConfig+0x11c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d01f      	beq.n	8003dd2 <TIM_Base_SetConfig+0xb2>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a2a      	ldr	r2, [pc, #168]	; (8003e40 <TIM_Base_SetConfig+0x120>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d01b      	beq.n	8003dd2 <TIM_Base_SetConfig+0xb2>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a29      	ldr	r2, [pc, #164]	; (8003e44 <TIM_Base_SetConfig+0x124>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d017      	beq.n	8003dd2 <TIM_Base_SetConfig+0xb2>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a28      	ldr	r2, [pc, #160]	; (8003e48 <TIM_Base_SetConfig+0x128>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d013      	beq.n	8003dd2 <TIM_Base_SetConfig+0xb2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a27      	ldr	r2, [pc, #156]	; (8003e4c <TIM_Base_SetConfig+0x12c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00f      	beq.n	8003dd2 <TIM_Base_SetConfig+0xb2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a26      	ldr	r2, [pc, #152]	; (8003e50 <TIM_Base_SetConfig+0x130>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d00b      	beq.n	8003dd2 <TIM_Base_SetConfig+0xb2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a25      	ldr	r2, [pc, #148]	; (8003e54 <TIM_Base_SetConfig+0x134>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d007      	beq.n	8003dd2 <TIM_Base_SetConfig+0xb2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a24      	ldr	r2, [pc, #144]	; (8003e58 <TIM_Base_SetConfig+0x138>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d003      	beq.n	8003dd2 <TIM_Base_SetConfig+0xb2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a23      	ldr	r2, [pc, #140]	; (8003e5c <TIM_Base_SetConfig+0x13c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d108      	bne.n	8003de4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	4313      	orrs	r3, r2
 8003df0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68fa      	ldr	r2, [r7, #12]
 8003df6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a0a      	ldr	r2, [pc, #40]	; (8003e34 <TIM_Base_SetConfig+0x114>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d003      	beq.n	8003e18 <TIM_Base_SetConfig+0xf8>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a0c      	ldr	r2, [pc, #48]	; (8003e44 <TIM_Base_SetConfig+0x124>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d103      	bne.n	8003e20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	691a      	ldr	r2, [r3, #16]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	615a      	str	r2, [r3, #20]
}
 8003e26:	bf00      	nop
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	40010000 	.word	0x40010000
 8003e38:	40000400 	.word	0x40000400
 8003e3c:	40000800 	.word	0x40000800
 8003e40:	40000c00 	.word	0x40000c00
 8003e44:	40010400 	.word	0x40010400
 8003e48:	40014000 	.word	0x40014000
 8003e4c:	40014400 	.word	0x40014400
 8003e50:	40014800 	.word	0x40014800
 8003e54:	40001800 	.word	0x40001800
 8003e58:	40001c00 	.word	0x40001c00
 8003e5c:	40002000 	.word	0x40002000

08003e60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	f023 0201 	bic.w	r2, r3, #1
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 0303 	bic.w	r3, r3, #3
 8003e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	f023 0302 	bic.w	r3, r3, #2
 8003ea8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a20      	ldr	r2, [pc, #128]	; (8003f38 <TIM_OC1_SetConfig+0xd8>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d003      	beq.n	8003ec4 <TIM_OC1_SetConfig+0x64>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	4a1f      	ldr	r2, [pc, #124]	; (8003f3c <TIM_OC1_SetConfig+0xdc>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d10c      	bne.n	8003ede <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f023 0308 	bic.w	r3, r3, #8
 8003eca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	f023 0304 	bic.w	r3, r3, #4
 8003edc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a15      	ldr	r2, [pc, #84]	; (8003f38 <TIM_OC1_SetConfig+0xd8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d003      	beq.n	8003eee <TIM_OC1_SetConfig+0x8e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a14      	ldr	r2, [pc, #80]	; (8003f3c <TIM_OC1_SetConfig+0xdc>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d111      	bne.n	8003f12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	621a      	str	r2, [r3, #32]
}
 8003f2c:	bf00      	nop
 8003f2e:	371c      	adds	r7, #28
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	40010000 	.word	0x40010000
 8003f3c:	40010400 	.word	0x40010400

08003f40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	f023 0210 	bic.w	r2, r3, #16
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	021b      	lsls	r3, r3, #8
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f023 0320 	bic.w	r3, r3, #32
 8003f8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a22      	ldr	r2, [pc, #136]	; (8004024 <TIM_OC2_SetConfig+0xe4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d003      	beq.n	8003fa8 <TIM_OC2_SetConfig+0x68>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a21      	ldr	r2, [pc, #132]	; (8004028 <TIM_OC2_SetConfig+0xe8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d10d      	bne.n	8003fc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a17      	ldr	r2, [pc, #92]	; (8004024 <TIM_OC2_SetConfig+0xe4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d003      	beq.n	8003fd4 <TIM_OC2_SetConfig+0x94>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a16      	ldr	r2, [pc, #88]	; (8004028 <TIM_OC2_SetConfig+0xe8>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d113      	bne.n	8003ffc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003fda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	621a      	str	r2, [r3, #32]
}
 8004016:	bf00      	nop
 8004018:	371c      	adds	r7, #28
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	40010000 	.word	0x40010000
 8004028:	40010400 	.word	0x40010400

0800402c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800405a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 0303 	bic.w	r3, r3, #3
 8004062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	021b      	lsls	r3, r3, #8
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	4313      	orrs	r3, r2
 8004080:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a21      	ldr	r2, [pc, #132]	; (800410c <TIM_OC3_SetConfig+0xe0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d003      	beq.n	8004092 <TIM_OC3_SetConfig+0x66>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a20      	ldr	r2, [pc, #128]	; (8004110 <TIM_OC3_SetConfig+0xe4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d10d      	bne.n	80040ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004098:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	021b      	lsls	r3, r3, #8
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a16      	ldr	r2, [pc, #88]	; (800410c <TIM_OC3_SetConfig+0xe0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d003      	beq.n	80040be <TIM_OC3_SetConfig+0x92>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a15      	ldr	r2, [pc, #84]	; (8004110 <TIM_OC3_SetConfig+0xe4>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d113      	bne.n	80040e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	695b      	ldr	r3, [r3, #20]
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	693a      	ldr	r2, [r7, #16]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	621a      	str	r2, [r3, #32]
}
 8004100:	bf00      	nop
 8004102:	371c      	adds	r7, #28
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	40010000 	.word	0x40010000
 8004110:	40010400 	.word	0x40010400

08004114 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800414a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	021b      	lsls	r3, r3, #8
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	4313      	orrs	r3, r2
 8004156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800415e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	031b      	lsls	r3, r3, #12
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a12      	ldr	r2, [pc, #72]	; (80041b8 <TIM_OC4_SetConfig+0xa4>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d003      	beq.n	800417c <TIM_OC4_SetConfig+0x68>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a11      	ldr	r2, [pc, #68]	; (80041bc <TIM_OC4_SetConfig+0xa8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d109      	bne.n	8004190 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004182:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	019b      	lsls	r3, r3, #6
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	621a      	str	r2, [r3, #32]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40010000 	.word	0x40010000
 80041bc:	40010400 	.word	0x40010400

080041c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b087      	sub	sp, #28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	f023 0201 	bic.w	r2, r3, #1
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f023 030a 	bic.w	r3, r3, #10
 80041fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4313      	orrs	r3, r2
 8004204:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	621a      	str	r2, [r3, #32]
}
 8004212:	bf00      	nop
 8004214:	371c      	adds	r7, #28
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800421e:	b480      	push	{r7}
 8004220:	b087      	sub	sp, #28
 8004222:	af00      	add	r7, sp, #0
 8004224:	60f8      	str	r0, [r7, #12]
 8004226:	60b9      	str	r1, [r7, #8]
 8004228:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	f023 0210 	bic.w	r2, r3, #16
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004248:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	031b      	lsls	r3, r3, #12
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800425a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	693a      	ldr	r2, [r7, #16]
 8004262:	4313      	orrs	r3, r2
 8004264:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	621a      	str	r2, [r3, #32]
}
 8004272:	bf00      	nop
 8004274:	371c      	adds	r7, #28
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800427e:	b480      	push	{r7}
 8004280:	b085      	sub	sp, #20
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004294:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004296:	683a      	ldr	r2, [r7, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4313      	orrs	r3, r2
 800429c:	f043 0307 	orr.w	r3, r3, #7
 80042a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	609a      	str	r2, [r3, #8]
}
 80042a8:	bf00      	nop
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b087      	sub	sp, #28
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
 80042c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	021a      	lsls	r2, r3, #8
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	431a      	orrs	r2, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	4313      	orrs	r3, r2
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	4313      	orrs	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	609a      	str	r2, [r3, #8]
}
 80042e8:	bf00      	nop
 80042ea:	371c      	adds	r7, #28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004308:	2302      	movs	r3, #2
 800430a:	e05a      	b.n	80043c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004332:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a21      	ldr	r2, [pc, #132]	; (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d022      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004358:	d01d      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a1d      	ldr	r2, [pc, #116]	; (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d018      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a1b      	ldr	r2, [pc, #108]	; (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d013      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a1a      	ldr	r2, [pc, #104]	; (80043dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d00e      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a18      	ldr	r2, [pc, #96]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d009      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a17      	ldr	r2, [pc, #92]	; (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d004      	beq.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a15      	ldr	r2, [pc, #84]	; (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d10c      	bne.n	80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800439c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40010000 	.word	0x40010000
 80043d4:	40000400 	.word	0x40000400
 80043d8:	40000800 	.word	0x40000800
 80043dc:	40000c00 	.word	0x40000c00
 80043e0:	40010400 	.word	0x40010400
 80043e4:	40014000 	.word	0x40014000
 80043e8:	40001800 	.word	0x40001800

080043ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e03f      	b.n	80044a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d106      	bne.n	8004440 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7fd f9a0 	bl	8001780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2224      	movs	r2, #36	; 0x24
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004456:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 fc7b 	bl	8004d54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800446c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695a      	ldr	r2, [r3, #20]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800447c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800448c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2220      	movs	r2, #32
 80044a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b08a      	sub	sp, #40	; 0x28
 80044b2:	af02      	add	r7, sp, #8
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	603b      	str	r3, [r7, #0]
 80044ba:	4613      	mov	r3, r2
 80044bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044be:	2300      	movs	r3, #0
 80044c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b20      	cmp	r3, #32
 80044cc:	d17c      	bne.n	80045c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <HAL_UART_Transmit+0x2c>
 80044d4:	88fb      	ldrh	r3, [r7, #6]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e075      	b.n	80045ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <HAL_UART_Transmit+0x3e>
 80044e8:	2302      	movs	r3, #2
 80044ea:	e06e      	b.n	80045ca <HAL_UART_Transmit+0x11c>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2221      	movs	r2, #33	; 0x21
 80044fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004502:	f7fd fb37 	bl	8001b74 <HAL_GetTick>
 8004506:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	88fa      	ldrh	r2, [r7, #6]
 800450c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	88fa      	ldrh	r2, [r7, #6]
 8004512:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800451c:	d108      	bne.n	8004530 <HAL_UART_Transmit+0x82>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d104      	bne.n	8004530 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004526:	2300      	movs	r3, #0
 8004528:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	e003      	b.n	8004538 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004534:	2300      	movs	r3, #0
 8004536:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004540:	e02a      	b.n	8004598 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2200      	movs	r2, #0
 800454a:	2180      	movs	r1, #128	; 0x80
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 fa3d 	bl	80049cc <UART_WaitOnFlagUntilTimeout>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e036      	b.n	80045ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10b      	bne.n	800457a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	461a      	mov	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004570:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	3302      	adds	r3, #2
 8004576:	61bb      	str	r3, [r7, #24]
 8004578:	e007      	b.n	800458a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	781a      	ldrb	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	3301      	adds	r3, #1
 8004588:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800458e:	b29b      	uxth	r3, r3
 8004590:	3b01      	subs	r3, #1
 8004592:	b29a      	uxth	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800459c:	b29b      	uxth	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1cf      	bne.n	8004542 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2200      	movs	r2, #0
 80045aa:	2140      	movs	r1, #64	; 0x40
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 fa0d 	bl	80049cc <UART_WaitOnFlagUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e006      	b.n	80045ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045c4:	2300      	movs	r3, #0
 80045c6:	e000      	b.n	80045ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80045c8:	2302      	movs	r3, #2
  }
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3720      	adds	r7, #32
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b084      	sub	sp, #16
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	4613      	mov	r3, r2
 80045de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	d11d      	bne.n	8004628 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <HAL_UART_Receive_IT+0x26>
 80045f2:	88fb      	ldrh	r3, [r7, #6]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e016      	b.n	800462a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004602:	2b01      	cmp	r3, #1
 8004604:	d101      	bne.n	800460a <HAL_UART_Receive_IT+0x38>
 8004606:	2302      	movs	r3, #2
 8004608:	e00f      	b.n	800462a <HAL_UART_Receive_IT+0x58>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004618:	88fb      	ldrh	r3, [r7, #6]
 800461a:	461a      	mov	r2, r3
 800461c:	68b9      	ldr	r1, [r7, #8]
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 fa1e 	bl	8004a60 <UART_Start_Receive_IT>
 8004624:	4603      	mov	r3, r0
 8004626:	e000      	b.n	800462a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004628:	2302      	movs	r3, #2
  }
}
 800462a:	4618      	mov	r0, r3
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
	...

08004634 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b08a      	sub	sp, #40	; 0x28
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004654:	2300      	movs	r3, #0
 8004656:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004658:	2300      	movs	r3, #0
 800465a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10d      	bne.n	8004686 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	f003 0320 	and.w	r3, r3, #32
 8004670:	2b00      	cmp	r3, #0
 8004672:	d008      	beq.n	8004686 <HAL_UART_IRQHandler+0x52>
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 fad1 	bl	8004c26 <UART_Receive_IT>
      return;
 8004684:	e17c      	b.n	8004980 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	2b00      	cmp	r3, #0
 800468a:	f000 80b1 	beq.w	80047f0 <HAL_UART_IRQHandler+0x1bc>
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b00      	cmp	r3, #0
 8004696:	d105      	bne.n	80046a4 <HAL_UART_IRQHandler+0x70>
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 80a6 	beq.w	80047f0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <HAL_UART_IRQHandler+0x90>
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046bc:	f043 0201 	orr.w	r2, r3, #1
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	f003 0304 	and.w	r3, r3, #4
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00a      	beq.n	80046e4 <HAL_UART_IRQHandler+0xb0>
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d005      	beq.n	80046e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	f043 0202 	orr.w	r2, r3, #2
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <HAL_UART_IRQHandler+0xd0>
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d005      	beq.n	8004704 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	f043 0204 	orr.w	r2, r3, #4
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00f      	beq.n	800472e <HAL_UART_IRQHandler+0xfa>
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	f003 0320 	and.w	r3, r3, #32
 8004714:	2b00      	cmp	r3, #0
 8004716:	d104      	bne.n	8004722 <HAL_UART_IRQHandler+0xee>
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d005      	beq.n	800472e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	f043 0208 	orr.w	r2, r3, #8
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 811f 	beq.w	8004976 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	f003 0320 	and.w	r3, r3, #32
 800473e:	2b00      	cmp	r3, #0
 8004740:	d007      	beq.n	8004752 <HAL_UART_IRQHandler+0x11e>
 8004742:	6a3b      	ldr	r3, [r7, #32]
 8004744:	f003 0320 	and.w	r3, r3, #32
 8004748:	2b00      	cmp	r3, #0
 800474a:	d002      	beq.n	8004752 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 fa6a 	bl	8004c26 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800475c:	2b40      	cmp	r3, #64	; 0x40
 800475e:	bf0c      	ite	eq
 8004760:	2301      	moveq	r3, #1
 8004762:	2300      	movne	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476c:	f003 0308 	and.w	r3, r3, #8
 8004770:	2b00      	cmp	r3, #0
 8004772:	d102      	bne.n	800477a <HAL_UART_IRQHandler+0x146>
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d031      	beq.n	80047de <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 f9aa 	bl	8004ad4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478a:	2b40      	cmp	r3, #64	; 0x40
 800478c:	d123      	bne.n	80047d6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	695a      	ldr	r2, [r3, #20]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800479c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d013      	beq.n	80047ce <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047aa:	4a77      	ldr	r2, [pc, #476]	; (8004988 <HAL_UART_IRQHandler+0x354>)
 80047ac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fd ffe8 	bl	8002788 <HAL_DMA_Abort_IT>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d016      	beq.n	80047ec <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047c8:	4610      	mov	r0, r2
 80047ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047cc:	e00e      	b.n	80047ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f8e6 	bl	80049a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d4:	e00a      	b.n	80047ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f8e2 	bl	80049a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047dc:	e006      	b.n	80047ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f8de 	bl	80049a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80047ea:	e0c4      	b.n	8004976 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ec:	bf00      	nop
    return;
 80047ee:	e0c2      	b.n	8004976 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	f040 80a2 	bne.w	800493e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	f003 0310 	and.w	r3, r3, #16
 8004800:	2b00      	cmp	r3, #0
 8004802:	f000 809c 	beq.w	800493e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	f003 0310 	and.w	r3, r3, #16
 800480c:	2b00      	cmp	r3, #0
 800480e:	f000 8096 	beq.w	800493e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004812:	2300      	movs	r3, #0
 8004814:	60fb      	str	r3, [r7, #12]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004832:	2b40      	cmp	r3, #64	; 0x40
 8004834:	d14f      	bne.n	80048d6 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004840:	8a3b      	ldrh	r3, [r7, #16]
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 8099 	beq.w	800497a <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800484c:	8a3a      	ldrh	r2, [r7, #16]
 800484e:	429a      	cmp	r2, r3
 8004850:	f080 8093 	bcs.w	800497a <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	8a3a      	ldrh	r2, [r7, #16]
 8004858:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004864:	d02b      	beq.n	80048be <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004874:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695a      	ldr	r2, [r3, #20]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0201 	bic.w	r2, r2, #1
 8004884:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695a      	ldr	r2, [r3, #20]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004894:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2220      	movs	r2, #32
 800489a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0210 	bic.w	r2, r2, #16
 80048b2:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7fd fef5 	bl	80026a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	4619      	mov	r1, r3
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f870 	bl	80049b4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80048d4:	e051      	b.n	800497a <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048de:	b29b      	uxth	r3, r3
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d047      	beq.n	800497e <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80048ee:	8a7b      	ldrh	r3, [r7, #18]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d044      	beq.n	800497e <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68da      	ldr	r2, [r3, #12]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004902:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	695a      	ldr	r2, [r3, #20]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0201 	bic.w	r2, r2, #1
 8004912:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2220      	movs	r2, #32
 8004918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68da      	ldr	r2, [r3, #12]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0210 	bic.w	r2, r2, #16
 8004930:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004932:	8a7b      	ldrh	r3, [r7, #18]
 8004934:	4619      	mov	r1, r3
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f83c 	bl	80049b4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800493c:	e01f      	b.n	800497e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <HAL_UART_IRQHandler+0x326>
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f8ff 	bl	8004b56 <UART_Transmit_IT>
    return;
 8004958:	e012      	b.n	8004980 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00d      	beq.n	8004980 <HAL_UART_IRQHandler+0x34c>
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496a:	2b00      	cmp	r3, #0
 800496c:	d008      	beq.n	8004980 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f941 	bl	8004bf6 <UART_EndTransmit_IT>
    return;
 8004974:	e004      	b.n	8004980 <HAL_UART_IRQHandler+0x34c>
    return;
 8004976:	bf00      	nop
 8004978:	e002      	b.n	8004980 <HAL_UART_IRQHandler+0x34c>
      return;
 800497a:	bf00      	nop
 800497c:	e000      	b.n	8004980 <HAL_UART_IRQHandler+0x34c>
      return;
 800497e:	bf00      	nop
  }
}
 8004980:	3728      	adds	r7, #40	; 0x28
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	08004b2f 	.word	0x08004b2f

0800498c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	460b      	mov	r3, r1
 80049be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	4613      	mov	r3, r2
 80049da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049dc:	e02c      	b.n	8004a38 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e4:	d028      	beq.n	8004a38 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d007      	beq.n	80049fc <UART_WaitOnFlagUntilTimeout+0x30>
 80049ec:	f7fd f8c2 	bl	8001b74 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d21d      	bcs.n	8004a38 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	68da      	ldr	r2, [r3, #12]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a0a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695a      	ldr	r2, [r3, #20]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 0201 	bic.w	r2, r2, #1
 8004a1a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2220      	movs	r2, #32
 8004a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e00f      	b.n	8004a58 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	4013      	ands	r3, r2
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	bf0c      	ite	eq
 8004a48:	2301      	moveq	r3, #1
 8004a4a:	2300      	movne	r3, #0
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	461a      	mov	r2, r3
 8004a50:	79fb      	ldrb	r3, [r7, #7]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d0c3      	beq.n	80049de <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	88fa      	ldrh	r2, [r7, #6]
 8004a78:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	88fa      	ldrh	r2, [r7, #6]
 8004a7e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2222      	movs	r2, #34	; 0x22
 8004a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68da      	ldr	r2, [r3, #12]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aa4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	695a      	ldr	r2, [r3, #20]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f042 0201 	orr.w	r2, r2, #1
 8004ab4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68da      	ldr	r2, [r3, #12]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f042 0220 	orr.w	r2, r2, #32
 8004ac4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3714      	adds	r7, #20
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004aea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695a      	ldr	r2, [r3, #20]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0201 	bic.w	r2, r2, #1
 8004afa:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d107      	bne.n	8004b14 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0210 	bic.w	r2, r2, #16
 8004b12:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b2e:	b580      	push	{r7, lr}
 8004b30:	b084      	sub	sp, #16
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f7ff ff29 	bl	80049a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b4e:	bf00      	nop
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b085      	sub	sp, #20
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b21      	cmp	r3, #33	; 0x21
 8004b68:	d13e      	bne.n	8004be8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b72:	d114      	bne.n	8004b9e <UART_Transmit_IT+0x48>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d110      	bne.n	8004b9e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	881b      	ldrh	r3, [r3, #0]
 8004b86:	461a      	mov	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b90:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	1c9a      	adds	r2, r3, #2
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	621a      	str	r2, [r3, #32]
 8004b9c:	e008      	b.n	8004bb0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	1c59      	adds	r1, r3, #1
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	6211      	str	r1, [r2, #32]
 8004ba8:	781a      	ldrb	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10f      	bne.n	8004be4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bd2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68da      	ldr	r2, [r3, #12]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004be2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004be4:	2300      	movs	r3, #0
 8004be6:	e000      	b.n	8004bea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004be8:	2302      	movs	r3, #2
  }
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b082      	sub	sp, #8
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68da      	ldr	r2, [r3, #12]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c0c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7ff feb8 	bl	800498c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b084      	sub	sp, #16
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b22      	cmp	r3, #34	; 0x22
 8004c38:	f040 8087 	bne.w	8004d4a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c44:	d117      	bne.n	8004c76 <UART_Receive_IT+0x50>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d113      	bne.n	8004c76 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c56:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6e:	1c9a      	adds	r2, r3, #2
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	629a      	str	r2, [r3, #40]	; 0x28
 8004c74:	e026      	b.n	8004cc4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c88:	d007      	beq.n	8004c9a <UART_Receive_IT+0x74>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10a      	bne.n	8004ca8 <UART_Receive_IT+0x82>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d106      	bne.n	8004ca8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	b2da      	uxtb	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	701a      	strb	r2, [r3, #0]
 8004ca6:	e008      	b.n	8004cba <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d136      	bne.n	8004d46 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68da      	ldr	r2, [r3, #12]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0220 	bic.w	r2, r2, #32
 8004ce6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68da      	ldr	r2, [r3, #12]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cf6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	695a      	ldr	r2, [r3, #20]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 0201 	bic.w	r2, r2, #1
 8004d06:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d10e      	bne.n	8004d36 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0210 	bic.w	r2, r2, #16
 8004d26:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7ff fe40 	bl	80049b4 <HAL_UARTEx_RxEventCallback>
 8004d34:	e002      	b.n	8004d3c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f7fc fc36 	bl	80015a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8004d42:	2300      	movs	r3, #0
 8004d44:	e002      	b.n	8004d4c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8004d46:	2300      	movs	r3, #0
 8004d48:	e000      	b.n	8004d4c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004d4a:	2302      	movs	r3, #2
  }
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d58:	b09f      	sub	sp, #124	; 0x7c
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d6a:	68d9      	ldr	r1, [r3, #12]
 8004d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	ea40 0301 	orr.w	r3, r0, r1
 8004d74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	431a      	orrs	r2, r3
 8004d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d88:	69db      	ldr	r3, [r3, #28]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d98:	f021 010c 	bic.w	r1, r1, #12
 8004d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004da2:	430b      	orrs	r3, r1
 8004da4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db2:	6999      	ldr	r1, [r3, #24]
 8004db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	ea40 0301 	orr.w	r3, r0, r1
 8004dbc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	4bc5      	ldr	r3, [pc, #788]	; (80050d8 <UART_SetConfig+0x384>)
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d004      	beq.n	8004dd2 <UART_SetConfig+0x7e>
 8004dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	4bc3      	ldr	r3, [pc, #780]	; (80050dc <UART_SetConfig+0x388>)
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d103      	bne.n	8004dda <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004dd2:	f7fe fb2b 	bl	800342c <HAL_RCC_GetPCLK2Freq>
 8004dd6:	6778      	str	r0, [r7, #116]	; 0x74
 8004dd8:	e002      	b.n	8004de0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004dda:	f7fe fb13 	bl	8003404 <HAL_RCC_GetPCLK1Freq>
 8004dde:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004de8:	f040 80b6 	bne.w	8004f58 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dee:	461c      	mov	r4, r3
 8004df0:	f04f 0500 	mov.w	r5, #0
 8004df4:	4622      	mov	r2, r4
 8004df6:	462b      	mov	r3, r5
 8004df8:	1891      	adds	r1, r2, r2
 8004dfa:	6439      	str	r1, [r7, #64]	; 0x40
 8004dfc:	415b      	adcs	r3, r3
 8004dfe:	647b      	str	r3, [r7, #68]	; 0x44
 8004e00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e04:	1912      	adds	r2, r2, r4
 8004e06:	eb45 0303 	adc.w	r3, r5, r3
 8004e0a:	f04f 0000 	mov.w	r0, #0
 8004e0e:	f04f 0100 	mov.w	r1, #0
 8004e12:	00d9      	lsls	r1, r3, #3
 8004e14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e18:	00d0      	lsls	r0, r2, #3
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	1911      	adds	r1, r2, r4
 8004e20:	6639      	str	r1, [r7, #96]	; 0x60
 8004e22:	416b      	adcs	r3, r5
 8004e24:	667b      	str	r3, [r7, #100]	; 0x64
 8004e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	1891      	adds	r1, r2, r2
 8004e32:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e34:	415b      	adcs	r3, r3
 8004e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e3c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004e40:	f7fb feb2 	bl	8000ba8 <__aeabi_uldivmod>
 8004e44:	4602      	mov	r2, r0
 8004e46:	460b      	mov	r3, r1
 8004e48:	4ba5      	ldr	r3, [pc, #660]	; (80050e0 <UART_SetConfig+0x38c>)
 8004e4a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e4e:	095b      	lsrs	r3, r3, #5
 8004e50:	011e      	lsls	r6, r3, #4
 8004e52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e54:	461c      	mov	r4, r3
 8004e56:	f04f 0500 	mov.w	r5, #0
 8004e5a:	4622      	mov	r2, r4
 8004e5c:	462b      	mov	r3, r5
 8004e5e:	1891      	adds	r1, r2, r2
 8004e60:	6339      	str	r1, [r7, #48]	; 0x30
 8004e62:	415b      	adcs	r3, r3
 8004e64:	637b      	str	r3, [r7, #52]	; 0x34
 8004e66:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004e6a:	1912      	adds	r2, r2, r4
 8004e6c:	eb45 0303 	adc.w	r3, r5, r3
 8004e70:	f04f 0000 	mov.w	r0, #0
 8004e74:	f04f 0100 	mov.w	r1, #0
 8004e78:	00d9      	lsls	r1, r3, #3
 8004e7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e7e:	00d0      	lsls	r0, r2, #3
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	1911      	adds	r1, r2, r4
 8004e86:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e88:	416b      	adcs	r3, r5
 8004e8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	461a      	mov	r2, r3
 8004e92:	f04f 0300 	mov.w	r3, #0
 8004e96:	1891      	adds	r1, r2, r2
 8004e98:	62b9      	str	r1, [r7, #40]	; 0x28
 8004e9a:	415b      	adcs	r3, r3
 8004e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ea2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004ea6:	f7fb fe7f 	bl	8000ba8 <__aeabi_uldivmod>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	460b      	mov	r3, r1
 8004eae:	4b8c      	ldr	r3, [pc, #560]	; (80050e0 <UART_SetConfig+0x38c>)
 8004eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8004eb4:	095b      	lsrs	r3, r3, #5
 8004eb6:	2164      	movs	r1, #100	; 0x64
 8004eb8:	fb01 f303 	mul.w	r3, r1, r3
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	3332      	adds	r3, #50	; 0x32
 8004ec2:	4a87      	ldr	r2, [pc, #540]	; (80050e0 <UART_SetConfig+0x38c>)
 8004ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec8:	095b      	lsrs	r3, r3, #5
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ed0:	441e      	add	r6, r3
 8004ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f04f 0100 	mov.w	r1, #0
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	1894      	adds	r4, r2, r2
 8004ee0:	623c      	str	r4, [r7, #32]
 8004ee2:	415b      	adcs	r3, r3
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004eea:	1812      	adds	r2, r2, r0
 8004eec:	eb41 0303 	adc.w	r3, r1, r3
 8004ef0:	f04f 0400 	mov.w	r4, #0
 8004ef4:	f04f 0500 	mov.w	r5, #0
 8004ef8:	00dd      	lsls	r5, r3, #3
 8004efa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004efe:	00d4      	lsls	r4, r2, #3
 8004f00:	4622      	mov	r2, r4
 8004f02:	462b      	mov	r3, r5
 8004f04:	1814      	adds	r4, r2, r0
 8004f06:	653c      	str	r4, [r7, #80]	; 0x50
 8004f08:	414b      	adcs	r3, r1
 8004f0a:	657b      	str	r3, [r7, #84]	; 0x54
 8004f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	461a      	mov	r2, r3
 8004f12:	f04f 0300 	mov.w	r3, #0
 8004f16:	1891      	adds	r1, r2, r2
 8004f18:	61b9      	str	r1, [r7, #24]
 8004f1a:	415b      	adcs	r3, r3
 8004f1c:	61fb      	str	r3, [r7, #28]
 8004f1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f22:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004f26:	f7fb fe3f 	bl	8000ba8 <__aeabi_uldivmod>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	4b6c      	ldr	r3, [pc, #432]	; (80050e0 <UART_SetConfig+0x38c>)
 8004f30:	fba3 1302 	umull	r1, r3, r3, r2
 8004f34:	095b      	lsrs	r3, r3, #5
 8004f36:	2164      	movs	r1, #100	; 0x64
 8004f38:	fb01 f303 	mul.w	r3, r1, r3
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	3332      	adds	r3, #50	; 0x32
 8004f42:	4a67      	ldr	r2, [pc, #412]	; (80050e0 <UART_SetConfig+0x38c>)
 8004f44:	fba2 2303 	umull	r2, r3, r2, r3
 8004f48:	095b      	lsrs	r3, r3, #5
 8004f4a:	f003 0207 	and.w	r2, r3, #7
 8004f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4432      	add	r2, r6
 8004f54:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f56:	e0b9      	b.n	80050cc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f5a:	461c      	mov	r4, r3
 8004f5c:	f04f 0500 	mov.w	r5, #0
 8004f60:	4622      	mov	r2, r4
 8004f62:	462b      	mov	r3, r5
 8004f64:	1891      	adds	r1, r2, r2
 8004f66:	6139      	str	r1, [r7, #16]
 8004f68:	415b      	adcs	r3, r3
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004f70:	1912      	adds	r2, r2, r4
 8004f72:	eb45 0303 	adc.w	r3, r5, r3
 8004f76:	f04f 0000 	mov.w	r0, #0
 8004f7a:	f04f 0100 	mov.w	r1, #0
 8004f7e:	00d9      	lsls	r1, r3, #3
 8004f80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f84:	00d0      	lsls	r0, r2, #3
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	eb12 0804 	adds.w	r8, r2, r4
 8004f8e:	eb43 0905 	adc.w	r9, r3, r5
 8004f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f04f 0100 	mov.w	r1, #0
 8004f9c:	f04f 0200 	mov.w	r2, #0
 8004fa0:	f04f 0300 	mov.w	r3, #0
 8004fa4:	008b      	lsls	r3, r1, #2
 8004fa6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004faa:	0082      	lsls	r2, r0, #2
 8004fac:	4640      	mov	r0, r8
 8004fae:	4649      	mov	r1, r9
 8004fb0:	f7fb fdfa 	bl	8000ba8 <__aeabi_uldivmod>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4b49      	ldr	r3, [pc, #292]	; (80050e0 <UART_SetConfig+0x38c>)
 8004fba:	fba3 2302 	umull	r2, r3, r3, r2
 8004fbe:	095b      	lsrs	r3, r3, #5
 8004fc0:	011e      	lsls	r6, r3, #4
 8004fc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f04f 0100 	mov.w	r1, #0
 8004fca:	4602      	mov	r2, r0
 8004fcc:	460b      	mov	r3, r1
 8004fce:	1894      	adds	r4, r2, r2
 8004fd0:	60bc      	str	r4, [r7, #8]
 8004fd2:	415b      	adcs	r3, r3
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fda:	1812      	adds	r2, r2, r0
 8004fdc:	eb41 0303 	adc.w	r3, r1, r3
 8004fe0:	f04f 0400 	mov.w	r4, #0
 8004fe4:	f04f 0500 	mov.w	r5, #0
 8004fe8:	00dd      	lsls	r5, r3, #3
 8004fea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004fee:	00d4      	lsls	r4, r2, #3
 8004ff0:	4622      	mov	r2, r4
 8004ff2:	462b      	mov	r3, r5
 8004ff4:	1814      	adds	r4, r2, r0
 8004ff6:	64bc      	str	r4, [r7, #72]	; 0x48
 8004ff8:	414b      	adcs	r3, r1
 8004ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	4618      	mov	r0, r3
 8005002:	f04f 0100 	mov.w	r1, #0
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	f04f 0300 	mov.w	r3, #0
 800500e:	008b      	lsls	r3, r1, #2
 8005010:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005014:	0082      	lsls	r2, r0, #2
 8005016:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800501a:	f7fb fdc5 	bl	8000ba8 <__aeabi_uldivmod>
 800501e:	4602      	mov	r2, r0
 8005020:	460b      	mov	r3, r1
 8005022:	4b2f      	ldr	r3, [pc, #188]	; (80050e0 <UART_SetConfig+0x38c>)
 8005024:	fba3 1302 	umull	r1, r3, r3, r2
 8005028:	095b      	lsrs	r3, r3, #5
 800502a:	2164      	movs	r1, #100	; 0x64
 800502c:	fb01 f303 	mul.w	r3, r1, r3
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	011b      	lsls	r3, r3, #4
 8005034:	3332      	adds	r3, #50	; 0x32
 8005036:	4a2a      	ldr	r2, [pc, #168]	; (80050e0 <UART_SetConfig+0x38c>)
 8005038:	fba2 2303 	umull	r2, r3, r2, r3
 800503c:	095b      	lsrs	r3, r3, #5
 800503e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005042:	441e      	add	r6, r3
 8005044:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005046:	4618      	mov	r0, r3
 8005048:	f04f 0100 	mov.w	r1, #0
 800504c:	4602      	mov	r2, r0
 800504e:	460b      	mov	r3, r1
 8005050:	1894      	adds	r4, r2, r2
 8005052:	603c      	str	r4, [r7, #0]
 8005054:	415b      	adcs	r3, r3
 8005056:	607b      	str	r3, [r7, #4]
 8005058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800505c:	1812      	adds	r2, r2, r0
 800505e:	eb41 0303 	adc.w	r3, r1, r3
 8005062:	f04f 0400 	mov.w	r4, #0
 8005066:	f04f 0500 	mov.w	r5, #0
 800506a:	00dd      	lsls	r5, r3, #3
 800506c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005070:	00d4      	lsls	r4, r2, #3
 8005072:	4622      	mov	r2, r4
 8005074:	462b      	mov	r3, r5
 8005076:	eb12 0a00 	adds.w	sl, r2, r0
 800507a:	eb43 0b01 	adc.w	fp, r3, r1
 800507e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	4618      	mov	r0, r3
 8005084:	f04f 0100 	mov.w	r1, #0
 8005088:	f04f 0200 	mov.w	r2, #0
 800508c:	f04f 0300 	mov.w	r3, #0
 8005090:	008b      	lsls	r3, r1, #2
 8005092:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005096:	0082      	lsls	r2, r0, #2
 8005098:	4650      	mov	r0, sl
 800509a:	4659      	mov	r1, fp
 800509c:	f7fb fd84 	bl	8000ba8 <__aeabi_uldivmod>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4b0e      	ldr	r3, [pc, #56]	; (80050e0 <UART_SetConfig+0x38c>)
 80050a6:	fba3 1302 	umull	r1, r3, r3, r2
 80050aa:	095b      	lsrs	r3, r3, #5
 80050ac:	2164      	movs	r1, #100	; 0x64
 80050ae:	fb01 f303 	mul.w	r3, r1, r3
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	011b      	lsls	r3, r3, #4
 80050b6:	3332      	adds	r3, #50	; 0x32
 80050b8:	4a09      	ldr	r2, [pc, #36]	; (80050e0 <UART_SetConfig+0x38c>)
 80050ba:	fba2 2303 	umull	r2, r3, r2, r3
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	f003 020f 	and.w	r2, r3, #15
 80050c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4432      	add	r2, r6
 80050ca:	609a      	str	r2, [r3, #8]
}
 80050cc:	bf00      	nop
 80050ce:	377c      	adds	r7, #124	; 0x7c
 80050d0:	46bd      	mov	sp, r7
 80050d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050d6:	bf00      	nop
 80050d8:	40011000 	.word	0x40011000
 80050dc:	40011400 	.word	0x40011400
 80050e0:	51eb851f 	.word	0x51eb851f

080050e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f103 0208 	add.w	r2, r3, #8
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f04f 32ff 	mov.w	r2, #4294967295
 80050fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f103 0208 	add.w	r2, r3, #8
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f103 0208 	add.w	r2, r3, #8
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005132:	bf00      	nop
 8005134:	370c      	adds	r7, #12
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800513e:	b480      	push	{r7}
 8005140:	b085      	sub	sp, #20
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
 8005146:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	601a      	str	r2, [r3, #0]
}
 800517a:	bf00      	nop
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005186:	b480      	push	{r7}
 8005188:	b085      	sub	sp, #20
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
 800518e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800519c:	d103      	bne.n	80051a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	e00c      	b.n	80051c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	3308      	adds	r3, #8
 80051aa:	60fb      	str	r3, [r7, #12]
 80051ac:	e002      	b.n	80051b4 <vListInsert+0x2e>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d2f6      	bcs.n	80051ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	1c5a      	adds	r2, r3, #1
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	601a      	str	r2, [r3, #0]
}
 80051ec:	bf00      	nop
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	687a      	ldr	r2, [r7, #4]
 800520c:	6892      	ldr	r2, [r2, #8]
 800520e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6852      	ldr	r2, [r2, #4]
 8005218:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	429a      	cmp	r2, r3
 8005222:	d103      	bne.n	800522c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	1e5a      	subs	r2, r3, #1
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10a      	bne.n	8005276 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005272:	bf00      	nop
 8005274:	e7fe      	b.n	8005274 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005276:	f001 fb1d 	bl	80068b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005282:	68f9      	ldr	r1, [r7, #12]
 8005284:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005286:	fb01 f303 	mul.w	r3, r1, r3
 800528a:	441a      	add	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a6:	3b01      	subs	r3, #1
 80052a8:	68f9      	ldr	r1, [r7, #12]
 80052aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80052ac:	fb01 f303 	mul.w	r3, r1, r3
 80052b0:	441a      	add	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	22ff      	movs	r2, #255	; 0xff
 80052ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	22ff      	movs	r2, #255	; 0xff
 80052c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d114      	bne.n	80052f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d01a      	beq.n	800530a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	3310      	adds	r3, #16
 80052d8:	4618      	mov	r0, r3
 80052da:	f000 fef5 	bl	80060c8 <xTaskRemoveFromEventList>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d012      	beq.n	800530a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80052e4:	4b0c      	ldr	r3, [pc, #48]	; (8005318 <xQueueGenericReset+0xcc>)
 80052e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ea:	601a      	str	r2, [r3, #0]
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	f3bf 8f6f 	isb	sy
 80052f4:	e009      	b.n	800530a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	3310      	adds	r3, #16
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7ff fef2 	bl	80050e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	3324      	adds	r3, #36	; 0x24
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff feed 	bl	80050e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800530a:	f001 fb03 	bl	8006914 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800530e:	2301      	movs	r3, #1
}
 8005310:	4618      	mov	r0, r3
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	e000ed04 	.word	0xe000ed04

0800531c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800531c:	b580      	push	{r7, lr}
 800531e:	b08a      	sub	sp, #40	; 0x28
 8005320:	af02      	add	r7, sp, #8
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	4613      	mov	r3, r2
 8005328:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10a      	bne.n	8005346 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	613b      	str	r3, [r7, #16]
}
 8005342:	bf00      	nop
 8005344:	e7fe      	b.n	8005344 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	fb02 f303 	mul.w	r3, r2, r3
 800534e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	3348      	adds	r3, #72	; 0x48
 8005354:	4618      	mov	r0, r3
 8005356:	f001 fbcf 	bl	8006af8 <pvPortMalloc>
 800535a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d011      	beq.n	8005386 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	3348      	adds	r3, #72	; 0x48
 800536a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005374:	79fa      	ldrb	r2, [r7, #7]
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	9300      	str	r3, [sp, #0]
 800537a:	4613      	mov	r3, r2
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	68b9      	ldr	r1, [r7, #8]
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f000 f805 	bl	8005390 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005386:	69bb      	ldr	r3, [r7, #24]
	}
 8005388:	4618      	mov	r0, r3
 800538a:	3720      	adds	r7, #32
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	607a      	str	r2, [r7, #4]
 800539c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d103      	bne.n	80053ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	e002      	b.n	80053b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80053be:	2101      	movs	r1, #1
 80053c0:	69b8      	ldr	r0, [r7, #24]
 80053c2:	f7ff ff43 	bl	800524c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80053c6:	bf00      	nop
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <xQueueGenericSendFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b090      	sub	sp, #64	; 0x40
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	60f8      	str	r0, [r7, #12]
 80053d6:	60b9      	str	r1, [r7, #8]
 80053d8:	607a      	str	r2, [r7, #4]
 80053da:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80053e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10a      	bne.n	80053fc <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80053e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80053f8:	bf00      	nop
 80053fa:	e7fe      	b.n	80053fa <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d103      	bne.n	800540a <xQueueGenericSendFromISR+0x3c>
 8005402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <xQueueGenericSendFromISR+0x40>
 800540a:	2301      	movs	r3, #1
 800540c:	e000      	b.n	8005410 <xQueueGenericSendFromISR+0x42>
 800540e:	2300      	movs	r3, #0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10a      	bne.n	800542a <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005418:	f383 8811 	msr	BASEPRI, r3
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	f3bf 8f4f 	dsb	sy
 8005424:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005426:	bf00      	nop
 8005428:	e7fe      	b.n	8005428 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b02      	cmp	r3, #2
 800542e:	d103      	bne.n	8005438 <xQueueGenericSendFromISR+0x6a>
 8005430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005434:	2b01      	cmp	r3, #1
 8005436:	d101      	bne.n	800543c <xQueueGenericSendFromISR+0x6e>
 8005438:	2301      	movs	r3, #1
 800543a:	e000      	b.n	800543e <xQueueGenericSendFromISR+0x70>
 800543c:	2300      	movs	r3, #0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10a      	bne.n	8005458 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005446:	f383 8811 	msr	BASEPRI, r3
 800544a:	f3bf 8f6f 	isb	sy
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	623b      	str	r3, [r7, #32]
}
 8005454:	bf00      	nop
 8005456:	e7fe      	b.n	8005456 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005458:	f001 fb0e 	bl	8006a78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800545c:	f3ef 8211 	mrs	r2, BASEPRI
 8005460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	61fa      	str	r2, [r7, #28]
 8005472:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005474:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005476:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800547c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005480:	429a      	cmp	r2, r3
 8005482:	d302      	bcc.n	800548a <xQueueGenericSendFromISR+0xbc>
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	2b02      	cmp	r3, #2
 8005488:	d12f      	bne.n	80054ea <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800548a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005490:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005498:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	68b9      	ldr	r1, [r7, #8]
 800549e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054a0:	f000 f910 	bl	80056c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80054a4:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80054a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ac:	d112      	bne.n	80054d4 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d016      	beq.n	80054e4 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b8:	3324      	adds	r3, #36	; 0x24
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fe04 	bl	80060c8 <xTaskRemoveFromEventList>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00e      	beq.n	80054e4 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00b      	beq.n	80054e4 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	601a      	str	r2, [r3, #0]
 80054d2:	e007      	b.n	80054e4 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80054d8:	3301      	adds	r3, #1
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	b25a      	sxtb	r2, r3
 80054de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80054e4:	2301      	movs	r3, #1
 80054e6:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80054e8:	e001      	b.n	80054ee <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80054ea:	2300      	movs	r3, #0
 80054ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3740      	adds	r7, #64	; 0x40
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b08c      	sub	sp, #48	; 0x30
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005510:	2300      	movs	r3, #0
 8005512:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10a      	bne.n	8005534 <xQueueReceive+0x30>
	__asm volatile
 800551e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	623b      	str	r3, [r7, #32]
}
 8005530:	bf00      	nop
 8005532:	e7fe      	b.n	8005532 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d103      	bne.n	8005542 <xQueueReceive+0x3e>
 800553a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <xQueueReceive+0x42>
 8005542:	2301      	movs	r3, #1
 8005544:	e000      	b.n	8005548 <xQueueReceive+0x44>
 8005546:	2300      	movs	r3, #0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10a      	bne.n	8005562 <xQueueReceive+0x5e>
	__asm volatile
 800554c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005550:	f383 8811 	msr	BASEPRI, r3
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	61fb      	str	r3, [r7, #28]
}
 800555e:	bf00      	nop
 8005560:	e7fe      	b.n	8005560 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005562:	f000 ff6d 	bl	8006440 <xTaskGetSchedulerState>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d102      	bne.n	8005572 <xQueueReceive+0x6e>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <xQueueReceive+0x72>
 8005572:	2301      	movs	r3, #1
 8005574:	e000      	b.n	8005578 <xQueueReceive+0x74>
 8005576:	2300      	movs	r3, #0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10a      	bne.n	8005592 <xQueueReceive+0x8e>
	__asm volatile
 800557c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005580:	f383 8811 	msr	BASEPRI, r3
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	61bb      	str	r3, [r7, #24]
}
 800558e:	bf00      	nop
 8005590:	e7fe      	b.n	8005590 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005592:	f001 f98f 	bl	80068b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d01f      	beq.n	80055e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80055a2:	68b9      	ldr	r1, [r7, #8]
 80055a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055a6:	f000 f8f7 	bl	8005798 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	1e5a      	subs	r2, r3, #1
 80055ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00f      	beq.n	80055da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055bc:	3310      	adds	r3, #16
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 fd82 	bl	80060c8 <xTaskRemoveFromEventList>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d007      	beq.n	80055da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80055ca:	4b3d      	ldr	r3, [pc, #244]	; (80056c0 <xQueueReceive+0x1bc>)
 80055cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80055da:	f001 f99b 	bl	8006914 <vPortExitCritical>
				return pdPASS;
 80055de:	2301      	movs	r3, #1
 80055e0:	e069      	b.n	80056b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d103      	bne.n	80055f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055e8:	f001 f994 	bl	8006914 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80055ec:	2300      	movs	r3, #0
 80055ee:	e062      	b.n	80056b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d106      	bne.n	8005604 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055f6:	f107 0310 	add.w	r3, r7, #16
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 fdc6 	bl	800618c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005600:	2301      	movs	r3, #1
 8005602:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005604:	f001 f986 	bl	8006914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005608:	f000 fb7c 	bl	8005d04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800560c:	f001 f952 	bl	80068b4 <vPortEnterCritical>
 8005610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005612:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005616:	b25b      	sxtb	r3, r3
 8005618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561c:	d103      	bne.n	8005626 <xQueueReceive+0x122>
 800561e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005628:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800562c:	b25b      	sxtb	r3, r3
 800562e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005632:	d103      	bne.n	800563c <xQueueReceive+0x138>
 8005634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005636:	2200      	movs	r2, #0
 8005638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800563c:	f001 f96a 	bl	8006914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005640:	1d3a      	adds	r2, r7, #4
 8005642:	f107 0310 	add.w	r3, r7, #16
 8005646:	4611      	mov	r1, r2
 8005648:	4618      	mov	r0, r3
 800564a:	f000 fdb5 	bl	80061b8 <xTaskCheckForTimeOut>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d123      	bne.n	800569c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005654:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005656:	f000 f917 	bl	8005888 <prvIsQueueEmpty>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d017      	beq.n	8005690 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005662:	3324      	adds	r3, #36	; 0x24
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	4611      	mov	r1, r2
 8005668:	4618      	mov	r0, r3
 800566a:	f000 fd09 	bl	8006080 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800566e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005670:	f000 f8b8 	bl	80057e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005674:	f000 fb54 	bl	8005d20 <xTaskResumeAll>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d189      	bne.n	8005592 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800567e:	4b10      	ldr	r3, [pc, #64]	; (80056c0 <xQueueReceive+0x1bc>)
 8005680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	f3bf 8f4f 	dsb	sy
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	e780      	b.n	8005592 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005690:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005692:	f000 f8a7 	bl	80057e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005696:	f000 fb43 	bl	8005d20 <xTaskResumeAll>
 800569a:	e77a      	b.n	8005592 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800569c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800569e:	f000 f8a1 	bl	80057e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056a2:	f000 fb3d 	bl	8005d20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056a8:	f000 f8ee 	bl	8005888 <prvIsQueueEmpty>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f43f af6f 	beq.w	8005592 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80056b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3730      	adds	r7, #48	; 0x30
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	e000ed04 	.word	0xe000ed04

080056c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80056d0:	2300      	movs	r3, #0
 80056d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d10d      	bne.n	80056fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d14d      	bne.n	8005786 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 fec4 	bl	800647c <xTaskPriorityDisinherit>
 80056f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	609a      	str	r2, [r3, #8]
 80056fc:	e043      	b.n	8005786 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d119      	bne.n	8005738 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6858      	ldr	r0, [r3, #4]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570c:	461a      	mov	r2, r3
 800570e:	68b9      	ldr	r1, [r7, #8]
 8005710:	f001 fc06 	bl	8006f20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571c:	441a      	add	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	429a      	cmp	r2, r3
 800572c:	d32b      	bcc.n	8005786 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	605a      	str	r2, [r3, #4]
 8005736:	e026      	b.n	8005786 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	68d8      	ldr	r0, [r3, #12]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005740:	461a      	mov	r2, r3
 8005742:	68b9      	ldr	r1, [r7, #8]
 8005744:	f001 fbec 	bl	8006f20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005750:	425b      	negs	r3, r3
 8005752:	441a      	add	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	68da      	ldr	r2, [r3, #12]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	429a      	cmp	r2, r3
 8005762:	d207      	bcs.n	8005774 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	689a      	ldr	r2, [r3, #8]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576c:	425b      	negs	r3, r3
 800576e:	441a      	add	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b02      	cmp	r3, #2
 8005778:	d105      	bne.n	8005786 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	3b01      	subs	r3, #1
 8005784:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1c5a      	adds	r2, r3, #1
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800578e:	697b      	ldr	r3, [r7, #20]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d018      	beq.n	80057dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68da      	ldr	r2, [r3, #12]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	441a      	add	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68da      	ldr	r2, [r3, #12]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d303      	bcc.n	80057cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68d9      	ldr	r1, [r3, #12]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d4:	461a      	mov	r2, r3
 80057d6:	6838      	ldr	r0, [r7, #0]
 80057d8:	f001 fba2 	bl	8006f20 <memcpy>
	}
}
 80057dc:	bf00      	nop
 80057de:	3708      	adds	r7, #8
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80057ec:	f001 f862 	bl	80068b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057f8:	e011      	b.n	800581e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d012      	beq.n	8005828 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	3324      	adds	r3, #36	; 0x24
 8005806:	4618      	mov	r0, r3
 8005808:	f000 fc5e 	bl	80060c8 <xTaskRemoveFromEventList>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d001      	beq.n	8005816 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005812:	f000 fd33 	bl	800627c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005816:	7bfb      	ldrb	r3, [r7, #15]
 8005818:	3b01      	subs	r3, #1
 800581a:	b2db      	uxtb	r3, r3
 800581c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800581e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005822:	2b00      	cmp	r3, #0
 8005824:	dce9      	bgt.n	80057fa <prvUnlockQueue+0x16>
 8005826:	e000      	b.n	800582a <prvUnlockQueue+0x46>
					break;
 8005828:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	22ff      	movs	r2, #255	; 0xff
 800582e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005832:	f001 f86f 	bl	8006914 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005836:	f001 f83d 	bl	80068b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005840:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005842:	e011      	b.n	8005868 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d012      	beq.n	8005872 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3310      	adds	r3, #16
 8005850:	4618      	mov	r0, r3
 8005852:	f000 fc39 	bl	80060c8 <xTaskRemoveFromEventList>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d001      	beq.n	8005860 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800585c:	f000 fd0e 	bl	800627c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005860:	7bbb      	ldrb	r3, [r7, #14]
 8005862:	3b01      	subs	r3, #1
 8005864:	b2db      	uxtb	r3, r3
 8005866:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005868:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800586c:	2b00      	cmp	r3, #0
 800586e:	dce9      	bgt.n	8005844 <prvUnlockQueue+0x60>
 8005870:	e000      	b.n	8005874 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005872:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	22ff      	movs	r2, #255	; 0xff
 8005878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800587c:	f001 f84a 	bl	8006914 <vPortExitCritical>
}
 8005880:	bf00      	nop
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005890:	f001 f810 	bl	80068b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005898:	2b00      	cmp	r3, #0
 800589a:	d102      	bne.n	80058a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800589c:	2301      	movs	r3, #1
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	e001      	b.n	80058a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80058a2:	2300      	movs	r3, #0
 80058a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058a6:	f001 f835 	bl	8006914 <vPortExitCritical>

	return xReturn;
 80058aa:	68fb      	ldr	r3, [r7, #12]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b08e      	sub	sp, #56	; 0x38
 80058b8:	af04      	add	r7, sp, #16
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
 80058c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80058c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10a      	bne.n	80058de <xTaskCreateStatic+0x2a>
	__asm volatile
 80058c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058cc:	f383 8811 	msr	BASEPRI, r3
 80058d0:	f3bf 8f6f 	isb	sy
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	623b      	str	r3, [r7, #32]
}
 80058da:	bf00      	nop
 80058dc:	e7fe      	b.n	80058dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80058de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10a      	bne.n	80058fa <xTaskCreateStatic+0x46>
	__asm volatile
 80058e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	61fb      	str	r3, [r7, #28]
}
 80058f6:	bf00      	nop
 80058f8:	e7fe      	b.n	80058f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80058fa:	2354      	movs	r3, #84	; 0x54
 80058fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	2b54      	cmp	r3, #84	; 0x54
 8005902:	d00a      	beq.n	800591a <xTaskCreateStatic+0x66>
	__asm volatile
 8005904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	61bb      	str	r3, [r7, #24]
}
 8005916:	bf00      	nop
 8005918:	e7fe      	b.n	8005918 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800591a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800591c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591e:	2b00      	cmp	r3, #0
 8005920:	d01e      	beq.n	8005960 <xTaskCreateStatic+0xac>
 8005922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005924:	2b00      	cmp	r3, #0
 8005926:	d01b      	beq.n	8005960 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800592c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005930:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005934:	2202      	movs	r2, #2
 8005936:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800593a:	2300      	movs	r3, #0
 800593c:	9303      	str	r3, [sp, #12]
 800593e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005940:	9302      	str	r3, [sp, #8]
 8005942:	f107 0314 	add.w	r3, r7, #20
 8005946:	9301      	str	r3, [sp, #4]
 8005948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	68b9      	ldr	r1, [r7, #8]
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f000 f850 	bl	80059f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005958:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800595a:	f000 f8d5 	bl	8005b08 <prvAddNewTaskToReadyList>
 800595e:	e001      	b.n	8005964 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005960:	2300      	movs	r3, #0
 8005962:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005964:	697b      	ldr	r3, [r7, #20]
	}
 8005966:	4618      	mov	r0, r3
 8005968:	3728      	adds	r7, #40	; 0x28
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800596e:	b580      	push	{r7, lr}
 8005970:	b08c      	sub	sp, #48	; 0x30
 8005972:	af04      	add	r7, sp, #16
 8005974:	60f8      	str	r0, [r7, #12]
 8005976:	60b9      	str	r1, [r7, #8]
 8005978:	603b      	str	r3, [r7, #0]
 800597a:	4613      	mov	r3, r2
 800597c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800597e:	88fb      	ldrh	r3, [r7, #6]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4618      	mov	r0, r3
 8005984:	f001 f8b8 	bl	8006af8 <pvPortMalloc>
 8005988:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00e      	beq.n	80059ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005990:	2054      	movs	r0, #84	; 0x54
 8005992:	f001 f8b1 	bl	8006af8 <pvPortMalloc>
 8005996:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	631a      	str	r2, [r3, #48]	; 0x30
 80059a4:	e005      	b.n	80059b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80059a6:	6978      	ldr	r0, [r7, #20]
 80059a8:	f001 f972 	bl	8006c90 <vPortFree>
 80059ac:	e001      	b.n	80059b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80059ae:	2300      	movs	r3, #0
 80059b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d017      	beq.n	80059e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80059c0:	88fa      	ldrh	r2, [r7, #6]
 80059c2:	2300      	movs	r3, #0
 80059c4:	9303      	str	r3, [sp, #12]
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	9302      	str	r3, [sp, #8]
 80059ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059cc:	9301      	str	r3, [sp, #4]
 80059ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	68b9      	ldr	r1, [r7, #8]
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f000 f80e 	bl	80059f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059dc:	69f8      	ldr	r0, [r7, #28]
 80059de:	f000 f893 	bl	8005b08 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80059e2:	2301      	movs	r3, #1
 80059e4:	61bb      	str	r3, [r7, #24]
 80059e6:	e002      	b.n	80059ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80059e8:	f04f 33ff 	mov.w	r3, #4294967295
 80059ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80059ee:	69bb      	ldr	r3, [r7, #24]
	}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3720      	adds	r7, #32
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b088      	sub	sp, #32
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
 8005a04:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a10:	3b01      	subs	r3, #1
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	f023 0307 	bic.w	r3, r3, #7
 8005a1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	617b      	str	r3, [r7, #20]
}
 8005a3c:	bf00      	nop
 8005a3e:	e7fe      	b.n	8005a3e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d01f      	beq.n	8005a86 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a46:	2300      	movs	r3, #0
 8005a48:	61fb      	str	r3, [r7, #28]
 8005a4a:	e012      	b.n	8005a72 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	4413      	add	r3, r2
 8005a52:	7819      	ldrb	r1, [r3, #0]
 8005a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	4413      	add	r3, r2
 8005a5a:	3334      	adds	r3, #52	; 0x34
 8005a5c:	460a      	mov	r2, r1
 8005a5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005a60:	68ba      	ldr	r2, [r7, #8]
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	4413      	add	r3, r2
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d006      	beq.n	8005a7a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	61fb      	str	r3, [r7, #28]
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	2b0f      	cmp	r3, #15
 8005a76:	d9e9      	bls.n	8005a4c <prvInitialiseNewTask+0x54>
 8005a78:	e000      	b.n	8005a7c <prvInitialiseNewTask+0x84>
			{
				break;
 8005a7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a84:	e003      	b.n	8005a8e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a90:	2b06      	cmp	r3, #6
 8005a92:	d901      	bls.n	8005a98 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a94:	2306      	movs	r3, #6
 8005a96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005aa2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aac:	3304      	adds	r3, #4
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7ff fb38 	bl	8005124 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab6:	3318      	adds	r3, #24
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7ff fb33 	bl	8005124 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ac2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac6:	f1c3 0207 	rsb	r2, r3, #7
 8005aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005acc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ad2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	68f9      	ldr	r1, [r7, #12]
 8005ae6:	69b8      	ldr	r0, [r7, #24]
 8005ae8:	f000 fdb4 	bl	8006654 <pxPortInitialiseStack>
 8005aec:	4602      	mov	r2, r0
 8005aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005afc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005afe:	bf00      	nop
 8005b00:	3720      	adds	r7, #32
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
	...

08005b08 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b10:	f000 fed0 	bl	80068b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b14:	4b2a      	ldr	r3, [pc, #168]	; (8005bc0 <prvAddNewTaskToReadyList+0xb8>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	4a29      	ldr	r2, [pc, #164]	; (8005bc0 <prvAddNewTaskToReadyList+0xb8>)
 8005b1c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b1e:	4b29      	ldr	r3, [pc, #164]	; (8005bc4 <prvAddNewTaskToReadyList+0xbc>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d109      	bne.n	8005b3a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b26:	4a27      	ldr	r2, [pc, #156]	; (8005bc4 <prvAddNewTaskToReadyList+0xbc>)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b2c:	4b24      	ldr	r3, [pc, #144]	; (8005bc0 <prvAddNewTaskToReadyList+0xb8>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d110      	bne.n	8005b56 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b34:	f000 fbc6 	bl	80062c4 <prvInitialiseTaskLists>
 8005b38:	e00d      	b.n	8005b56 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b3a:	4b23      	ldr	r3, [pc, #140]	; (8005bc8 <prvAddNewTaskToReadyList+0xc0>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d109      	bne.n	8005b56 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b42:	4b20      	ldr	r3, [pc, #128]	; (8005bc4 <prvAddNewTaskToReadyList+0xbc>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d802      	bhi.n	8005b56 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b50:	4a1c      	ldr	r2, [pc, #112]	; (8005bc4 <prvAddNewTaskToReadyList+0xbc>)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b56:	4b1d      	ldr	r3, [pc, #116]	; (8005bcc <prvAddNewTaskToReadyList+0xc4>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	4a1b      	ldr	r2, [pc, #108]	; (8005bcc <prvAddNewTaskToReadyList+0xc4>)
 8005b5e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b64:	2201      	movs	r2, #1
 8005b66:	409a      	lsls	r2, r3
 8005b68:	4b19      	ldr	r3, [pc, #100]	; (8005bd0 <prvAddNewTaskToReadyList+0xc8>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	4a18      	ldr	r2, [pc, #96]	; (8005bd0 <prvAddNewTaskToReadyList+0xc8>)
 8005b70:	6013      	str	r3, [r2, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b76:	4613      	mov	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	4413      	add	r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	4a15      	ldr	r2, [pc, #84]	; (8005bd4 <prvAddNewTaskToReadyList+0xcc>)
 8005b80:	441a      	add	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	3304      	adds	r3, #4
 8005b86:	4619      	mov	r1, r3
 8005b88:	4610      	mov	r0, r2
 8005b8a:	f7ff fad8 	bl	800513e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b8e:	f000 fec1 	bl	8006914 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b92:	4b0d      	ldr	r3, [pc, #52]	; (8005bc8 <prvAddNewTaskToReadyList+0xc0>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00e      	beq.n	8005bb8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b9a:	4b0a      	ldr	r3, [pc, #40]	; (8005bc4 <prvAddNewTaskToReadyList+0xbc>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d207      	bcs.n	8005bb8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ba8:	4b0b      	ldr	r3, [pc, #44]	; (8005bd8 <prvAddNewTaskToReadyList+0xd0>)
 8005baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bae:	601a      	str	r2, [r3, #0]
 8005bb0:	f3bf 8f4f 	dsb	sy
 8005bb4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bb8:	bf00      	nop
 8005bba:	3708      	adds	r7, #8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	2000055c 	.word	0x2000055c
 8005bc4:	2000045c 	.word	0x2000045c
 8005bc8:	20000568 	.word	0x20000568
 8005bcc:	20000578 	.word	0x20000578
 8005bd0:	20000564 	.word	0x20000564
 8005bd4:	20000460 	.word	0x20000460
 8005bd8:	e000ed04 	.word	0xe000ed04

08005bdc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005be4:	2300      	movs	r3, #0
 8005be6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d017      	beq.n	8005c1e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005bee:	4b13      	ldr	r3, [pc, #76]	; (8005c3c <vTaskDelay+0x60>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00a      	beq.n	8005c0c <vTaskDelay+0x30>
	__asm volatile
 8005bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfa:	f383 8811 	msr	BASEPRI, r3
 8005bfe:	f3bf 8f6f 	isb	sy
 8005c02:	f3bf 8f4f 	dsb	sy
 8005c06:	60bb      	str	r3, [r7, #8]
}
 8005c08:	bf00      	nop
 8005c0a:	e7fe      	b.n	8005c0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005c0c:	f000 f87a 	bl	8005d04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c10:	2100      	movs	r1, #0
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fcb8 	bl	8006588 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c18:	f000 f882 	bl	8005d20 <xTaskResumeAll>
 8005c1c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d107      	bne.n	8005c34 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005c24:	4b06      	ldr	r3, [pc, #24]	; (8005c40 <vTaskDelay+0x64>)
 8005c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c34:	bf00      	nop
 8005c36:	3710      	adds	r7, #16
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	20000584 	.word	0x20000584
 8005c40:	e000ed04 	.word	0xe000ed04

08005c44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b08a      	sub	sp, #40	; 0x28
 8005c48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c52:	463a      	mov	r2, r7
 8005c54:	1d39      	adds	r1, r7, #4
 8005c56:	f107 0308 	add.w	r3, r7, #8
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fb f920 	bl	8000ea0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c60:	6839      	ldr	r1, [r7, #0]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	9202      	str	r2, [sp, #8]
 8005c68:	9301      	str	r3, [sp, #4]
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	2300      	movs	r3, #0
 8005c70:	460a      	mov	r2, r1
 8005c72:	491e      	ldr	r1, [pc, #120]	; (8005cec <vTaskStartScheduler+0xa8>)
 8005c74:	481e      	ldr	r0, [pc, #120]	; (8005cf0 <vTaskStartScheduler+0xac>)
 8005c76:	f7ff fe1d 	bl	80058b4 <xTaskCreateStatic>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	4a1d      	ldr	r2, [pc, #116]	; (8005cf4 <vTaskStartScheduler+0xb0>)
 8005c7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c80:	4b1c      	ldr	r3, [pc, #112]	; (8005cf4 <vTaskStartScheduler+0xb0>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d002      	beq.n	8005c8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	617b      	str	r3, [r7, #20]
 8005c8c:	e001      	b.n	8005c92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d116      	bne.n	8005cc6 <vTaskStartScheduler+0x82>
	__asm volatile
 8005c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	613b      	str	r3, [r7, #16]
}
 8005caa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005cac:	4b12      	ldr	r3, [pc, #72]	; (8005cf8 <vTaskStartScheduler+0xb4>)
 8005cae:	f04f 32ff 	mov.w	r2, #4294967295
 8005cb2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005cb4:	4b11      	ldr	r3, [pc, #68]	; (8005cfc <vTaskStartScheduler+0xb8>)
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005cba:	4b11      	ldr	r3, [pc, #68]	; (8005d00 <vTaskStartScheduler+0xbc>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005cc0:	f000 fd56 	bl	8006770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005cc4:	e00e      	b.n	8005ce4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ccc:	d10a      	bne.n	8005ce4 <vTaskStartScheduler+0xa0>
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	60fb      	str	r3, [r7, #12]
}
 8005ce0:	bf00      	nop
 8005ce2:	e7fe      	b.n	8005ce2 <vTaskStartScheduler+0x9e>
}
 8005ce4:	bf00      	nop
 8005ce6:	3718      	adds	r7, #24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	08009bd8 	.word	0x08009bd8
 8005cf0:	08006295 	.word	0x08006295
 8005cf4:	20000580 	.word	0x20000580
 8005cf8:	2000057c 	.word	0x2000057c
 8005cfc:	20000568 	.word	0x20000568
 8005d00:	20000560 	.word	0x20000560

08005d04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d04:	b480      	push	{r7}
 8005d06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005d08:	4b04      	ldr	r3, [pc, #16]	; (8005d1c <vTaskSuspendAll+0x18>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	4a03      	ldr	r2, [pc, #12]	; (8005d1c <vTaskSuspendAll+0x18>)
 8005d10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005d12:	bf00      	nop
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	20000584 	.word	0x20000584

08005d20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d26:	2300      	movs	r3, #0
 8005d28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d2e:	4b41      	ldr	r3, [pc, #260]	; (8005e34 <xTaskResumeAll+0x114>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10a      	bne.n	8005d4c <xTaskResumeAll+0x2c>
	__asm volatile
 8005d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3a:	f383 8811 	msr	BASEPRI, r3
 8005d3e:	f3bf 8f6f 	isb	sy
 8005d42:	f3bf 8f4f 	dsb	sy
 8005d46:	603b      	str	r3, [r7, #0]
}
 8005d48:	bf00      	nop
 8005d4a:	e7fe      	b.n	8005d4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d4c:	f000 fdb2 	bl	80068b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d50:	4b38      	ldr	r3, [pc, #224]	; (8005e34 <xTaskResumeAll+0x114>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3b01      	subs	r3, #1
 8005d56:	4a37      	ldr	r2, [pc, #220]	; (8005e34 <xTaskResumeAll+0x114>)
 8005d58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d5a:	4b36      	ldr	r3, [pc, #216]	; (8005e34 <xTaskResumeAll+0x114>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d161      	bne.n	8005e26 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d62:	4b35      	ldr	r3, [pc, #212]	; (8005e38 <xTaskResumeAll+0x118>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d05d      	beq.n	8005e26 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d6a:	e02e      	b.n	8005dca <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d6c:	4b33      	ldr	r3, [pc, #204]	; (8005e3c <xTaskResumeAll+0x11c>)
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	3318      	adds	r3, #24
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7ff fa3d 	bl	80051f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	3304      	adds	r3, #4
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7ff fa38 	bl	80051f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	409a      	lsls	r2, r3
 8005d90:	4b2b      	ldr	r3, [pc, #172]	; (8005e40 <xTaskResumeAll+0x120>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	4a2a      	ldr	r2, [pc, #168]	; (8005e40 <xTaskResumeAll+0x120>)
 8005d98:	6013      	str	r3, [r2, #0]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9e:	4613      	mov	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4a27      	ldr	r2, [pc, #156]	; (8005e44 <xTaskResumeAll+0x124>)
 8005da8:	441a      	add	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	3304      	adds	r3, #4
 8005dae:	4619      	mov	r1, r3
 8005db0:	4610      	mov	r0, r2
 8005db2:	f7ff f9c4 	bl	800513e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dba:	4b23      	ldr	r3, [pc, #140]	; (8005e48 <xTaskResumeAll+0x128>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d302      	bcc.n	8005dca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005dc4:	4b21      	ldr	r3, [pc, #132]	; (8005e4c <xTaskResumeAll+0x12c>)
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005dca:	4b1c      	ldr	r3, [pc, #112]	; (8005e3c <xTaskResumeAll+0x11c>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1cc      	bne.n	8005d6c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d001      	beq.n	8005ddc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005dd8:	f000 fb12 	bl	8006400 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005ddc:	4b1c      	ldr	r3, [pc, #112]	; (8005e50 <xTaskResumeAll+0x130>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d010      	beq.n	8005e0a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005de8:	f000 f836 	bl	8005e58 <xTaskIncrementTick>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005df2:	4b16      	ldr	r3, [pc, #88]	; (8005e4c <xTaskResumeAll+0x12c>)
 8005df4:	2201      	movs	r2, #1
 8005df6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1f1      	bne.n	8005de8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005e04:	4b12      	ldr	r3, [pc, #72]	; (8005e50 <xTaskResumeAll+0x130>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e0a:	4b10      	ldr	r3, [pc, #64]	; (8005e4c <xTaskResumeAll+0x12c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d009      	beq.n	8005e26 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e12:	2301      	movs	r3, #1
 8005e14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e16:	4b0f      	ldr	r3, [pc, #60]	; (8005e54 <xTaskResumeAll+0x134>)
 8005e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e1c:	601a      	str	r2, [r3, #0]
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e26:	f000 fd75 	bl	8006914 <vPortExitCritical>

	return xAlreadyYielded;
 8005e2a:	68bb      	ldr	r3, [r7, #8]
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3710      	adds	r7, #16
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	20000584 	.word	0x20000584
 8005e38:	2000055c 	.word	0x2000055c
 8005e3c:	2000051c 	.word	0x2000051c
 8005e40:	20000564 	.word	0x20000564
 8005e44:	20000460 	.word	0x20000460
 8005e48:	2000045c 	.word	0x2000045c
 8005e4c:	20000570 	.word	0x20000570
 8005e50:	2000056c 	.word	0x2000056c
 8005e54:	e000ed04 	.word	0xe000ed04

08005e58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e62:	4b4e      	ldr	r3, [pc, #312]	; (8005f9c <xTaskIncrementTick+0x144>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f040 808e 	bne.w	8005f88 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e6c:	4b4c      	ldr	r3, [pc, #304]	; (8005fa0 <xTaskIncrementTick+0x148>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	3301      	adds	r3, #1
 8005e72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e74:	4a4a      	ldr	r2, [pc, #296]	; (8005fa0 <xTaskIncrementTick+0x148>)
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d120      	bne.n	8005ec2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e80:	4b48      	ldr	r3, [pc, #288]	; (8005fa4 <xTaskIncrementTick+0x14c>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00a      	beq.n	8005ea0 <xTaskIncrementTick+0x48>
	__asm volatile
 8005e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	603b      	str	r3, [r7, #0]
}
 8005e9c:	bf00      	nop
 8005e9e:	e7fe      	b.n	8005e9e <xTaskIncrementTick+0x46>
 8005ea0:	4b40      	ldr	r3, [pc, #256]	; (8005fa4 <xTaskIncrementTick+0x14c>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	60fb      	str	r3, [r7, #12]
 8005ea6:	4b40      	ldr	r3, [pc, #256]	; (8005fa8 <xTaskIncrementTick+0x150>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a3e      	ldr	r2, [pc, #248]	; (8005fa4 <xTaskIncrementTick+0x14c>)
 8005eac:	6013      	str	r3, [r2, #0]
 8005eae:	4a3e      	ldr	r2, [pc, #248]	; (8005fa8 <xTaskIncrementTick+0x150>)
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6013      	str	r3, [r2, #0]
 8005eb4:	4b3d      	ldr	r3, [pc, #244]	; (8005fac <xTaskIncrementTick+0x154>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	4a3c      	ldr	r2, [pc, #240]	; (8005fac <xTaskIncrementTick+0x154>)
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	f000 fa9f 	bl	8006400 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ec2:	4b3b      	ldr	r3, [pc, #236]	; (8005fb0 <xTaskIncrementTick+0x158>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d348      	bcc.n	8005f5e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ecc:	4b35      	ldr	r3, [pc, #212]	; (8005fa4 <xTaskIncrementTick+0x14c>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d104      	bne.n	8005ee0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ed6:	4b36      	ldr	r3, [pc, #216]	; (8005fb0 <xTaskIncrementTick+0x158>)
 8005ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8005edc:	601a      	str	r2, [r3, #0]
					break;
 8005ede:	e03e      	b.n	8005f5e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ee0:	4b30      	ldr	r3, [pc, #192]	; (8005fa4 <xTaskIncrementTick+0x14c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d203      	bcs.n	8005f00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ef8:	4a2d      	ldr	r2, [pc, #180]	; (8005fb0 <xTaskIncrementTick+0x158>)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005efe:	e02e      	b.n	8005f5e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	3304      	adds	r3, #4
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7ff f977 	bl	80051f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d004      	beq.n	8005f1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	3318      	adds	r3, #24
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7ff f96e 	bl	80051f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f20:	2201      	movs	r2, #1
 8005f22:	409a      	lsls	r2, r3
 8005f24:	4b23      	ldr	r3, [pc, #140]	; (8005fb4 <xTaskIncrementTick+0x15c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	4a22      	ldr	r2, [pc, #136]	; (8005fb4 <xTaskIncrementTick+0x15c>)
 8005f2c:	6013      	str	r3, [r2, #0]
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f32:	4613      	mov	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4a1f      	ldr	r2, [pc, #124]	; (8005fb8 <xTaskIncrementTick+0x160>)
 8005f3c:	441a      	add	r2, r3
 8005f3e:	68bb      	ldr	r3, [r7, #8]
 8005f40:	3304      	adds	r3, #4
 8005f42:	4619      	mov	r1, r3
 8005f44:	4610      	mov	r0, r2
 8005f46:	f7ff f8fa 	bl	800513e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f4e:	4b1b      	ldr	r3, [pc, #108]	; (8005fbc <xTaskIncrementTick+0x164>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d3b9      	bcc.n	8005ecc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f5c:	e7b6      	b.n	8005ecc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f5e:	4b17      	ldr	r3, [pc, #92]	; (8005fbc <xTaskIncrementTick+0x164>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f64:	4914      	ldr	r1, [pc, #80]	; (8005fb8 <xTaskIncrementTick+0x160>)
 8005f66:	4613      	mov	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	4413      	add	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	440b      	add	r3, r1
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d901      	bls.n	8005f7a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005f76:	2301      	movs	r3, #1
 8005f78:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005f7a:	4b11      	ldr	r3, [pc, #68]	; (8005fc0 <xTaskIncrementTick+0x168>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d007      	beq.n	8005f92 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005f82:	2301      	movs	r3, #1
 8005f84:	617b      	str	r3, [r7, #20]
 8005f86:	e004      	b.n	8005f92 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005f88:	4b0e      	ldr	r3, [pc, #56]	; (8005fc4 <xTaskIncrementTick+0x16c>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	4a0d      	ldr	r2, [pc, #52]	; (8005fc4 <xTaskIncrementTick+0x16c>)
 8005f90:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f92:	697b      	ldr	r3, [r7, #20]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3718      	adds	r7, #24
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	20000584 	.word	0x20000584
 8005fa0:	20000560 	.word	0x20000560
 8005fa4:	20000514 	.word	0x20000514
 8005fa8:	20000518 	.word	0x20000518
 8005fac:	20000574 	.word	0x20000574
 8005fb0:	2000057c 	.word	0x2000057c
 8005fb4:	20000564 	.word	0x20000564
 8005fb8:	20000460 	.word	0x20000460
 8005fbc:	2000045c 	.word	0x2000045c
 8005fc0:	20000570 	.word	0x20000570
 8005fc4:	2000056c 	.word	0x2000056c

08005fc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fce:	4b27      	ldr	r3, [pc, #156]	; (800606c <vTaskSwitchContext+0xa4>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005fd6:	4b26      	ldr	r3, [pc, #152]	; (8006070 <vTaskSwitchContext+0xa8>)
 8005fd8:	2201      	movs	r2, #1
 8005fda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005fdc:	e03f      	b.n	800605e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005fde:	4b24      	ldr	r3, [pc, #144]	; (8006070 <vTaskSwitchContext+0xa8>)
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fe4:	4b23      	ldr	r3, [pc, #140]	; (8006074 <vTaskSwitchContext+0xac>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	fab3 f383 	clz	r3, r3
 8005ff0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005ff2:	7afb      	ldrb	r3, [r7, #11]
 8005ff4:	f1c3 031f 	rsb	r3, r3, #31
 8005ff8:	617b      	str	r3, [r7, #20]
 8005ffa:	491f      	ldr	r1, [pc, #124]	; (8006078 <vTaskSwitchContext+0xb0>)
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	4613      	mov	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4413      	add	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	440b      	add	r3, r1
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10a      	bne.n	8006024 <vTaskSwitchContext+0x5c>
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	607b      	str	r3, [r7, #4]
}
 8006020:	bf00      	nop
 8006022:	e7fe      	b.n	8006022 <vTaskSwitchContext+0x5a>
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	4613      	mov	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4a12      	ldr	r2, [pc, #72]	; (8006078 <vTaskSwitchContext+0xb0>)
 8006030:	4413      	add	r3, r2
 8006032:	613b      	str	r3, [r7, #16]
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	605a      	str	r2, [r3, #4]
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	3308      	adds	r3, #8
 8006046:	429a      	cmp	r2, r3
 8006048:	d104      	bne.n	8006054 <vTaskSwitchContext+0x8c>
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	605a      	str	r2, [r3, #4]
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	4a08      	ldr	r2, [pc, #32]	; (800607c <vTaskSwitchContext+0xb4>)
 800605c:	6013      	str	r3, [r2, #0]
}
 800605e:	bf00      	nop
 8006060:	371c      	adds	r7, #28
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	20000584 	.word	0x20000584
 8006070:	20000570 	.word	0x20000570
 8006074:	20000564 	.word	0x20000564
 8006078:	20000460 	.word	0x20000460
 800607c:	2000045c 	.word	0x2000045c

08006080 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10a      	bne.n	80060a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	60fb      	str	r3, [r7, #12]
}
 80060a2:	bf00      	nop
 80060a4:	e7fe      	b.n	80060a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060a6:	4b07      	ldr	r3, [pc, #28]	; (80060c4 <vTaskPlaceOnEventList+0x44>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	3318      	adds	r3, #24
 80060ac:	4619      	mov	r1, r3
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7ff f869 	bl	8005186 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060b4:	2101      	movs	r1, #1
 80060b6:	6838      	ldr	r0, [r7, #0]
 80060b8:	f000 fa66 	bl	8006588 <prvAddCurrentTaskToDelayedList>
}
 80060bc:	bf00      	nop
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	2000045c 	.word	0x2000045c

080060c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10a      	bne.n	80060f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80060de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	60fb      	str	r3, [r7, #12]
}
 80060f0:	bf00      	nop
 80060f2:	e7fe      	b.n	80060f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	3318      	adds	r3, #24
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7ff f87d 	bl	80051f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060fe:	4b1d      	ldr	r3, [pc, #116]	; (8006174 <xTaskRemoveFromEventList+0xac>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d11c      	bne.n	8006140 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	3304      	adds	r3, #4
 800610a:	4618      	mov	r0, r3
 800610c:	f7ff f874 	bl	80051f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006114:	2201      	movs	r2, #1
 8006116:	409a      	lsls	r2, r3
 8006118:	4b17      	ldr	r3, [pc, #92]	; (8006178 <xTaskRemoveFromEventList+0xb0>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4313      	orrs	r3, r2
 800611e:	4a16      	ldr	r2, [pc, #88]	; (8006178 <xTaskRemoveFromEventList+0xb0>)
 8006120:	6013      	str	r3, [r2, #0]
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006126:	4613      	mov	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4413      	add	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4a13      	ldr	r2, [pc, #76]	; (800617c <xTaskRemoveFromEventList+0xb4>)
 8006130:	441a      	add	r2, r3
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	3304      	adds	r3, #4
 8006136:	4619      	mov	r1, r3
 8006138:	4610      	mov	r0, r2
 800613a:	f7ff f800 	bl	800513e <vListInsertEnd>
 800613e:	e005      	b.n	800614c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	3318      	adds	r3, #24
 8006144:	4619      	mov	r1, r3
 8006146:	480e      	ldr	r0, [pc, #56]	; (8006180 <xTaskRemoveFromEventList+0xb8>)
 8006148:	f7fe fff9 	bl	800513e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006150:	4b0c      	ldr	r3, [pc, #48]	; (8006184 <xTaskRemoveFromEventList+0xbc>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006156:	429a      	cmp	r2, r3
 8006158:	d905      	bls.n	8006166 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800615a:	2301      	movs	r3, #1
 800615c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800615e:	4b0a      	ldr	r3, [pc, #40]	; (8006188 <xTaskRemoveFromEventList+0xc0>)
 8006160:	2201      	movs	r2, #1
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	e001      	b.n	800616a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006166:	2300      	movs	r3, #0
 8006168:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800616a:	697b      	ldr	r3, [r7, #20]
}
 800616c:	4618      	mov	r0, r3
 800616e:	3718      	adds	r7, #24
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}
 8006174:	20000584 	.word	0x20000584
 8006178:	20000564 	.word	0x20000564
 800617c:	20000460 	.word	0x20000460
 8006180:	2000051c 	.word	0x2000051c
 8006184:	2000045c 	.word	0x2000045c
 8006188:	20000570 	.word	0x20000570

0800618c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006194:	4b06      	ldr	r3, [pc, #24]	; (80061b0 <vTaskInternalSetTimeOutState+0x24>)
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800619c:	4b05      	ldr	r3, [pc, #20]	; (80061b4 <vTaskInternalSetTimeOutState+0x28>)
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	605a      	str	r2, [r3, #4]
}
 80061a4:	bf00      	nop
 80061a6:	370c      	adds	r7, #12
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	20000574 	.word	0x20000574
 80061b4:	20000560 	.word	0x20000560

080061b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10a      	bne.n	80061de <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	613b      	str	r3, [r7, #16]
}
 80061da:	bf00      	nop
 80061dc:	e7fe      	b.n	80061dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10a      	bne.n	80061fa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80061e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e8:	f383 8811 	msr	BASEPRI, r3
 80061ec:	f3bf 8f6f 	isb	sy
 80061f0:	f3bf 8f4f 	dsb	sy
 80061f4:	60fb      	str	r3, [r7, #12]
}
 80061f6:	bf00      	nop
 80061f8:	e7fe      	b.n	80061f8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80061fa:	f000 fb5b 	bl	80068b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80061fe:	4b1d      	ldr	r3, [pc, #116]	; (8006274 <xTaskCheckForTimeOut+0xbc>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006216:	d102      	bne.n	800621e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006218:	2300      	movs	r3, #0
 800621a:	61fb      	str	r3, [r7, #28]
 800621c:	e023      	b.n	8006266 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	4b15      	ldr	r3, [pc, #84]	; (8006278 <xTaskCheckForTimeOut+0xc0>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	429a      	cmp	r2, r3
 8006228:	d007      	beq.n	800623a <xTaskCheckForTimeOut+0x82>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	429a      	cmp	r2, r3
 8006232:	d302      	bcc.n	800623a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006234:	2301      	movs	r3, #1
 8006236:	61fb      	str	r3, [r7, #28]
 8006238:	e015      	b.n	8006266 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	429a      	cmp	r2, r3
 8006242:	d20b      	bcs.n	800625c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	1ad2      	subs	r2, r2, r3
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f7ff ff9b 	bl	800618c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006256:	2300      	movs	r3, #0
 8006258:	61fb      	str	r3, [r7, #28]
 800625a:	e004      	b.n	8006266 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	2200      	movs	r2, #0
 8006260:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006262:	2301      	movs	r3, #1
 8006264:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006266:	f000 fb55 	bl	8006914 <vPortExitCritical>

	return xReturn;
 800626a:	69fb      	ldr	r3, [r7, #28]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3720      	adds	r7, #32
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	20000560 	.word	0x20000560
 8006278:	20000574 	.word	0x20000574

0800627c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800627c:	b480      	push	{r7}
 800627e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006280:	4b03      	ldr	r3, [pc, #12]	; (8006290 <vTaskMissedYield+0x14>)
 8006282:	2201      	movs	r2, #1
 8006284:	601a      	str	r2, [r3, #0]
}
 8006286:	bf00      	nop
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	20000570 	.word	0x20000570

08006294 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800629c:	f000 f852 	bl	8006344 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80062a0:	4b06      	ldr	r3, [pc, #24]	; (80062bc <prvIdleTask+0x28>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d9f9      	bls.n	800629c <prvIdleTask+0x8>
			{
				taskYIELD();
 80062a8:	4b05      	ldr	r3, [pc, #20]	; (80062c0 <prvIdleTask+0x2c>)
 80062aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ae:	601a      	str	r2, [r3, #0]
 80062b0:	f3bf 8f4f 	dsb	sy
 80062b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80062b8:	e7f0      	b.n	800629c <prvIdleTask+0x8>
 80062ba:	bf00      	nop
 80062bc:	20000460 	.word	0x20000460
 80062c0:	e000ed04 	.word	0xe000ed04

080062c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062ca:	2300      	movs	r3, #0
 80062cc:	607b      	str	r3, [r7, #4]
 80062ce:	e00c      	b.n	80062ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	4613      	mov	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	4413      	add	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4a12      	ldr	r2, [pc, #72]	; (8006324 <prvInitialiseTaskLists+0x60>)
 80062dc:	4413      	add	r3, r2
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fe ff00 	bl	80050e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	3301      	adds	r3, #1
 80062e8:	607b      	str	r3, [r7, #4]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b06      	cmp	r3, #6
 80062ee:	d9ef      	bls.n	80062d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80062f0:	480d      	ldr	r0, [pc, #52]	; (8006328 <prvInitialiseTaskLists+0x64>)
 80062f2:	f7fe fef7 	bl	80050e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80062f6:	480d      	ldr	r0, [pc, #52]	; (800632c <prvInitialiseTaskLists+0x68>)
 80062f8:	f7fe fef4 	bl	80050e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80062fc:	480c      	ldr	r0, [pc, #48]	; (8006330 <prvInitialiseTaskLists+0x6c>)
 80062fe:	f7fe fef1 	bl	80050e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006302:	480c      	ldr	r0, [pc, #48]	; (8006334 <prvInitialiseTaskLists+0x70>)
 8006304:	f7fe feee 	bl	80050e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006308:	480b      	ldr	r0, [pc, #44]	; (8006338 <prvInitialiseTaskLists+0x74>)
 800630a:	f7fe feeb 	bl	80050e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800630e:	4b0b      	ldr	r3, [pc, #44]	; (800633c <prvInitialiseTaskLists+0x78>)
 8006310:	4a05      	ldr	r2, [pc, #20]	; (8006328 <prvInitialiseTaskLists+0x64>)
 8006312:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006314:	4b0a      	ldr	r3, [pc, #40]	; (8006340 <prvInitialiseTaskLists+0x7c>)
 8006316:	4a05      	ldr	r2, [pc, #20]	; (800632c <prvInitialiseTaskLists+0x68>)
 8006318:	601a      	str	r2, [r3, #0]
}
 800631a:	bf00      	nop
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	20000460 	.word	0x20000460
 8006328:	200004ec 	.word	0x200004ec
 800632c:	20000500 	.word	0x20000500
 8006330:	2000051c 	.word	0x2000051c
 8006334:	20000530 	.word	0x20000530
 8006338:	20000548 	.word	0x20000548
 800633c:	20000514 	.word	0x20000514
 8006340:	20000518 	.word	0x20000518

08006344 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800634a:	e019      	b.n	8006380 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800634c:	f000 fab2 	bl	80068b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006350:	4b10      	ldr	r3, [pc, #64]	; (8006394 <prvCheckTasksWaitingTermination+0x50>)
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	3304      	adds	r3, #4
 800635c:	4618      	mov	r0, r3
 800635e:	f7fe ff4b 	bl	80051f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006362:	4b0d      	ldr	r3, [pc, #52]	; (8006398 <prvCheckTasksWaitingTermination+0x54>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3b01      	subs	r3, #1
 8006368:	4a0b      	ldr	r2, [pc, #44]	; (8006398 <prvCheckTasksWaitingTermination+0x54>)
 800636a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800636c:	4b0b      	ldr	r3, [pc, #44]	; (800639c <prvCheckTasksWaitingTermination+0x58>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	3b01      	subs	r3, #1
 8006372:	4a0a      	ldr	r2, [pc, #40]	; (800639c <prvCheckTasksWaitingTermination+0x58>)
 8006374:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006376:	f000 facd 	bl	8006914 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f810 	bl	80063a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006380:	4b06      	ldr	r3, [pc, #24]	; (800639c <prvCheckTasksWaitingTermination+0x58>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e1      	bne.n	800634c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006388:	bf00      	nop
 800638a:	bf00      	nop
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	20000530 	.word	0x20000530
 8006398:	2000055c 	.word	0x2000055c
 800639c:	20000544 	.word	0x20000544

080063a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d108      	bne.n	80063c4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 fc6a 	bl	8006c90 <vPortFree>
				vPortFree( pxTCB );
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f000 fc67 	bl	8006c90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80063c2:	e018      	b.n	80063f6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d103      	bne.n	80063d6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 fc5e 	bl	8006c90 <vPortFree>
	}
 80063d4:	e00f      	b.n	80063f6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d00a      	beq.n	80063f6 <prvDeleteTCB+0x56>
	__asm volatile
 80063e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e4:	f383 8811 	msr	BASEPRI, r3
 80063e8:	f3bf 8f6f 	isb	sy
 80063ec:	f3bf 8f4f 	dsb	sy
 80063f0:	60fb      	str	r3, [r7, #12]
}
 80063f2:	bf00      	nop
 80063f4:	e7fe      	b.n	80063f4 <prvDeleteTCB+0x54>
	}
 80063f6:	bf00      	nop
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
	...

08006400 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006406:	4b0c      	ldr	r3, [pc, #48]	; (8006438 <prvResetNextTaskUnblockTime+0x38>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d104      	bne.n	800641a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006410:	4b0a      	ldr	r3, [pc, #40]	; (800643c <prvResetNextTaskUnblockTime+0x3c>)
 8006412:	f04f 32ff 	mov.w	r2, #4294967295
 8006416:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006418:	e008      	b.n	800642c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800641a:	4b07      	ldr	r3, [pc, #28]	; (8006438 <prvResetNextTaskUnblockTime+0x38>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	4a04      	ldr	r2, [pc, #16]	; (800643c <prvResetNextTaskUnblockTime+0x3c>)
 800642a:	6013      	str	r3, [r2, #0]
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	20000514 	.word	0x20000514
 800643c:	2000057c 	.word	0x2000057c

08006440 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006446:	4b0b      	ldr	r3, [pc, #44]	; (8006474 <xTaskGetSchedulerState+0x34>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d102      	bne.n	8006454 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800644e:	2301      	movs	r3, #1
 8006450:	607b      	str	r3, [r7, #4]
 8006452:	e008      	b.n	8006466 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006454:	4b08      	ldr	r3, [pc, #32]	; (8006478 <xTaskGetSchedulerState+0x38>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d102      	bne.n	8006462 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800645c:	2302      	movs	r3, #2
 800645e:	607b      	str	r3, [r7, #4]
 8006460:	e001      	b.n	8006466 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006462:	2300      	movs	r3, #0
 8006464:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006466:	687b      	ldr	r3, [r7, #4]
	}
 8006468:	4618      	mov	r0, r3
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	20000568 	.word	0x20000568
 8006478:	20000584 	.word	0x20000584

0800647c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800647c:	b580      	push	{r7, lr}
 800647e:	b086      	sub	sp, #24
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006488:	2300      	movs	r3, #0
 800648a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d06e      	beq.n	8006570 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006492:	4b3a      	ldr	r3, [pc, #232]	; (800657c <xTaskPriorityDisinherit+0x100>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	429a      	cmp	r2, r3
 800649a:	d00a      	beq.n	80064b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800649c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a0:	f383 8811 	msr	BASEPRI, r3
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	60fb      	str	r3, [r7, #12]
}
 80064ae:	bf00      	nop
 80064b0:	e7fe      	b.n	80064b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d10a      	bne.n	80064d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80064ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064be:	f383 8811 	msr	BASEPRI, r3
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	f3bf 8f4f 	dsb	sy
 80064ca:	60bb      	str	r3, [r7, #8]
}
 80064cc:	bf00      	nop
 80064ce:	e7fe      	b.n	80064ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064d4:	1e5a      	subs	r2, r3, #1
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d044      	beq.n	8006570 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d140      	bne.n	8006570 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	3304      	adds	r3, #4
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7fe fe80 	bl	80051f8 <uxListRemove>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d115      	bne.n	800652a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006502:	491f      	ldr	r1, [pc, #124]	; (8006580 <xTaskPriorityDisinherit+0x104>)
 8006504:	4613      	mov	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	440b      	add	r3, r1
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d10a      	bne.n	800652a <xTaskPriorityDisinherit+0xae>
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006518:	2201      	movs	r2, #1
 800651a:	fa02 f303 	lsl.w	r3, r2, r3
 800651e:	43da      	mvns	r2, r3
 8006520:	4b18      	ldr	r3, [pc, #96]	; (8006584 <xTaskPriorityDisinherit+0x108>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4013      	ands	r3, r2
 8006526:	4a17      	ldr	r2, [pc, #92]	; (8006584 <xTaskPriorityDisinherit+0x108>)
 8006528:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006536:	f1c3 0207 	rsb	r2, r3, #7
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006542:	2201      	movs	r2, #1
 8006544:	409a      	lsls	r2, r3
 8006546:	4b0f      	ldr	r3, [pc, #60]	; (8006584 <xTaskPriorityDisinherit+0x108>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4313      	orrs	r3, r2
 800654c:	4a0d      	ldr	r2, [pc, #52]	; (8006584 <xTaskPriorityDisinherit+0x108>)
 800654e:	6013      	str	r3, [r2, #0]
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006554:	4613      	mov	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4a08      	ldr	r2, [pc, #32]	; (8006580 <xTaskPriorityDisinherit+0x104>)
 800655e:	441a      	add	r2, r3
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	3304      	adds	r3, #4
 8006564:	4619      	mov	r1, r3
 8006566:	4610      	mov	r0, r2
 8006568:	f7fe fde9 	bl	800513e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800656c:	2301      	movs	r3, #1
 800656e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006570:	697b      	ldr	r3, [r7, #20]
	}
 8006572:	4618      	mov	r0, r3
 8006574:	3718      	adds	r7, #24
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	2000045c 	.word	0x2000045c
 8006580:	20000460 	.word	0x20000460
 8006584:	20000564 	.word	0x20000564

08006588 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006592:	4b29      	ldr	r3, [pc, #164]	; (8006638 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006598:	4b28      	ldr	r3, [pc, #160]	; (800663c <prvAddCurrentTaskToDelayedList+0xb4>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	3304      	adds	r3, #4
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fe fe2a 	bl	80051f8 <uxListRemove>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10b      	bne.n	80065c2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80065aa:	4b24      	ldr	r3, [pc, #144]	; (800663c <prvAddCurrentTaskToDelayedList+0xb4>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b0:	2201      	movs	r2, #1
 80065b2:	fa02 f303 	lsl.w	r3, r2, r3
 80065b6:	43da      	mvns	r2, r3
 80065b8:	4b21      	ldr	r3, [pc, #132]	; (8006640 <prvAddCurrentTaskToDelayedList+0xb8>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4013      	ands	r3, r2
 80065be:	4a20      	ldr	r2, [pc, #128]	; (8006640 <prvAddCurrentTaskToDelayedList+0xb8>)
 80065c0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c8:	d10a      	bne.n	80065e0 <prvAddCurrentTaskToDelayedList+0x58>
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d007      	beq.n	80065e0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065d0:	4b1a      	ldr	r3, [pc, #104]	; (800663c <prvAddCurrentTaskToDelayedList+0xb4>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3304      	adds	r3, #4
 80065d6:	4619      	mov	r1, r3
 80065d8:	481a      	ldr	r0, [pc, #104]	; (8006644 <prvAddCurrentTaskToDelayedList+0xbc>)
 80065da:	f7fe fdb0 	bl	800513e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80065de:	e026      	b.n	800662e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4413      	add	r3, r2
 80065e6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80065e8:	4b14      	ldr	r3, [pc, #80]	; (800663c <prvAddCurrentTaskToDelayedList+0xb4>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68ba      	ldr	r2, [r7, #8]
 80065ee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80065f0:	68ba      	ldr	r2, [r7, #8]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d209      	bcs.n	800660c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065f8:	4b13      	ldr	r3, [pc, #76]	; (8006648 <prvAddCurrentTaskToDelayedList+0xc0>)
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	4b0f      	ldr	r3, [pc, #60]	; (800663c <prvAddCurrentTaskToDelayedList+0xb4>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3304      	adds	r3, #4
 8006602:	4619      	mov	r1, r3
 8006604:	4610      	mov	r0, r2
 8006606:	f7fe fdbe 	bl	8005186 <vListInsert>
}
 800660a:	e010      	b.n	800662e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800660c:	4b0f      	ldr	r3, [pc, #60]	; (800664c <prvAddCurrentTaskToDelayedList+0xc4>)
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	4b0a      	ldr	r3, [pc, #40]	; (800663c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	3304      	adds	r3, #4
 8006616:	4619      	mov	r1, r3
 8006618:	4610      	mov	r0, r2
 800661a:	f7fe fdb4 	bl	8005186 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800661e:	4b0c      	ldr	r3, [pc, #48]	; (8006650 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	429a      	cmp	r2, r3
 8006626:	d202      	bcs.n	800662e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006628:	4a09      	ldr	r2, [pc, #36]	; (8006650 <prvAddCurrentTaskToDelayedList+0xc8>)
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	6013      	str	r3, [r2, #0]
}
 800662e:	bf00      	nop
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	20000560 	.word	0x20000560
 800663c:	2000045c 	.word	0x2000045c
 8006640:	20000564 	.word	0x20000564
 8006644:	20000548 	.word	0x20000548
 8006648:	20000518 	.word	0x20000518
 800664c:	20000514 	.word	0x20000514
 8006650:	2000057c 	.word	0x2000057c

08006654 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006654:	b480      	push	{r7}
 8006656:	b085      	sub	sp, #20
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	3b04      	subs	r3, #4
 8006664:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800666c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	3b04      	subs	r3, #4
 8006672:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	f023 0201 	bic.w	r2, r3, #1
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	3b04      	subs	r3, #4
 8006682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006684:	4a0c      	ldr	r2, [pc, #48]	; (80066b8 <pxPortInitialiseStack+0x64>)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	3b14      	subs	r3, #20
 800668e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	3b04      	subs	r3, #4
 800669a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f06f 0202 	mvn.w	r2, #2
 80066a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	3b20      	subs	r3, #32
 80066a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066aa:	68fb      	ldr	r3, [r7, #12]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr
 80066b8:	080066bd 	.word	0x080066bd

080066bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80066c2:	2300      	movs	r3, #0
 80066c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80066c6:	4b12      	ldr	r3, [pc, #72]	; (8006710 <prvTaskExitError+0x54>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ce:	d00a      	beq.n	80066e6 <prvTaskExitError+0x2a>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	60fb      	str	r3, [r7, #12]
}
 80066e2:	bf00      	nop
 80066e4:	e7fe      	b.n	80066e4 <prvTaskExitError+0x28>
	__asm volatile
 80066e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	60bb      	str	r3, [r7, #8]
}
 80066f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80066fa:	bf00      	nop
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d0fc      	beq.n	80066fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006702:	bf00      	nop
 8006704:	bf00      	nop
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	2000000c 	.word	0x2000000c
	...

08006720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006720:	4b07      	ldr	r3, [pc, #28]	; (8006740 <pxCurrentTCBConst2>)
 8006722:	6819      	ldr	r1, [r3, #0]
 8006724:	6808      	ldr	r0, [r1, #0]
 8006726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800672a:	f380 8809 	msr	PSP, r0
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f04f 0000 	mov.w	r0, #0
 8006736:	f380 8811 	msr	BASEPRI, r0
 800673a:	4770      	bx	lr
 800673c:	f3af 8000 	nop.w

08006740 <pxCurrentTCBConst2>:
 8006740:	2000045c 	.word	0x2000045c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006744:	bf00      	nop
 8006746:	bf00      	nop

08006748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006748:	4808      	ldr	r0, [pc, #32]	; (800676c <prvPortStartFirstTask+0x24>)
 800674a:	6800      	ldr	r0, [r0, #0]
 800674c:	6800      	ldr	r0, [r0, #0]
 800674e:	f380 8808 	msr	MSP, r0
 8006752:	f04f 0000 	mov.w	r0, #0
 8006756:	f380 8814 	msr	CONTROL, r0
 800675a:	b662      	cpsie	i
 800675c:	b661      	cpsie	f
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	f3bf 8f6f 	isb	sy
 8006766:	df00      	svc	0
 8006768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800676a:	bf00      	nop
 800676c:	e000ed08 	.word	0xe000ed08

08006770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006776:	4b46      	ldr	r3, [pc, #280]	; (8006890 <xPortStartScheduler+0x120>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a46      	ldr	r2, [pc, #280]	; (8006894 <xPortStartScheduler+0x124>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d10a      	bne.n	8006796 <xPortStartScheduler+0x26>
	__asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	613b      	str	r3, [r7, #16]
}
 8006792:	bf00      	nop
 8006794:	e7fe      	b.n	8006794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006796:	4b3e      	ldr	r3, [pc, #248]	; (8006890 <xPortStartScheduler+0x120>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a3f      	ldr	r2, [pc, #252]	; (8006898 <xPortStartScheduler+0x128>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d10a      	bne.n	80067b6 <xPortStartScheduler+0x46>
	__asm volatile
 80067a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	60fb      	str	r3, [r7, #12]
}
 80067b2:	bf00      	nop
 80067b4:	e7fe      	b.n	80067b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067b6:	4b39      	ldr	r3, [pc, #228]	; (800689c <xPortStartScheduler+0x12c>)
 80067b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	22ff      	movs	r2, #255	; 0xff
 80067c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067d0:	78fb      	ldrb	r3, [r7, #3]
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	4b31      	ldr	r3, [pc, #196]	; (80068a0 <xPortStartScheduler+0x130>)
 80067dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80067de:	4b31      	ldr	r3, [pc, #196]	; (80068a4 <xPortStartScheduler+0x134>)
 80067e0:	2207      	movs	r2, #7
 80067e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067e4:	e009      	b.n	80067fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80067e6:	4b2f      	ldr	r3, [pc, #188]	; (80068a4 <xPortStartScheduler+0x134>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3b01      	subs	r3, #1
 80067ec:	4a2d      	ldr	r2, [pc, #180]	; (80068a4 <xPortStartScheduler+0x134>)
 80067ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80067f0:	78fb      	ldrb	r3, [r7, #3]
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	005b      	lsls	r3, r3, #1
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80067fa:	78fb      	ldrb	r3, [r7, #3]
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006802:	2b80      	cmp	r3, #128	; 0x80
 8006804:	d0ef      	beq.n	80067e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006806:	4b27      	ldr	r3, [pc, #156]	; (80068a4 <xPortStartScheduler+0x134>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f1c3 0307 	rsb	r3, r3, #7
 800680e:	2b04      	cmp	r3, #4
 8006810:	d00a      	beq.n	8006828 <xPortStartScheduler+0xb8>
	__asm volatile
 8006812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	60bb      	str	r3, [r7, #8]
}
 8006824:	bf00      	nop
 8006826:	e7fe      	b.n	8006826 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006828:	4b1e      	ldr	r3, [pc, #120]	; (80068a4 <xPortStartScheduler+0x134>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	021b      	lsls	r3, r3, #8
 800682e:	4a1d      	ldr	r2, [pc, #116]	; (80068a4 <xPortStartScheduler+0x134>)
 8006830:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006832:	4b1c      	ldr	r3, [pc, #112]	; (80068a4 <xPortStartScheduler+0x134>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800683a:	4a1a      	ldr	r2, [pc, #104]	; (80068a4 <xPortStartScheduler+0x134>)
 800683c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	b2da      	uxtb	r2, r3
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006846:	4b18      	ldr	r3, [pc, #96]	; (80068a8 <xPortStartScheduler+0x138>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a17      	ldr	r2, [pc, #92]	; (80068a8 <xPortStartScheduler+0x138>)
 800684c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006850:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006852:	4b15      	ldr	r3, [pc, #84]	; (80068a8 <xPortStartScheduler+0x138>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a14      	ldr	r2, [pc, #80]	; (80068a8 <xPortStartScheduler+0x138>)
 8006858:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800685c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800685e:	f000 f8dd 	bl	8006a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006862:	4b12      	ldr	r3, [pc, #72]	; (80068ac <xPortStartScheduler+0x13c>)
 8006864:	2200      	movs	r2, #0
 8006866:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006868:	f000 f8fc 	bl	8006a64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800686c:	4b10      	ldr	r3, [pc, #64]	; (80068b0 <xPortStartScheduler+0x140>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a0f      	ldr	r2, [pc, #60]	; (80068b0 <xPortStartScheduler+0x140>)
 8006872:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006876:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006878:	f7ff ff66 	bl	8006748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800687c:	f7ff fba4 	bl	8005fc8 <vTaskSwitchContext>
	prvTaskExitError();
 8006880:	f7ff ff1c 	bl	80066bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	e000ed00 	.word	0xe000ed00
 8006894:	410fc271 	.word	0x410fc271
 8006898:	410fc270 	.word	0x410fc270
 800689c:	e000e400 	.word	0xe000e400
 80068a0:	20000588 	.word	0x20000588
 80068a4:	2000058c 	.word	0x2000058c
 80068a8:	e000ed20 	.word	0xe000ed20
 80068ac:	2000000c 	.word	0x2000000c
 80068b0:	e000ef34 	.word	0xe000ef34

080068b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
	__asm volatile
 80068ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068be:	f383 8811 	msr	BASEPRI, r3
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	f3bf 8f4f 	dsb	sy
 80068ca:	607b      	str	r3, [r7, #4]
}
 80068cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80068ce:	4b0f      	ldr	r3, [pc, #60]	; (800690c <vPortEnterCritical+0x58>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	3301      	adds	r3, #1
 80068d4:	4a0d      	ldr	r2, [pc, #52]	; (800690c <vPortEnterCritical+0x58>)
 80068d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80068d8:	4b0c      	ldr	r3, [pc, #48]	; (800690c <vPortEnterCritical+0x58>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d10f      	bne.n	8006900 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80068e0:	4b0b      	ldr	r3, [pc, #44]	; (8006910 <vPortEnterCritical+0x5c>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d00a      	beq.n	8006900 <vPortEnterCritical+0x4c>
	__asm volatile
 80068ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ee:	f383 8811 	msr	BASEPRI, r3
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	603b      	str	r3, [r7, #0]
}
 80068fc:	bf00      	nop
 80068fe:	e7fe      	b.n	80068fe <vPortEnterCritical+0x4a>
	}
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr
 800690c:	2000000c 	.word	0x2000000c
 8006910:	e000ed04 	.word	0xe000ed04

08006914 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800691a:	4b12      	ldr	r3, [pc, #72]	; (8006964 <vPortExitCritical+0x50>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d10a      	bne.n	8006938 <vPortExitCritical+0x24>
	__asm volatile
 8006922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006926:	f383 8811 	msr	BASEPRI, r3
 800692a:	f3bf 8f6f 	isb	sy
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	607b      	str	r3, [r7, #4]
}
 8006934:	bf00      	nop
 8006936:	e7fe      	b.n	8006936 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006938:	4b0a      	ldr	r3, [pc, #40]	; (8006964 <vPortExitCritical+0x50>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	3b01      	subs	r3, #1
 800693e:	4a09      	ldr	r2, [pc, #36]	; (8006964 <vPortExitCritical+0x50>)
 8006940:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006942:	4b08      	ldr	r3, [pc, #32]	; (8006964 <vPortExitCritical+0x50>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d105      	bne.n	8006956 <vPortExitCritical+0x42>
 800694a:	2300      	movs	r3, #0
 800694c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	f383 8811 	msr	BASEPRI, r3
}
 8006954:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006956:	bf00      	nop
 8006958:	370c      	adds	r7, #12
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	2000000c 	.word	0x2000000c
	...

08006970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006970:	f3ef 8009 	mrs	r0, PSP
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	4b15      	ldr	r3, [pc, #84]	; (80069d0 <pxCurrentTCBConst>)
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	f01e 0f10 	tst.w	lr, #16
 8006980:	bf08      	it	eq
 8006982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800698a:	6010      	str	r0, [r2, #0]
 800698c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006990:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006994:	f380 8811 	msr	BASEPRI, r0
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f7ff fb12 	bl	8005fc8 <vTaskSwitchContext>
 80069a4:	f04f 0000 	mov.w	r0, #0
 80069a8:	f380 8811 	msr	BASEPRI, r0
 80069ac:	bc09      	pop	{r0, r3}
 80069ae:	6819      	ldr	r1, [r3, #0]
 80069b0:	6808      	ldr	r0, [r1, #0]
 80069b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b6:	f01e 0f10 	tst.w	lr, #16
 80069ba:	bf08      	it	eq
 80069bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80069c0:	f380 8809 	msr	PSP, r0
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	f3af 8000 	nop.w

080069d0 <pxCurrentTCBConst>:
 80069d0:	2000045c 	.word	0x2000045c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80069d4:	bf00      	nop
 80069d6:	bf00      	nop

080069d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
	__asm volatile
 80069de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	607b      	str	r3, [r7, #4]
}
 80069f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80069f2:	f7ff fa31 	bl	8005e58 <xTaskIncrementTick>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d003      	beq.n	8006a04 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80069fc:	4b06      	ldr	r3, [pc, #24]	; (8006a18 <SysTick_Handler+0x40>)
 80069fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	2300      	movs	r3, #0
 8006a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	f383 8811 	msr	BASEPRI, r3
}
 8006a0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a10:	bf00      	nop
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	e000ed04 	.word	0xe000ed04

08006a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a20:	4b0b      	ldr	r3, [pc, #44]	; (8006a50 <vPortSetupTimerInterrupt+0x34>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a26:	4b0b      	ldr	r3, [pc, #44]	; (8006a54 <vPortSetupTimerInterrupt+0x38>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a2c:	4b0a      	ldr	r3, [pc, #40]	; (8006a58 <vPortSetupTimerInterrupt+0x3c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a0a      	ldr	r2, [pc, #40]	; (8006a5c <vPortSetupTimerInterrupt+0x40>)
 8006a32:	fba2 2303 	umull	r2, r3, r2, r3
 8006a36:	099b      	lsrs	r3, r3, #6
 8006a38:	4a09      	ldr	r2, [pc, #36]	; (8006a60 <vPortSetupTimerInterrupt+0x44>)
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a3e:	4b04      	ldr	r3, [pc, #16]	; (8006a50 <vPortSetupTimerInterrupt+0x34>)
 8006a40:	2207      	movs	r2, #7
 8006a42:	601a      	str	r2, [r3, #0]
}
 8006a44:	bf00      	nop
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	e000e010 	.word	0xe000e010
 8006a54:	e000e018 	.word	0xe000e018
 8006a58:	20000000 	.word	0x20000000
 8006a5c:	10624dd3 	.word	0x10624dd3
 8006a60:	e000e014 	.word	0xe000e014

08006a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006a64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006a74 <vPortEnableVFP+0x10>
 8006a68:	6801      	ldr	r1, [r0, #0]
 8006a6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006a6e:	6001      	str	r1, [r0, #0]
 8006a70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006a72:	bf00      	nop
 8006a74:	e000ed88 	.word	0xe000ed88

08006a78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a7e:	f3ef 8305 	mrs	r3, IPSR
 8006a82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2b0f      	cmp	r3, #15
 8006a88:	d914      	bls.n	8006ab4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a8a:	4a17      	ldr	r2, [pc, #92]	; (8006ae8 <vPortValidateInterruptPriority+0x70>)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4413      	add	r3, r2
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a94:	4b15      	ldr	r3, [pc, #84]	; (8006aec <vPortValidateInterruptPriority+0x74>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	7afa      	ldrb	r2, [r7, #11]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d20a      	bcs.n	8006ab4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	607b      	str	r3, [r7, #4]
}
 8006ab0:	bf00      	nop
 8006ab2:	e7fe      	b.n	8006ab2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006ab4:	4b0e      	ldr	r3, [pc, #56]	; (8006af0 <vPortValidateInterruptPriority+0x78>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006abc:	4b0d      	ldr	r3, [pc, #52]	; (8006af4 <vPortValidateInterruptPriority+0x7c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d90a      	bls.n	8006ada <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	603b      	str	r3, [r7, #0]
}
 8006ad6:	bf00      	nop
 8006ad8:	e7fe      	b.n	8006ad8 <vPortValidateInterruptPriority+0x60>
	}
 8006ada:	bf00      	nop
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	e000e3f0 	.word	0xe000e3f0
 8006aec:	20000588 	.word	0x20000588
 8006af0:	e000ed0c 	.word	0xe000ed0c
 8006af4:	2000058c 	.word	0x2000058c

08006af8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08a      	sub	sp, #40	; 0x28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b00:	2300      	movs	r3, #0
 8006b02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b04:	f7ff f8fe 	bl	8005d04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b08:	4b5b      	ldr	r3, [pc, #364]	; (8006c78 <pvPortMalloc+0x180>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b10:	f000 f920 	bl	8006d54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b14:	4b59      	ldr	r3, [pc, #356]	; (8006c7c <pvPortMalloc+0x184>)
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f040 8093 	bne.w	8006c48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d01d      	beq.n	8006b64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006b28:	2208      	movs	r2, #8
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f003 0307 	and.w	r3, r3, #7
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d014      	beq.n	8006b64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f023 0307 	bic.w	r3, r3, #7
 8006b40:	3308      	adds	r3, #8
 8006b42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f003 0307 	and.w	r3, r3, #7
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00a      	beq.n	8006b64 <pvPortMalloc+0x6c>
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	617b      	str	r3, [r7, #20]
}
 8006b60:	bf00      	nop
 8006b62:	e7fe      	b.n	8006b62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d06e      	beq.n	8006c48 <pvPortMalloc+0x150>
 8006b6a:	4b45      	ldr	r3, [pc, #276]	; (8006c80 <pvPortMalloc+0x188>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d869      	bhi.n	8006c48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b74:	4b43      	ldr	r3, [pc, #268]	; (8006c84 <pvPortMalloc+0x18c>)
 8006b76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b78:	4b42      	ldr	r3, [pc, #264]	; (8006c84 <pvPortMalloc+0x18c>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b7e:	e004      	b.n	8006b8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d903      	bls.n	8006b9c <pvPortMalloc+0xa4>
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1f1      	bne.n	8006b80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b9c:	4b36      	ldr	r3, [pc, #216]	; (8006c78 <pvPortMalloc+0x180>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d050      	beq.n	8006c48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ba6:	6a3b      	ldr	r3, [r7, #32]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2208      	movs	r2, #8
 8006bac:	4413      	add	r3, r2
 8006bae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	6a3b      	ldr	r3, [r7, #32]
 8006bb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	1ad2      	subs	r2, r2, r3
 8006bc0:	2308      	movs	r3, #8
 8006bc2:	005b      	lsls	r3, r3, #1
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d91f      	bls.n	8006c08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4413      	add	r3, r2
 8006bce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	f003 0307 	and.w	r3, r3, #7
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00a      	beq.n	8006bf0 <pvPortMalloc+0xf8>
	__asm volatile
 8006bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bde:	f383 8811 	msr	BASEPRI, r3
 8006be2:	f3bf 8f6f 	isb	sy
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	613b      	str	r3, [r7, #16]
}
 8006bec:	bf00      	nop
 8006bee:	e7fe      	b.n	8006bee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	1ad2      	subs	r2, r2, r3
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c02:	69b8      	ldr	r0, [r7, #24]
 8006c04:	f000 f908 	bl	8006e18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c08:	4b1d      	ldr	r3, [pc, #116]	; (8006c80 <pvPortMalloc+0x188>)
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	4a1b      	ldr	r2, [pc, #108]	; (8006c80 <pvPortMalloc+0x188>)
 8006c14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c16:	4b1a      	ldr	r3, [pc, #104]	; (8006c80 <pvPortMalloc+0x188>)
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	4b1b      	ldr	r3, [pc, #108]	; (8006c88 <pvPortMalloc+0x190>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d203      	bcs.n	8006c2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c22:	4b17      	ldr	r3, [pc, #92]	; (8006c80 <pvPortMalloc+0x188>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a18      	ldr	r2, [pc, #96]	; (8006c88 <pvPortMalloc+0x190>)
 8006c28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	685a      	ldr	r2, [r3, #4]
 8006c2e:	4b13      	ldr	r3, [pc, #76]	; (8006c7c <pvPortMalloc+0x184>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	431a      	orrs	r2, r3
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c3e:	4b13      	ldr	r3, [pc, #76]	; (8006c8c <pvPortMalloc+0x194>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	3301      	adds	r3, #1
 8006c44:	4a11      	ldr	r2, [pc, #68]	; (8006c8c <pvPortMalloc+0x194>)
 8006c46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c48:	f7ff f86a 	bl	8005d20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	f003 0307 	and.w	r3, r3, #7
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00a      	beq.n	8006c6c <pvPortMalloc+0x174>
	__asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	60fb      	str	r3, [r7, #12]
}
 8006c68:	bf00      	nop
 8006c6a:	e7fe      	b.n	8006c6a <pvPortMalloc+0x172>
	return pvReturn;
 8006c6c:	69fb      	ldr	r3, [r7, #28]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3728      	adds	r7, #40	; 0x28
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20004198 	.word	0x20004198
 8006c7c:	200041ac 	.word	0x200041ac
 8006c80:	2000419c 	.word	0x2000419c
 8006c84:	20004190 	.word	0x20004190
 8006c88:	200041a0 	.word	0x200041a0
 8006c8c:	200041a4 	.word	0x200041a4

08006c90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d04d      	beq.n	8006d3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ca2:	2308      	movs	r3, #8
 8006ca4:	425b      	negs	r3, r3
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	4413      	add	r3, r2
 8006caa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	685a      	ldr	r2, [r3, #4]
 8006cb4:	4b24      	ldr	r3, [pc, #144]	; (8006d48 <vPortFree+0xb8>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4013      	ands	r3, r2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10a      	bne.n	8006cd4 <vPortFree+0x44>
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	60fb      	str	r3, [r7, #12]
}
 8006cd0:	bf00      	nop
 8006cd2:	e7fe      	b.n	8006cd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00a      	beq.n	8006cf2 <vPortFree+0x62>
	__asm volatile
 8006cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce0:	f383 8811 	msr	BASEPRI, r3
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	60bb      	str	r3, [r7, #8]
}
 8006cee:	bf00      	nop
 8006cf0:	e7fe      	b.n	8006cf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	685a      	ldr	r2, [r3, #4]
 8006cf6:	4b14      	ldr	r3, [pc, #80]	; (8006d48 <vPortFree+0xb8>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d01e      	beq.n	8006d3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d11a      	bne.n	8006d3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	4b0e      	ldr	r3, [pc, #56]	; (8006d48 <vPortFree+0xb8>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	43db      	mvns	r3, r3
 8006d12:	401a      	ands	r2, r3
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d18:	f7fe fff4 	bl	8005d04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	4b0a      	ldr	r3, [pc, #40]	; (8006d4c <vPortFree+0xbc>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4413      	add	r3, r2
 8006d26:	4a09      	ldr	r2, [pc, #36]	; (8006d4c <vPortFree+0xbc>)
 8006d28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d2a:	6938      	ldr	r0, [r7, #16]
 8006d2c:	f000 f874 	bl	8006e18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006d30:	4b07      	ldr	r3, [pc, #28]	; (8006d50 <vPortFree+0xc0>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	3301      	adds	r3, #1
 8006d36:	4a06      	ldr	r2, [pc, #24]	; (8006d50 <vPortFree+0xc0>)
 8006d38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d3a:	f7fe fff1 	bl	8005d20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d3e:	bf00      	nop
 8006d40:	3718      	adds	r7, #24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	200041ac 	.word	0x200041ac
 8006d4c:	2000419c 	.word	0x2000419c
 8006d50:	200041a8 	.word	0x200041a8

08006d54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006d5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006d5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d60:	4b27      	ldr	r3, [pc, #156]	; (8006e00 <prvHeapInit+0xac>)
 8006d62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f003 0307 	and.w	r3, r3, #7
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00c      	beq.n	8006d88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	3307      	adds	r3, #7
 8006d72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f023 0307 	bic.w	r3, r3, #7
 8006d7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	4a1f      	ldr	r2, [pc, #124]	; (8006e00 <prvHeapInit+0xac>)
 8006d84:	4413      	add	r3, r2
 8006d86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d8c:	4a1d      	ldr	r2, [pc, #116]	; (8006e04 <prvHeapInit+0xb0>)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d92:	4b1c      	ldr	r3, [pc, #112]	; (8006e04 <prvHeapInit+0xb0>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006da0:	2208      	movs	r2, #8
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	1a9b      	subs	r3, r3, r2
 8006da6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f023 0307 	bic.w	r3, r3, #7
 8006dae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4a15      	ldr	r2, [pc, #84]	; (8006e08 <prvHeapInit+0xb4>)
 8006db4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006db6:	4b14      	ldr	r3, [pc, #80]	; (8006e08 <prvHeapInit+0xb4>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006dbe:	4b12      	ldr	r3, [pc, #72]	; (8006e08 <prvHeapInit+0xb4>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	1ad2      	subs	r2, r2, r3
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006dd4:	4b0c      	ldr	r3, [pc, #48]	; (8006e08 <prvHeapInit+0xb4>)
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	4a0a      	ldr	r2, [pc, #40]	; (8006e0c <prvHeapInit+0xb8>)
 8006de2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	4a09      	ldr	r2, [pc, #36]	; (8006e10 <prvHeapInit+0xbc>)
 8006dea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006dec:	4b09      	ldr	r3, [pc, #36]	; (8006e14 <prvHeapInit+0xc0>)
 8006dee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006df2:	601a      	str	r2, [r3, #0]
}
 8006df4:	bf00      	nop
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	20000590 	.word	0x20000590
 8006e04:	20004190 	.word	0x20004190
 8006e08:	20004198 	.word	0x20004198
 8006e0c:	200041a0 	.word	0x200041a0
 8006e10:	2000419c 	.word	0x2000419c
 8006e14:	200041ac 	.word	0x200041ac

08006e18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e20:	4b28      	ldr	r3, [pc, #160]	; (8006ec4 <prvInsertBlockIntoFreeList+0xac>)
 8006e22:	60fb      	str	r3, [r7, #12]
 8006e24:	e002      	b.n	8006e2c <prvInsertBlockIntoFreeList+0x14>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	60fb      	str	r3, [r7, #12]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d8f7      	bhi.n	8006e26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	4413      	add	r3, r2
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d108      	bne.n	8006e5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	441a      	add	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	441a      	add	r2, r3
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d118      	bne.n	8006ea0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	4b15      	ldr	r3, [pc, #84]	; (8006ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d00d      	beq.n	8006e96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	441a      	add	r2, r3
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	601a      	str	r2, [r3, #0]
 8006e94:	e008      	b.n	8006ea8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e96:	4b0c      	ldr	r3, [pc, #48]	; (8006ec8 <prvInsertBlockIntoFreeList+0xb0>)
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	601a      	str	r2, [r3, #0]
 8006e9e:	e003      	b.n	8006ea8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ea8:	68fa      	ldr	r2, [r7, #12]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d002      	beq.n	8006eb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006eb6:	bf00      	nop
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	20004190 	.word	0x20004190
 8006ec8:	20004198 	.word	0x20004198

08006ecc <__errno>:
 8006ecc:	4b01      	ldr	r3, [pc, #4]	; (8006ed4 <__errno+0x8>)
 8006ece:	6818      	ldr	r0, [r3, #0]
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	20000010 	.word	0x20000010

08006ed8 <__libc_init_array>:
 8006ed8:	b570      	push	{r4, r5, r6, lr}
 8006eda:	4d0d      	ldr	r5, [pc, #52]	; (8006f10 <__libc_init_array+0x38>)
 8006edc:	4c0d      	ldr	r4, [pc, #52]	; (8006f14 <__libc_init_array+0x3c>)
 8006ede:	1b64      	subs	r4, r4, r5
 8006ee0:	10a4      	asrs	r4, r4, #2
 8006ee2:	2600      	movs	r6, #0
 8006ee4:	42a6      	cmp	r6, r4
 8006ee6:	d109      	bne.n	8006efc <__libc_init_array+0x24>
 8006ee8:	4d0b      	ldr	r5, [pc, #44]	; (8006f18 <__libc_init_array+0x40>)
 8006eea:	4c0c      	ldr	r4, [pc, #48]	; (8006f1c <__libc_init_array+0x44>)
 8006eec:	f002 fddc 	bl	8009aa8 <_init>
 8006ef0:	1b64      	subs	r4, r4, r5
 8006ef2:	10a4      	asrs	r4, r4, #2
 8006ef4:	2600      	movs	r6, #0
 8006ef6:	42a6      	cmp	r6, r4
 8006ef8:	d105      	bne.n	8006f06 <__libc_init_array+0x2e>
 8006efa:	bd70      	pop	{r4, r5, r6, pc}
 8006efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f00:	4798      	blx	r3
 8006f02:	3601      	adds	r6, #1
 8006f04:	e7ee      	b.n	8006ee4 <__libc_init_array+0xc>
 8006f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f0a:	4798      	blx	r3
 8006f0c:	3601      	adds	r6, #1
 8006f0e:	e7f2      	b.n	8006ef6 <__libc_init_array+0x1e>
 8006f10:	0800a048 	.word	0x0800a048
 8006f14:	0800a048 	.word	0x0800a048
 8006f18:	0800a048 	.word	0x0800a048
 8006f1c:	0800a04c 	.word	0x0800a04c

08006f20 <memcpy>:
 8006f20:	440a      	add	r2, r1
 8006f22:	4291      	cmp	r1, r2
 8006f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f28:	d100      	bne.n	8006f2c <memcpy+0xc>
 8006f2a:	4770      	bx	lr
 8006f2c:	b510      	push	{r4, lr}
 8006f2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f36:	4291      	cmp	r1, r2
 8006f38:	d1f9      	bne.n	8006f2e <memcpy+0xe>
 8006f3a:	bd10      	pop	{r4, pc}

08006f3c <memset>:
 8006f3c:	4402      	add	r2, r0
 8006f3e:	4603      	mov	r3, r0
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d100      	bne.n	8006f46 <memset+0xa>
 8006f44:	4770      	bx	lr
 8006f46:	f803 1b01 	strb.w	r1, [r3], #1
 8006f4a:	e7f9      	b.n	8006f40 <memset+0x4>

08006f4c <__cvt>:
 8006f4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f50:	ec55 4b10 	vmov	r4, r5, d0
 8006f54:	2d00      	cmp	r5, #0
 8006f56:	460e      	mov	r6, r1
 8006f58:	4619      	mov	r1, r3
 8006f5a:	462b      	mov	r3, r5
 8006f5c:	bfbb      	ittet	lt
 8006f5e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006f62:	461d      	movlt	r5, r3
 8006f64:	2300      	movge	r3, #0
 8006f66:	232d      	movlt	r3, #45	; 0x2d
 8006f68:	700b      	strb	r3, [r1, #0]
 8006f6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f6c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006f70:	4691      	mov	r9, r2
 8006f72:	f023 0820 	bic.w	r8, r3, #32
 8006f76:	bfbc      	itt	lt
 8006f78:	4622      	movlt	r2, r4
 8006f7a:	4614      	movlt	r4, r2
 8006f7c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f80:	d005      	beq.n	8006f8e <__cvt+0x42>
 8006f82:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f86:	d100      	bne.n	8006f8a <__cvt+0x3e>
 8006f88:	3601      	adds	r6, #1
 8006f8a:	2102      	movs	r1, #2
 8006f8c:	e000      	b.n	8006f90 <__cvt+0x44>
 8006f8e:	2103      	movs	r1, #3
 8006f90:	ab03      	add	r3, sp, #12
 8006f92:	9301      	str	r3, [sp, #4]
 8006f94:	ab02      	add	r3, sp, #8
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	ec45 4b10 	vmov	d0, r4, r5
 8006f9c:	4653      	mov	r3, sl
 8006f9e:	4632      	mov	r2, r6
 8006fa0:	f000 fe92 	bl	8007cc8 <_dtoa_r>
 8006fa4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006fa8:	4607      	mov	r7, r0
 8006faa:	d102      	bne.n	8006fb2 <__cvt+0x66>
 8006fac:	f019 0f01 	tst.w	r9, #1
 8006fb0:	d022      	beq.n	8006ff8 <__cvt+0xac>
 8006fb2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006fb6:	eb07 0906 	add.w	r9, r7, r6
 8006fba:	d110      	bne.n	8006fde <__cvt+0x92>
 8006fbc:	783b      	ldrb	r3, [r7, #0]
 8006fbe:	2b30      	cmp	r3, #48	; 0x30
 8006fc0:	d10a      	bne.n	8006fd8 <__cvt+0x8c>
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	4629      	mov	r1, r5
 8006fca:	f7f9 fd7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fce:	b918      	cbnz	r0, 8006fd8 <__cvt+0x8c>
 8006fd0:	f1c6 0601 	rsb	r6, r6, #1
 8006fd4:	f8ca 6000 	str.w	r6, [sl]
 8006fd8:	f8da 3000 	ldr.w	r3, [sl]
 8006fdc:	4499      	add	r9, r3
 8006fde:	2200      	movs	r2, #0
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	4629      	mov	r1, r5
 8006fe6:	f7f9 fd6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fea:	b108      	cbz	r0, 8006ff0 <__cvt+0xa4>
 8006fec:	f8cd 900c 	str.w	r9, [sp, #12]
 8006ff0:	2230      	movs	r2, #48	; 0x30
 8006ff2:	9b03      	ldr	r3, [sp, #12]
 8006ff4:	454b      	cmp	r3, r9
 8006ff6:	d307      	bcc.n	8007008 <__cvt+0xbc>
 8006ff8:	9b03      	ldr	r3, [sp, #12]
 8006ffa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ffc:	1bdb      	subs	r3, r3, r7
 8006ffe:	4638      	mov	r0, r7
 8007000:	6013      	str	r3, [r2, #0]
 8007002:	b004      	add	sp, #16
 8007004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007008:	1c59      	adds	r1, r3, #1
 800700a:	9103      	str	r1, [sp, #12]
 800700c:	701a      	strb	r2, [r3, #0]
 800700e:	e7f0      	b.n	8006ff2 <__cvt+0xa6>

08007010 <__exponent>:
 8007010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007012:	4603      	mov	r3, r0
 8007014:	2900      	cmp	r1, #0
 8007016:	bfb8      	it	lt
 8007018:	4249      	neglt	r1, r1
 800701a:	f803 2b02 	strb.w	r2, [r3], #2
 800701e:	bfb4      	ite	lt
 8007020:	222d      	movlt	r2, #45	; 0x2d
 8007022:	222b      	movge	r2, #43	; 0x2b
 8007024:	2909      	cmp	r1, #9
 8007026:	7042      	strb	r2, [r0, #1]
 8007028:	dd2a      	ble.n	8007080 <__exponent+0x70>
 800702a:	f10d 0407 	add.w	r4, sp, #7
 800702e:	46a4      	mov	ip, r4
 8007030:	270a      	movs	r7, #10
 8007032:	46a6      	mov	lr, r4
 8007034:	460a      	mov	r2, r1
 8007036:	fb91 f6f7 	sdiv	r6, r1, r7
 800703a:	fb07 1516 	mls	r5, r7, r6, r1
 800703e:	3530      	adds	r5, #48	; 0x30
 8007040:	2a63      	cmp	r2, #99	; 0x63
 8007042:	f104 34ff 	add.w	r4, r4, #4294967295
 8007046:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800704a:	4631      	mov	r1, r6
 800704c:	dcf1      	bgt.n	8007032 <__exponent+0x22>
 800704e:	3130      	adds	r1, #48	; 0x30
 8007050:	f1ae 0502 	sub.w	r5, lr, #2
 8007054:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007058:	1c44      	adds	r4, r0, #1
 800705a:	4629      	mov	r1, r5
 800705c:	4561      	cmp	r1, ip
 800705e:	d30a      	bcc.n	8007076 <__exponent+0x66>
 8007060:	f10d 0209 	add.w	r2, sp, #9
 8007064:	eba2 020e 	sub.w	r2, r2, lr
 8007068:	4565      	cmp	r5, ip
 800706a:	bf88      	it	hi
 800706c:	2200      	movhi	r2, #0
 800706e:	4413      	add	r3, r2
 8007070:	1a18      	subs	r0, r3, r0
 8007072:	b003      	add	sp, #12
 8007074:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007076:	f811 2b01 	ldrb.w	r2, [r1], #1
 800707a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800707e:	e7ed      	b.n	800705c <__exponent+0x4c>
 8007080:	2330      	movs	r3, #48	; 0x30
 8007082:	3130      	adds	r1, #48	; 0x30
 8007084:	7083      	strb	r3, [r0, #2]
 8007086:	70c1      	strb	r1, [r0, #3]
 8007088:	1d03      	adds	r3, r0, #4
 800708a:	e7f1      	b.n	8007070 <__exponent+0x60>

0800708c <_printf_float>:
 800708c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007090:	ed2d 8b02 	vpush	{d8}
 8007094:	b08d      	sub	sp, #52	; 0x34
 8007096:	460c      	mov	r4, r1
 8007098:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800709c:	4616      	mov	r6, r2
 800709e:	461f      	mov	r7, r3
 80070a0:	4605      	mov	r5, r0
 80070a2:	f001 fdc7 	bl	8008c34 <_localeconv_r>
 80070a6:	f8d0 a000 	ldr.w	sl, [r0]
 80070aa:	4650      	mov	r0, sl
 80070ac:	f7f9 f890 	bl	80001d0 <strlen>
 80070b0:	2300      	movs	r3, #0
 80070b2:	930a      	str	r3, [sp, #40]	; 0x28
 80070b4:	6823      	ldr	r3, [r4, #0]
 80070b6:	9305      	str	r3, [sp, #20]
 80070b8:	f8d8 3000 	ldr.w	r3, [r8]
 80070bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80070c0:	3307      	adds	r3, #7
 80070c2:	f023 0307 	bic.w	r3, r3, #7
 80070c6:	f103 0208 	add.w	r2, r3, #8
 80070ca:	f8c8 2000 	str.w	r2, [r8]
 80070ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80070d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80070da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80070de:	9307      	str	r3, [sp, #28]
 80070e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80070e4:	ee08 0a10 	vmov	s16, r0
 80070e8:	4b9f      	ldr	r3, [pc, #636]	; (8007368 <_printf_float+0x2dc>)
 80070ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070ee:	f04f 32ff 	mov.w	r2, #4294967295
 80070f2:	f7f9 fd1b 	bl	8000b2c <__aeabi_dcmpun>
 80070f6:	bb88      	cbnz	r0, 800715c <_printf_float+0xd0>
 80070f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070fc:	4b9a      	ldr	r3, [pc, #616]	; (8007368 <_printf_float+0x2dc>)
 80070fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007102:	f7f9 fcf5 	bl	8000af0 <__aeabi_dcmple>
 8007106:	bb48      	cbnz	r0, 800715c <_printf_float+0xd0>
 8007108:	2200      	movs	r2, #0
 800710a:	2300      	movs	r3, #0
 800710c:	4640      	mov	r0, r8
 800710e:	4649      	mov	r1, r9
 8007110:	f7f9 fce4 	bl	8000adc <__aeabi_dcmplt>
 8007114:	b110      	cbz	r0, 800711c <_printf_float+0x90>
 8007116:	232d      	movs	r3, #45	; 0x2d
 8007118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800711c:	4b93      	ldr	r3, [pc, #588]	; (800736c <_printf_float+0x2e0>)
 800711e:	4894      	ldr	r0, [pc, #592]	; (8007370 <_printf_float+0x2e4>)
 8007120:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007124:	bf94      	ite	ls
 8007126:	4698      	movls	r8, r3
 8007128:	4680      	movhi	r8, r0
 800712a:	2303      	movs	r3, #3
 800712c:	6123      	str	r3, [r4, #16]
 800712e:	9b05      	ldr	r3, [sp, #20]
 8007130:	f023 0204 	bic.w	r2, r3, #4
 8007134:	6022      	str	r2, [r4, #0]
 8007136:	f04f 0900 	mov.w	r9, #0
 800713a:	9700      	str	r7, [sp, #0]
 800713c:	4633      	mov	r3, r6
 800713e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007140:	4621      	mov	r1, r4
 8007142:	4628      	mov	r0, r5
 8007144:	f000 f9d8 	bl	80074f8 <_printf_common>
 8007148:	3001      	adds	r0, #1
 800714a:	f040 8090 	bne.w	800726e <_printf_float+0x1e2>
 800714e:	f04f 30ff 	mov.w	r0, #4294967295
 8007152:	b00d      	add	sp, #52	; 0x34
 8007154:	ecbd 8b02 	vpop	{d8}
 8007158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800715c:	4642      	mov	r2, r8
 800715e:	464b      	mov	r3, r9
 8007160:	4640      	mov	r0, r8
 8007162:	4649      	mov	r1, r9
 8007164:	f7f9 fce2 	bl	8000b2c <__aeabi_dcmpun>
 8007168:	b140      	cbz	r0, 800717c <_printf_float+0xf0>
 800716a:	464b      	mov	r3, r9
 800716c:	2b00      	cmp	r3, #0
 800716e:	bfbc      	itt	lt
 8007170:	232d      	movlt	r3, #45	; 0x2d
 8007172:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007176:	487f      	ldr	r0, [pc, #508]	; (8007374 <_printf_float+0x2e8>)
 8007178:	4b7f      	ldr	r3, [pc, #508]	; (8007378 <_printf_float+0x2ec>)
 800717a:	e7d1      	b.n	8007120 <_printf_float+0x94>
 800717c:	6863      	ldr	r3, [r4, #4]
 800717e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007182:	9206      	str	r2, [sp, #24]
 8007184:	1c5a      	adds	r2, r3, #1
 8007186:	d13f      	bne.n	8007208 <_printf_float+0x17c>
 8007188:	2306      	movs	r3, #6
 800718a:	6063      	str	r3, [r4, #4]
 800718c:	9b05      	ldr	r3, [sp, #20]
 800718e:	6861      	ldr	r1, [r4, #4]
 8007190:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007194:	2300      	movs	r3, #0
 8007196:	9303      	str	r3, [sp, #12]
 8007198:	ab0a      	add	r3, sp, #40	; 0x28
 800719a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800719e:	ab09      	add	r3, sp, #36	; 0x24
 80071a0:	ec49 8b10 	vmov	d0, r8, r9
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	6022      	str	r2, [r4, #0]
 80071a8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80071ac:	4628      	mov	r0, r5
 80071ae:	f7ff fecd 	bl	8006f4c <__cvt>
 80071b2:	9b06      	ldr	r3, [sp, #24]
 80071b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071b6:	2b47      	cmp	r3, #71	; 0x47
 80071b8:	4680      	mov	r8, r0
 80071ba:	d108      	bne.n	80071ce <_printf_float+0x142>
 80071bc:	1cc8      	adds	r0, r1, #3
 80071be:	db02      	blt.n	80071c6 <_printf_float+0x13a>
 80071c0:	6863      	ldr	r3, [r4, #4]
 80071c2:	4299      	cmp	r1, r3
 80071c4:	dd41      	ble.n	800724a <_printf_float+0x1be>
 80071c6:	f1ab 0b02 	sub.w	fp, fp, #2
 80071ca:	fa5f fb8b 	uxtb.w	fp, fp
 80071ce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80071d2:	d820      	bhi.n	8007216 <_printf_float+0x18a>
 80071d4:	3901      	subs	r1, #1
 80071d6:	465a      	mov	r2, fp
 80071d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80071dc:	9109      	str	r1, [sp, #36]	; 0x24
 80071de:	f7ff ff17 	bl	8007010 <__exponent>
 80071e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071e4:	1813      	adds	r3, r2, r0
 80071e6:	2a01      	cmp	r2, #1
 80071e8:	4681      	mov	r9, r0
 80071ea:	6123      	str	r3, [r4, #16]
 80071ec:	dc02      	bgt.n	80071f4 <_printf_float+0x168>
 80071ee:	6822      	ldr	r2, [r4, #0]
 80071f0:	07d2      	lsls	r2, r2, #31
 80071f2:	d501      	bpl.n	80071f8 <_printf_float+0x16c>
 80071f4:	3301      	adds	r3, #1
 80071f6:	6123      	str	r3, [r4, #16]
 80071f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d09c      	beq.n	800713a <_printf_float+0xae>
 8007200:	232d      	movs	r3, #45	; 0x2d
 8007202:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007206:	e798      	b.n	800713a <_printf_float+0xae>
 8007208:	9a06      	ldr	r2, [sp, #24]
 800720a:	2a47      	cmp	r2, #71	; 0x47
 800720c:	d1be      	bne.n	800718c <_printf_float+0x100>
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1bc      	bne.n	800718c <_printf_float+0x100>
 8007212:	2301      	movs	r3, #1
 8007214:	e7b9      	b.n	800718a <_printf_float+0xfe>
 8007216:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800721a:	d118      	bne.n	800724e <_printf_float+0x1c2>
 800721c:	2900      	cmp	r1, #0
 800721e:	6863      	ldr	r3, [r4, #4]
 8007220:	dd0b      	ble.n	800723a <_printf_float+0x1ae>
 8007222:	6121      	str	r1, [r4, #16]
 8007224:	b913      	cbnz	r3, 800722c <_printf_float+0x1a0>
 8007226:	6822      	ldr	r2, [r4, #0]
 8007228:	07d0      	lsls	r0, r2, #31
 800722a:	d502      	bpl.n	8007232 <_printf_float+0x1a6>
 800722c:	3301      	adds	r3, #1
 800722e:	440b      	add	r3, r1
 8007230:	6123      	str	r3, [r4, #16]
 8007232:	65a1      	str	r1, [r4, #88]	; 0x58
 8007234:	f04f 0900 	mov.w	r9, #0
 8007238:	e7de      	b.n	80071f8 <_printf_float+0x16c>
 800723a:	b913      	cbnz	r3, 8007242 <_printf_float+0x1b6>
 800723c:	6822      	ldr	r2, [r4, #0]
 800723e:	07d2      	lsls	r2, r2, #31
 8007240:	d501      	bpl.n	8007246 <_printf_float+0x1ba>
 8007242:	3302      	adds	r3, #2
 8007244:	e7f4      	b.n	8007230 <_printf_float+0x1a4>
 8007246:	2301      	movs	r3, #1
 8007248:	e7f2      	b.n	8007230 <_printf_float+0x1a4>
 800724a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800724e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007250:	4299      	cmp	r1, r3
 8007252:	db05      	blt.n	8007260 <_printf_float+0x1d4>
 8007254:	6823      	ldr	r3, [r4, #0]
 8007256:	6121      	str	r1, [r4, #16]
 8007258:	07d8      	lsls	r0, r3, #31
 800725a:	d5ea      	bpl.n	8007232 <_printf_float+0x1a6>
 800725c:	1c4b      	adds	r3, r1, #1
 800725e:	e7e7      	b.n	8007230 <_printf_float+0x1a4>
 8007260:	2900      	cmp	r1, #0
 8007262:	bfd4      	ite	le
 8007264:	f1c1 0202 	rsble	r2, r1, #2
 8007268:	2201      	movgt	r2, #1
 800726a:	4413      	add	r3, r2
 800726c:	e7e0      	b.n	8007230 <_printf_float+0x1a4>
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	055a      	lsls	r2, r3, #21
 8007272:	d407      	bmi.n	8007284 <_printf_float+0x1f8>
 8007274:	6923      	ldr	r3, [r4, #16]
 8007276:	4642      	mov	r2, r8
 8007278:	4631      	mov	r1, r6
 800727a:	4628      	mov	r0, r5
 800727c:	47b8      	blx	r7
 800727e:	3001      	adds	r0, #1
 8007280:	d12c      	bne.n	80072dc <_printf_float+0x250>
 8007282:	e764      	b.n	800714e <_printf_float+0xc2>
 8007284:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007288:	f240 80e0 	bls.w	800744c <_printf_float+0x3c0>
 800728c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007290:	2200      	movs	r2, #0
 8007292:	2300      	movs	r3, #0
 8007294:	f7f9 fc18 	bl	8000ac8 <__aeabi_dcmpeq>
 8007298:	2800      	cmp	r0, #0
 800729a:	d034      	beq.n	8007306 <_printf_float+0x27a>
 800729c:	4a37      	ldr	r2, [pc, #220]	; (800737c <_printf_float+0x2f0>)
 800729e:	2301      	movs	r3, #1
 80072a0:	4631      	mov	r1, r6
 80072a2:	4628      	mov	r0, r5
 80072a4:	47b8      	blx	r7
 80072a6:	3001      	adds	r0, #1
 80072a8:	f43f af51 	beq.w	800714e <_printf_float+0xc2>
 80072ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072b0:	429a      	cmp	r2, r3
 80072b2:	db02      	blt.n	80072ba <_printf_float+0x22e>
 80072b4:	6823      	ldr	r3, [r4, #0]
 80072b6:	07d8      	lsls	r0, r3, #31
 80072b8:	d510      	bpl.n	80072dc <_printf_float+0x250>
 80072ba:	ee18 3a10 	vmov	r3, s16
 80072be:	4652      	mov	r2, sl
 80072c0:	4631      	mov	r1, r6
 80072c2:	4628      	mov	r0, r5
 80072c4:	47b8      	blx	r7
 80072c6:	3001      	adds	r0, #1
 80072c8:	f43f af41 	beq.w	800714e <_printf_float+0xc2>
 80072cc:	f04f 0800 	mov.w	r8, #0
 80072d0:	f104 091a 	add.w	r9, r4, #26
 80072d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072d6:	3b01      	subs	r3, #1
 80072d8:	4543      	cmp	r3, r8
 80072da:	dc09      	bgt.n	80072f0 <_printf_float+0x264>
 80072dc:	6823      	ldr	r3, [r4, #0]
 80072de:	079b      	lsls	r3, r3, #30
 80072e0:	f100 8105 	bmi.w	80074ee <_printf_float+0x462>
 80072e4:	68e0      	ldr	r0, [r4, #12]
 80072e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072e8:	4298      	cmp	r0, r3
 80072ea:	bfb8      	it	lt
 80072ec:	4618      	movlt	r0, r3
 80072ee:	e730      	b.n	8007152 <_printf_float+0xc6>
 80072f0:	2301      	movs	r3, #1
 80072f2:	464a      	mov	r2, r9
 80072f4:	4631      	mov	r1, r6
 80072f6:	4628      	mov	r0, r5
 80072f8:	47b8      	blx	r7
 80072fa:	3001      	adds	r0, #1
 80072fc:	f43f af27 	beq.w	800714e <_printf_float+0xc2>
 8007300:	f108 0801 	add.w	r8, r8, #1
 8007304:	e7e6      	b.n	80072d4 <_printf_float+0x248>
 8007306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007308:	2b00      	cmp	r3, #0
 800730a:	dc39      	bgt.n	8007380 <_printf_float+0x2f4>
 800730c:	4a1b      	ldr	r2, [pc, #108]	; (800737c <_printf_float+0x2f0>)
 800730e:	2301      	movs	r3, #1
 8007310:	4631      	mov	r1, r6
 8007312:	4628      	mov	r0, r5
 8007314:	47b8      	blx	r7
 8007316:	3001      	adds	r0, #1
 8007318:	f43f af19 	beq.w	800714e <_printf_float+0xc2>
 800731c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007320:	4313      	orrs	r3, r2
 8007322:	d102      	bne.n	800732a <_printf_float+0x29e>
 8007324:	6823      	ldr	r3, [r4, #0]
 8007326:	07d9      	lsls	r1, r3, #31
 8007328:	d5d8      	bpl.n	80072dc <_printf_float+0x250>
 800732a:	ee18 3a10 	vmov	r3, s16
 800732e:	4652      	mov	r2, sl
 8007330:	4631      	mov	r1, r6
 8007332:	4628      	mov	r0, r5
 8007334:	47b8      	blx	r7
 8007336:	3001      	adds	r0, #1
 8007338:	f43f af09 	beq.w	800714e <_printf_float+0xc2>
 800733c:	f04f 0900 	mov.w	r9, #0
 8007340:	f104 0a1a 	add.w	sl, r4, #26
 8007344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007346:	425b      	negs	r3, r3
 8007348:	454b      	cmp	r3, r9
 800734a:	dc01      	bgt.n	8007350 <_printf_float+0x2c4>
 800734c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800734e:	e792      	b.n	8007276 <_printf_float+0x1ea>
 8007350:	2301      	movs	r3, #1
 8007352:	4652      	mov	r2, sl
 8007354:	4631      	mov	r1, r6
 8007356:	4628      	mov	r0, r5
 8007358:	47b8      	blx	r7
 800735a:	3001      	adds	r0, #1
 800735c:	f43f aef7 	beq.w	800714e <_printf_float+0xc2>
 8007360:	f109 0901 	add.w	r9, r9, #1
 8007364:	e7ee      	b.n	8007344 <_printf_float+0x2b8>
 8007366:	bf00      	nop
 8007368:	7fefffff 	.word	0x7fefffff
 800736c:	08009bfc 	.word	0x08009bfc
 8007370:	08009c00 	.word	0x08009c00
 8007374:	08009c08 	.word	0x08009c08
 8007378:	08009c04 	.word	0x08009c04
 800737c:	08009c0c 	.word	0x08009c0c
 8007380:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007382:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007384:	429a      	cmp	r2, r3
 8007386:	bfa8      	it	ge
 8007388:	461a      	movge	r2, r3
 800738a:	2a00      	cmp	r2, #0
 800738c:	4691      	mov	r9, r2
 800738e:	dc37      	bgt.n	8007400 <_printf_float+0x374>
 8007390:	f04f 0b00 	mov.w	fp, #0
 8007394:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007398:	f104 021a 	add.w	r2, r4, #26
 800739c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800739e:	9305      	str	r3, [sp, #20]
 80073a0:	eba3 0309 	sub.w	r3, r3, r9
 80073a4:	455b      	cmp	r3, fp
 80073a6:	dc33      	bgt.n	8007410 <_printf_float+0x384>
 80073a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073ac:	429a      	cmp	r2, r3
 80073ae:	db3b      	blt.n	8007428 <_printf_float+0x39c>
 80073b0:	6823      	ldr	r3, [r4, #0]
 80073b2:	07da      	lsls	r2, r3, #31
 80073b4:	d438      	bmi.n	8007428 <_printf_float+0x39c>
 80073b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073b8:	9b05      	ldr	r3, [sp, #20]
 80073ba:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	eba2 0901 	sub.w	r9, r2, r1
 80073c2:	4599      	cmp	r9, r3
 80073c4:	bfa8      	it	ge
 80073c6:	4699      	movge	r9, r3
 80073c8:	f1b9 0f00 	cmp.w	r9, #0
 80073cc:	dc35      	bgt.n	800743a <_printf_float+0x3ae>
 80073ce:	f04f 0800 	mov.w	r8, #0
 80073d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073d6:	f104 0a1a 	add.w	sl, r4, #26
 80073da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073de:	1a9b      	subs	r3, r3, r2
 80073e0:	eba3 0309 	sub.w	r3, r3, r9
 80073e4:	4543      	cmp	r3, r8
 80073e6:	f77f af79 	ble.w	80072dc <_printf_float+0x250>
 80073ea:	2301      	movs	r3, #1
 80073ec:	4652      	mov	r2, sl
 80073ee:	4631      	mov	r1, r6
 80073f0:	4628      	mov	r0, r5
 80073f2:	47b8      	blx	r7
 80073f4:	3001      	adds	r0, #1
 80073f6:	f43f aeaa 	beq.w	800714e <_printf_float+0xc2>
 80073fa:	f108 0801 	add.w	r8, r8, #1
 80073fe:	e7ec      	b.n	80073da <_printf_float+0x34e>
 8007400:	4613      	mov	r3, r2
 8007402:	4631      	mov	r1, r6
 8007404:	4642      	mov	r2, r8
 8007406:	4628      	mov	r0, r5
 8007408:	47b8      	blx	r7
 800740a:	3001      	adds	r0, #1
 800740c:	d1c0      	bne.n	8007390 <_printf_float+0x304>
 800740e:	e69e      	b.n	800714e <_printf_float+0xc2>
 8007410:	2301      	movs	r3, #1
 8007412:	4631      	mov	r1, r6
 8007414:	4628      	mov	r0, r5
 8007416:	9205      	str	r2, [sp, #20]
 8007418:	47b8      	blx	r7
 800741a:	3001      	adds	r0, #1
 800741c:	f43f ae97 	beq.w	800714e <_printf_float+0xc2>
 8007420:	9a05      	ldr	r2, [sp, #20]
 8007422:	f10b 0b01 	add.w	fp, fp, #1
 8007426:	e7b9      	b.n	800739c <_printf_float+0x310>
 8007428:	ee18 3a10 	vmov	r3, s16
 800742c:	4652      	mov	r2, sl
 800742e:	4631      	mov	r1, r6
 8007430:	4628      	mov	r0, r5
 8007432:	47b8      	blx	r7
 8007434:	3001      	adds	r0, #1
 8007436:	d1be      	bne.n	80073b6 <_printf_float+0x32a>
 8007438:	e689      	b.n	800714e <_printf_float+0xc2>
 800743a:	9a05      	ldr	r2, [sp, #20]
 800743c:	464b      	mov	r3, r9
 800743e:	4442      	add	r2, r8
 8007440:	4631      	mov	r1, r6
 8007442:	4628      	mov	r0, r5
 8007444:	47b8      	blx	r7
 8007446:	3001      	adds	r0, #1
 8007448:	d1c1      	bne.n	80073ce <_printf_float+0x342>
 800744a:	e680      	b.n	800714e <_printf_float+0xc2>
 800744c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800744e:	2a01      	cmp	r2, #1
 8007450:	dc01      	bgt.n	8007456 <_printf_float+0x3ca>
 8007452:	07db      	lsls	r3, r3, #31
 8007454:	d538      	bpl.n	80074c8 <_printf_float+0x43c>
 8007456:	2301      	movs	r3, #1
 8007458:	4642      	mov	r2, r8
 800745a:	4631      	mov	r1, r6
 800745c:	4628      	mov	r0, r5
 800745e:	47b8      	blx	r7
 8007460:	3001      	adds	r0, #1
 8007462:	f43f ae74 	beq.w	800714e <_printf_float+0xc2>
 8007466:	ee18 3a10 	vmov	r3, s16
 800746a:	4652      	mov	r2, sl
 800746c:	4631      	mov	r1, r6
 800746e:	4628      	mov	r0, r5
 8007470:	47b8      	blx	r7
 8007472:	3001      	adds	r0, #1
 8007474:	f43f ae6b 	beq.w	800714e <_printf_float+0xc2>
 8007478:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800747c:	2200      	movs	r2, #0
 800747e:	2300      	movs	r3, #0
 8007480:	f7f9 fb22 	bl	8000ac8 <__aeabi_dcmpeq>
 8007484:	b9d8      	cbnz	r0, 80074be <_printf_float+0x432>
 8007486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007488:	f108 0201 	add.w	r2, r8, #1
 800748c:	3b01      	subs	r3, #1
 800748e:	4631      	mov	r1, r6
 8007490:	4628      	mov	r0, r5
 8007492:	47b8      	blx	r7
 8007494:	3001      	adds	r0, #1
 8007496:	d10e      	bne.n	80074b6 <_printf_float+0x42a>
 8007498:	e659      	b.n	800714e <_printf_float+0xc2>
 800749a:	2301      	movs	r3, #1
 800749c:	4652      	mov	r2, sl
 800749e:	4631      	mov	r1, r6
 80074a0:	4628      	mov	r0, r5
 80074a2:	47b8      	blx	r7
 80074a4:	3001      	adds	r0, #1
 80074a6:	f43f ae52 	beq.w	800714e <_printf_float+0xc2>
 80074aa:	f108 0801 	add.w	r8, r8, #1
 80074ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074b0:	3b01      	subs	r3, #1
 80074b2:	4543      	cmp	r3, r8
 80074b4:	dcf1      	bgt.n	800749a <_printf_float+0x40e>
 80074b6:	464b      	mov	r3, r9
 80074b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80074bc:	e6dc      	b.n	8007278 <_printf_float+0x1ec>
 80074be:	f04f 0800 	mov.w	r8, #0
 80074c2:	f104 0a1a 	add.w	sl, r4, #26
 80074c6:	e7f2      	b.n	80074ae <_printf_float+0x422>
 80074c8:	2301      	movs	r3, #1
 80074ca:	4642      	mov	r2, r8
 80074cc:	e7df      	b.n	800748e <_printf_float+0x402>
 80074ce:	2301      	movs	r3, #1
 80074d0:	464a      	mov	r2, r9
 80074d2:	4631      	mov	r1, r6
 80074d4:	4628      	mov	r0, r5
 80074d6:	47b8      	blx	r7
 80074d8:	3001      	adds	r0, #1
 80074da:	f43f ae38 	beq.w	800714e <_printf_float+0xc2>
 80074de:	f108 0801 	add.w	r8, r8, #1
 80074e2:	68e3      	ldr	r3, [r4, #12]
 80074e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074e6:	1a5b      	subs	r3, r3, r1
 80074e8:	4543      	cmp	r3, r8
 80074ea:	dcf0      	bgt.n	80074ce <_printf_float+0x442>
 80074ec:	e6fa      	b.n	80072e4 <_printf_float+0x258>
 80074ee:	f04f 0800 	mov.w	r8, #0
 80074f2:	f104 0919 	add.w	r9, r4, #25
 80074f6:	e7f4      	b.n	80074e2 <_printf_float+0x456>

080074f8 <_printf_common>:
 80074f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074fc:	4616      	mov	r6, r2
 80074fe:	4699      	mov	r9, r3
 8007500:	688a      	ldr	r2, [r1, #8]
 8007502:	690b      	ldr	r3, [r1, #16]
 8007504:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007508:	4293      	cmp	r3, r2
 800750a:	bfb8      	it	lt
 800750c:	4613      	movlt	r3, r2
 800750e:	6033      	str	r3, [r6, #0]
 8007510:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007514:	4607      	mov	r7, r0
 8007516:	460c      	mov	r4, r1
 8007518:	b10a      	cbz	r2, 800751e <_printf_common+0x26>
 800751a:	3301      	adds	r3, #1
 800751c:	6033      	str	r3, [r6, #0]
 800751e:	6823      	ldr	r3, [r4, #0]
 8007520:	0699      	lsls	r1, r3, #26
 8007522:	bf42      	ittt	mi
 8007524:	6833      	ldrmi	r3, [r6, #0]
 8007526:	3302      	addmi	r3, #2
 8007528:	6033      	strmi	r3, [r6, #0]
 800752a:	6825      	ldr	r5, [r4, #0]
 800752c:	f015 0506 	ands.w	r5, r5, #6
 8007530:	d106      	bne.n	8007540 <_printf_common+0x48>
 8007532:	f104 0a19 	add.w	sl, r4, #25
 8007536:	68e3      	ldr	r3, [r4, #12]
 8007538:	6832      	ldr	r2, [r6, #0]
 800753a:	1a9b      	subs	r3, r3, r2
 800753c:	42ab      	cmp	r3, r5
 800753e:	dc26      	bgt.n	800758e <_printf_common+0x96>
 8007540:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007544:	1e13      	subs	r3, r2, #0
 8007546:	6822      	ldr	r2, [r4, #0]
 8007548:	bf18      	it	ne
 800754a:	2301      	movne	r3, #1
 800754c:	0692      	lsls	r2, r2, #26
 800754e:	d42b      	bmi.n	80075a8 <_printf_common+0xb0>
 8007550:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007554:	4649      	mov	r1, r9
 8007556:	4638      	mov	r0, r7
 8007558:	47c0      	blx	r8
 800755a:	3001      	adds	r0, #1
 800755c:	d01e      	beq.n	800759c <_printf_common+0xa4>
 800755e:	6823      	ldr	r3, [r4, #0]
 8007560:	68e5      	ldr	r5, [r4, #12]
 8007562:	6832      	ldr	r2, [r6, #0]
 8007564:	f003 0306 	and.w	r3, r3, #6
 8007568:	2b04      	cmp	r3, #4
 800756a:	bf08      	it	eq
 800756c:	1aad      	subeq	r5, r5, r2
 800756e:	68a3      	ldr	r3, [r4, #8]
 8007570:	6922      	ldr	r2, [r4, #16]
 8007572:	bf0c      	ite	eq
 8007574:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007578:	2500      	movne	r5, #0
 800757a:	4293      	cmp	r3, r2
 800757c:	bfc4      	itt	gt
 800757e:	1a9b      	subgt	r3, r3, r2
 8007580:	18ed      	addgt	r5, r5, r3
 8007582:	2600      	movs	r6, #0
 8007584:	341a      	adds	r4, #26
 8007586:	42b5      	cmp	r5, r6
 8007588:	d11a      	bne.n	80075c0 <_printf_common+0xc8>
 800758a:	2000      	movs	r0, #0
 800758c:	e008      	b.n	80075a0 <_printf_common+0xa8>
 800758e:	2301      	movs	r3, #1
 8007590:	4652      	mov	r2, sl
 8007592:	4649      	mov	r1, r9
 8007594:	4638      	mov	r0, r7
 8007596:	47c0      	blx	r8
 8007598:	3001      	adds	r0, #1
 800759a:	d103      	bne.n	80075a4 <_printf_common+0xac>
 800759c:	f04f 30ff 	mov.w	r0, #4294967295
 80075a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a4:	3501      	adds	r5, #1
 80075a6:	e7c6      	b.n	8007536 <_printf_common+0x3e>
 80075a8:	18e1      	adds	r1, r4, r3
 80075aa:	1c5a      	adds	r2, r3, #1
 80075ac:	2030      	movs	r0, #48	; 0x30
 80075ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075b2:	4422      	add	r2, r4
 80075b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075bc:	3302      	adds	r3, #2
 80075be:	e7c7      	b.n	8007550 <_printf_common+0x58>
 80075c0:	2301      	movs	r3, #1
 80075c2:	4622      	mov	r2, r4
 80075c4:	4649      	mov	r1, r9
 80075c6:	4638      	mov	r0, r7
 80075c8:	47c0      	blx	r8
 80075ca:	3001      	adds	r0, #1
 80075cc:	d0e6      	beq.n	800759c <_printf_common+0xa4>
 80075ce:	3601      	adds	r6, #1
 80075d0:	e7d9      	b.n	8007586 <_printf_common+0x8e>
	...

080075d4 <_printf_i>:
 80075d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075d8:	460c      	mov	r4, r1
 80075da:	4691      	mov	r9, r2
 80075dc:	7e27      	ldrb	r7, [r4, #24]
 80075de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80075e0:	2f78      	cmp	r7, #120	; 0x78
 80075e2:	4680      	mov	r8, r0
 80075e4:	469a      	mov	sl, r3
 80075e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80075ea:	d807      	bhi.n	80075fc <_printf_i+0x28>
 80075ec:	2f62      	cmp	r7, #98	; 0x62
 80075ee:	d80a      	bhi.n	8007606 <_printf_i+0x32>
 80075f0:	2f00      	cmp	r7, #0
 80075f2:	f000 80d8 	beq.w	80077a6 <_printf_i+0x1d2>
 80075f6:	2f58      	cmp	r7, #88	; 0x58
 80075f8:	f000 80a3 	beq.w	8007742 <_printf_i+0x16e>
 80075fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007600:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007604:	e03a      	b.n	800767c <_printf_i+0xa8>
 8007606:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800760a:	2b15      	cmp	r3, #21
 800760c:	d8f6      	bhi.n	80075fc <_printf_i+0x28>
 800760e:	a001      	add	r0, pc, #4	; (adr r0, 8007614 <_printf_i+0x40>)
 8007610:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007614:	0800766d 	.word	0x0800766d
 8007618:	08007681 	.word	0x08007681
 800761c:	080075fd 	.word	0x080075fd
 8007620:	080075fd 	.word	0x080075fd
 8007624:	080075fd 	.word	0x080075fd
 8007628:	080075fd 	.word	0x080075fd
 800762c:	08007681 	.word	0x08007681
 8007630:	080075fd 	.word	0x080075fd
 8007634:	080075fd 	.word	0x080075fd
 8007638:	080075fd 	.word	0x080075fd
 800763c:	080075fd 	.word	0x080075fd
 8007640:	0800778d 	.word	0x0800778d
 8007644:	080076b1 	.word	0x080076b1
 8007648:	0800776f 	.word	0x0800776f
 800764c:	080075fd 	.word	0x080075fd
 8007650:	080075fd 	.word	0x080075fd
 8007654:	080077af 	.word	0x080077af
 8007658:	080075fd 	.word	0x080075fd
 800765c:	080076b1 	.word	0x080076b1
 8007660:	080075fd 	.word	0x080075fd
 8007664:	080075fd 	.word	0x080075fd
 8007668:	08007777 	.word	0x08007777
 800766c:	680b      	ldr	r3, [r1, #0]
 800766e:	1d1a      	adds	r2, r3, #4
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	600a      	str	r2, [r1, #0]
 8007674:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007678:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800767c:	2301      	movs	r3, #1
 800767e:	e0a3      	b.n	80077c8 <_printf_i+0x1f4>
 8007680:	6825      	ldr	r5, [r4, #0]
 8007682:	6808      	ldr	r0, [r1, #0]
 8007684:	062e      	lsls	r6, r5, #24
 8007686:	f100 0304 	add.w	r3, r0, #4
 800768a:	d50a      	bpl.n	80076a2 <_printf_i+0xce>
 800768c:	6805      	ldr	r5, [r0, #0]
 800768e:	600b      	str	r3, [r1, #0]
 8007690:	2d00      	cmp	r5, #0
 8007692:	da03      	bge.n	800769c <_printf_i+0xc8>
 8007694:	232d      	movs	r3, #45	; 0x2d
 8007696:	426d      	negs	r5, r5
 8007698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800769c:	485e      	ldr	r0, [pc, #376]	; (8007818 <_printf_i+0x244>)
 800769e:	230a      	movs	r3, #10
 80076a0:	e019      	b.n	80076d6 <_printf_i+0x102>
 80076a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80076a6:	6805      	ldr	r5, [r0, #0]
 80076a8:	600b      	str	r3, [r1, #0]
 80076aa:	bf18      	it	ne
 80076ac:	b22d      	sxthne	r5, r5
 80076ae:	e7ef      	b.n	8007690 <_printf_i+0xbc>
 80076b0:	680b      	ldr	r3, [r1, #0]
 80076b2:	6825      	ldr	r5, [r4, #0]
 80076b4:	1d18      	adds	r0, r3, #4
 80076b6:	6008      	str	r0, [r1, #0]
 80076b8:	0628      	lsls	r0, r5, #24
 80076ba:	d501      	bpl.n	80076c0 <_printf_i+0xec>
 80076bc:	681d      	ldr	r5, [r3, #0]
 80076be:	e002      	b.n	80076c6 <_printf_i+0xf2>
 80076c0:	0669      	lsls	r1, r5, #25
 80076c2:	d5fb      	bpl.n	80076bc <_printf_i+0xe8>
 80076c4:	881d      	ldrh	r5, [r3, #0]
 80076c6:	4854      	ldr	r0, [pc, #336]	; (8007818 <_printf_i+0x244>)
 80076c8:	2f6f      	cmp	r7, #111	; 0x6f
 80076ca:	bf0c      	ite	eq
 80076cc:	2308      	moveq	r3, #8
 80076ce:	230a      	movne	r3, #10
 80076d0:	2100      	movs	r1, #0
 80076d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076d6:	6866      	ldr	r6, [r4, #4]
 80076d8:	60a6      	str	r6, [r4, #8]
 80076da:	2e00      	cmp	r6, #0
 80076dc:	bfa2      	ittt	ge
 80076de:	6821      	ldrge	r1, [r4, #0]
 80076e0:	f021 0104 	bicge.w	r1, r1, #4
 80076e4:	6021      	strge	r1, [r4, #0]
 80076e6:	b90d      	cbnz	r5, 80076ec <_printf_i+0x118>
 80076e8:	2e00      	cmp	r6, #0
 80076ea:	d04d      	beq.n	8007788 <_printf_i+0x1b4>
 80076ec:	4616      	mov	r6, r2
 80076ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80076f2:	fb03 5711 	mls	r7, r3, r1, r5
 80076f6:	5dc7      	ldrb	r7, [r0, r7]
 80076f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076fc:	462f      	mov	r7, r5
 80076fe:	42bb      	cmp	r3, r7
 8007700:	460d      	mov	r5, r1
 8007702:	d9f4      	bls.n	80076ee <_printf_i+0x11a>
 8007704:	2b08      	cmp	r3, #8
 8007706:	d10b      	bne.n	8007720 <_printf_i+0x14c>
 8007708:	6823      	ldr	r3, [r4, #0]
 800770a:	07df      	lsls	r7, r3, #31
 800770c:	d508      	bpl.n	8007720 <_printf_i+0x14c>
 800770e:	6923      	ldr	r3, [r4, #16]
 8007710:	6861      	ldr	r1, [r4, #4]
 8007712:	4299      	cmp	r1, r3
 8007714:	bfde      	ittt	le
 8007716:	2330      	movle	r3, #48	; 0x30
 8007718:	f806 3c01 	strble.w	r3, [r6, #-1]
 800771c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007720:	1b92      	subs	r2, r2, r6
 8007722:	6122      	str	r2, [r4, #16]
 8007724:	f8cd a000 	str.w	sl, [sp]
 8007728:	464b      	mov	r3, r9
 800772a:	aa03      	add	r2, sp, #12
 800772c:	4621      	mov	r1, r4
 800772e:	4640      	mov	r0, r8
 8007730:	f7ff fee2 	bl	80074f8 <_printf_common>
 8007734:	3001      	adds	r0, #1
 8007736:	d14c      	bne.n	80077d2 <_printf_i+0x1fe>
 8007738:	f04f 30ff 	mov.w	r0, #4294967295
 800773c:	b004      	add	sp, #16
 800773e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007742:	4835      	ldr	r0, [pc, #212]	; (8007818 <_printf_i+0x244>)
 8007744:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007748:	6823      	ldr	r3, [r4, #0]
 800774a:	680e      	ldr	r6, [r1, #0]
 800774c:	061f      	lsls	r7, r3, #24
 800774e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007752:	600e      	str	r6, [r1, #0]
 8007754:	d514      	bpl.n	8007780 <_printf_i+0x1ac>
 8007756:	07d9      	lsls	r1, r3, #31
 8007758:	bf44      	itt	mi
 800775a:	f043 0320 	orrmi.w	r3, r3, #32
 800775e:	6023      	strmi	r3, [r4, #0]
 8007760:	b91d      	cbnz	r5, 800776a <_printf_i+0x196>
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	f023 0320 	bic.w	r3, r3, #32
 8007768:	6023      	str	r3, [r4, #0]
 800776a:	2310      	movs	r3, #16
 800776c:	e7b0      	b.n	80076d0 <_printf_i+0xfc>
 800776e:	6823      	ldr	r3, [r4, #0]
 8007770:	f043 0320 	orr.w	r3, r3, #32
 8007774:	6023      	str	r3, [r4, #0]
 8007776:	2378      	movs	r3, #120	; 0x78
 8007778:	4828      	ldr	r0, [pc, #160]	; (800781c <_printf_i+0x248>)
 800777a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800777e:	e7e3      	b.n	8007748 <_printf_i+0x174>
 8007780:	065e      	lsls	r6, r3, #25
 8007782:	bf48      	it	mi
 8007784:	b2ad      	uxthmi	r5, r5
 8007786:	e7e6      	b.n	8007756 <_printf_i+0x182>
 8007788:	4616      	mov	r6, r2
 800778a:	e7bb      	b.n	8007704 <_printf_i+0x130>
 800778c:	680b      	ldr	r3, [r1, #0]
 800778e:	6826      	ldr	r6, [r4, #0]
 8007790:	6960      	ldr	r0, [r4, #20]
 8007792:	1d1d      	adds	r5, r3, #4
 8007794:	600d      	str	r5, [r1, #0]
 8007796:	0635      	lsls	r5, r6, #24
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	d501      	bpl.n	80077a0 <_printf_i+0x1cc>
 800779c:	6018      	str	r0, [r3, #0]
 800779e:	e002      	b.n	80077a6 <_printf_i+0x1d2>
 80077a0:	0671      	lsls	r1, r6, #25
 80077a2:	d5fb      	bpl.n	800779c <_printf_i+0x1c8>
 80077a4:	8018      	strh	r0, [r3, #0]
 80077a6:	2300      	movs	r3, #0
 80077a8:	6123      	str	r3, [r4, #16]
 80077aa:	4616      	mov	r6, r2
 80077ac:	e7ba      	b.n	8007724 <_printf_i+0x150>
 80077ae:	680b      	ldr	r3, [r1, #0]
 80077b0:	1d1a      	adds	r2, r3, #4
 80077b2:	600a      	str	r2, [r1, #0]
 80077b4:	681e      	ldr	r6, [r3, #0]
 80077b6:	6862      	ldr	r2, [r4, #4]
 80077b8:	2100      	movs	r1, #0
 80077ba:	4630      	mov	r0, r6
 80077bc:	f7f8 fd10 	bl	80001e0 <memchr>
 80077c0:	b108      	cbz	r0, 80077c6 <_printf_i+0x1f2>
 80077c2:	1b80      	subs	r0, r0, r6
 80077c4:	6060      	str	r0, [r4, #4]
 80077c6:	6863      	ldr	r3, [r4, #4]
 80077c8:	6123      	str	r3, [r4, #16]
 80077ca:	2300      	movs	r3, #0
 80077cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077d0:	e7a8      	b.n	8007724 <_printf_i+0x150>
 80077d2:	6923      	ldr	r3, [r4, #16]
 80077d4:	4632      	mov	r2, r6
 80077d6:	4649      	mov	r1, r9
 80077d8:	4640      	mov	r0, r8
 80077da:	47d0      	blx	sl
 80077dc:	3001      	adds	r0, #1
 80077de:	d0ab      	beq.n	8007738 <_printf_i+0x164>
 80077e0:	6823      	ldr	r3, [r4, #0]
 80077e2:	079b      	lsls	r3, r3, #30
 80077e4:	d413      	bmi.n	800780e <_printf_i+0x23a>
 80077e6:	68e0      	ldr	r0, [r4, #12]
 80077e8:	9b03      	ldr	r3, [sp, #12]
 80077ea:	4298      	cmp	r0, r3
 80077ec:	bfb8      	it	lt
 80077ee:	4618      	movlt	r0, r3
 80077f0:	e7a4      	b.n	800773c <_printf_i+0x168>
 80077f2:	2301      	movs	r3, #1
 80077f4:	4632      	mov	r2, r6
 80077f6:	4649      	mov	r1, r9
 80077f8:	4640      	mov	r0, r8
 80077fa:	47d0      	blx	sl
 80077fc:	3001      	adds	r0, #1
 80077fe:	d09b      	beq.n	8007738 <_printf_i+0x164>
 8007800:	3501      	adds	r5, #1
 8007802:	68e3      	ldr	r3, [r4, #12]
 8007804:	9903      	ldr	r1, [sp, #12]
 8007806:	1a5b      	subs	r3, r3, r1
 8007808:	42ab      	cmp	r3, r5
 800780a:	dcf2      	bgt.n	80077f2 <_printf_i+0x21e>
 800780c:	e7eb      	b.n	80077e6 <_printf_i+0x212>
 800780e:	2500      	movs	r5, #0
 8007810:	f104 0619 	add.w	r6, r4, #25
 8007814:	e7f5      	b.n	8007802 <_printf_i+0x22e>
 8007816:	bf00      	nop
 8007818:	08009c0e 	.word	0x08009c0e
 800781c:	08009c1f 	.word	0x08009c1f

08007820 <iprintf>:
 8007820:	b40f      	push	{r0, r1, r2, r3}
 8007822:	4b0a      	ldr	r3, [pc, #40]	; (800784c <iprintf+0x2c>)
 8007824:	b513      	push	{r0, r1, r4, lr}
 8007826:	681c      	ldr	r4, [r3, #0]
 8007828:	b124      	cbz	r4, 8007834 <iprintf+0x14>
 800782a:	69a3      	ldr	r3, [r4, #24]
 800782c:	b913      	cbnz	r3, 8007834 <iprintf+0x14>
 800782e:	4620      	mov	r0, r4
 8007830:	f001 f950 	bl	8008ad4 <__sinit>
 8007834:	ab05      	add	r3, sp, #20
 8007836:	9a04      	ldr	r2, [sp, #16]
 8007838:	68a1      	ldr	r1, [r4, #8]
 800783a:	9301      	str	r3, [sp, #4]
 800783c:	4620      	mov	r0, r4
 800783e:	f001 fecf 	bl	80095e0 <_vfiprintf_r>
 8007842:	b002      	add	sp, #8
 8007844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007848:	b004      	add	sp, #16
 800784a:	4770      	bx	lr
 800784c:	20000010 	.word	0x20000010

08007850 <_puts_r>:
 8007850:	b570      	push	{r4, r5, r6, lr}
 8007852:	460e      	mov	r6, r1
 8007854:	4605      	mov	r5, r0
 8007856:	b118      	cbz	r0, 8007860 <_puts_r+0x10>
 8007858:	6983      	ldr	r3, [r0, #24]
 800785a:	b90b      	cbnz	r3, 8007860 <_puts_r+0x10>
 800785c:	f001 f93a 	bl	8008ad4 <__sinit>
 8007860:	69ab      	ldr	r3, [r5, #24]
 8007862:	68ac      	ldr	r4, [r5, #8]
 8007864:	b913      	cbnz	r3, 800786c <_puts_r+0x1c>
 8007866:	4628      	mov	r0, r5
 8007868:	f001 f934 	bl	8008ad4 <__sinit>
 800786c:	4b2c      	ldr	r3, [pc, #176]	; (8007920 <_puts_r+0xd0>)
 800786e:	429c      	cmp	r4, r3
 8007870:	d120      	bne.n	80078b4 <_puts_r+0x64>
 8007872:	686c      	ldr	r4, [r5, #4]
 8007874:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007876:	07db      	lsls	r3, r3, #31
 8007878:	d405      	bmi.n	8007886 <_puts_r+0x36>
 800787a:	89a3      	ldrh	r3, [r4, #12]
 800787c:	0598      	lsls	r0, r3, #22
 800787e:	d402      	bmi.n	8007886 <_puts_r+0x36>
 8007880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007882:	f001 f9dc 	bl	8008c3e <__retarget_lock_acquire_recursive>
 8007886:	89a3      	ldrh	r3, [r4, #12]
 8007888:	0719      	lsls	r1, r3, #28
 800788a:	d51d      	bpl.n	80078c8 <_puts_r+0x78>
 800788c:	6923      	ldr	r3, [r4, #16]
 800788e:	b1db      	cbz	r3, 80078c8 <_puts_r+0x78>
 8007890:	3e01      	subs	r6, #1
 8007892:	68a3      	ldr	r3, [r4, #8]
 8007894:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007898:	3b01      	subs	r3, #1
 800789a:	60a3      	str	r3, [r4, #8]
 800789c:	bb39      	cbnz	r1, 80078ee <_puts_r+0x9e>
 800789e:	2b00      	cmp	r3, #0
 80078a0:	da38      	bge.n	8007914 <_puts_r+0xc4>
 80078a2:	4622      	mov	r2, r4
 80078a4:	210a      	movs	r1, #10
 80078a6:	4628      	mov	r0, r5
 80078a8:	f000 f8a4 	bl	80079f4 <__swbuf_r>
 80078ac:	3001      	adds	r0, #1
 80078ae:	d011      	beq.n	80078d4 <_puts_r+0x84>
 80078b0:	250a      	movs	r5, #10
 80078b2:	e011      	b.n	80078d8 <_puts_r+0x88>
 80078b4:	4b1b      	ldr	r3, [pc, #108]	; (8007924 <_puts_r+0xd4>)
 80078b6:	429c      	cmp	r4, r3
 80078b8:	d101      	bne.n	80078be <_puts_r+0x6e>
 80078ba:	68ac      	ldr	r4, [r5, #8]
 80078bc:	e7da      	b.n	8007874 <_puts_r+0x24>
 80078be:	4b1a      	ldr	r3, [pc, #104]	; (8007928 <_puts_r+0xd8>)
 80078c0:	429c      	cmp	r4, r3
 80078c2:	bf08      	it	eq
 80078c4:	68ec      	ldreq	r4, [r5, #12]
 80078c6:	e7d5      	b.n	8007874 <_puts_r+0x24>
 80078c8:	4621      	mov	r1, r4
 80078ca:	4628      	mov	r0, r5
 80078cc:	f000 f8e4 	bl	8007a98 <__swsetup_r>
 80078d0:	2800      	cmp	r0, #0
 80078d2:	d0dd      	beq.n	8007890 <_puts_r+0x40>
 80078d4:	f04f 35ff 	mov.w	r5, #4294967295
 80078d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078da:	07da      	lsls	r2, r3, #31
 80078dc:	d405      	bmi.n	80078ea <_puts_r+0x9a>
 80078de:	89a3      	ldrh	r3, [r4, #12]
 80078e0:	059b      	lsls	r3, r3, #22
 80078e2:	d402      	bmi.n	80078ea <_puts_r+0x9a>
 80078e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078e6:	f001 f9ab 	bl	8008c40 <__retarget_lock_release_recursive>
 80078ea:	4628      	mov	r0, r5
 80078ec:	bd70      	pop	{r4, r5, r6, pc}
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	da04      	bge.n	80078fc <_puts_r+0xac>
 80078f2:	69a2      	ldr	r2, [r4, #24]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	dc06      	bgt.n	8007906 <_puts_r+0xb6>
 80078f8:	290a      	cmp	r1, #10
 80078fa:	d004      	beq.n	8007906 <_puts_r+0xb6>
 80078fc:	6823      	ldr	r3, [r4, #0]
 80078fe:	1c5a      	adds	r2, r3, #1
 8007900:	6022      	str	r2, [r4, #0]
 8007902:	7019      	strb	r1, [r3, #0]
 8007904:	e7c5      	b.n	8007892 <_puts_r+0x42>
 8007906:	4622      	mov	r2, r4
 8007908:	4628      	mov	r0, r5
 800790a:	f000 f873 	bl	80079f4 <__swbuf_r>
 800790e:	3001      	adds	r0, #1
 8007910:	d1bf      	bne.n	8007892 <_puts_r+0x42>
 8007912:	e7df      	b.n	80078d4 <_puts_r+0x84>
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	250a      	movs	r5, #10
 8007918:	1c5a      	adds	r2, r3, #1
 800791a:	6022      	str	r2, [r4, #0]
 800791c:	701d      	strb	r5, [r3, #0]
 800791e:	e7db      	b.n	80078d8 <_puts_r+0x88>
 8007920:	08009d84 	.word	0x08009d84
 8007924:	08009da4 	.word	0x08009da4
 8007928:	08009d64 	.word	0x08009d64

0800792c <puts>:
 800792c:	4b02      	ldr	r3, [pc, #8]	; (8007938 <puts+0xc>)
 800792e:	4601      	mov	r1, r0
 8007930:	6818      	ldr	r0, [r3, #0]
 8007932:	f7ff bf8d 	b.w	8007850 <_puts_r>
 8007936:	bf00      	nop
 8007938:	20000010 	.word	0x20000010

0800793c <strtok>:
 800793c:	4b16      	ldr	r3, [pc, #88]	; (8007998 <strtok+0x5c>)
 800793e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007940:	681e      	ldr	r6, [r3, #0]
 8007942:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8007944:	4605      	mov	r5, r0
 8007946:	b9fc      	cbnz	r4, 8007988 <strtok+0x4c>
 8007948:	2050      	movs	r0, #80	; 0x50
 800794a:	9101      	str	r1, [sp, #4]
 800794c:	f001 f9de 	bl	8008d0c <malloc>
 8007950:	9901      	ldr	r1, [sp, #4]
 8007952:	65b0      	str	r0, [r6, #88]	; 0x58
 8007954:	4602      	mov	r2, r0
 8007956:	b920      	cbnz	r0, 8007962 <strtok+0x26>
 8007958:	4b10      	ldr	r3, [pc, #64]	; (800799c <strtok+0x60>)
 800795a:	4811      	ldr	r0, [pc, #68]	; (80079a0 <strtok+0x64>)
 800795c:	2157      	movs	r1, #87	; 0x57
 800795e:	f000 f909 	bl	8007b74 <__assert_func>
 8007962:	e9c0 4400 	strd	r4, r4, [r0]
 8007966:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800796a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800796e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007972:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007976:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800797a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800797e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007982:	6184      	str	r4, [r0, #24]
 8007984:	7704      	strb	r4, [r0, #28]
 8007986:	6244      	str	r4, [r0, #36]	; 0x24
 8007988:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800798a:	2301      	movs	r3, #1
 800798c:	4628      	mov	r0, r5
 800798e:	b002      	add	sp, #8
 8007990:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007994:	f000 b806 	b.w	80079a4 <__strtok_r>
 8007998:	20000010 	.word	0x20000010
 800799c:	08009c30 	.word	0x08009c30
 80079a0:	08009c47 	.word	0x08009c47

080079a4 <__strtok_r>:
 80079a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079a6:	b908      	cbnz	r0, 80079ac <__strtok_r+0x8>
 80079a8:	6810      	ldr	r0, [r2, #0]
 80079aa:	b188      	cbz	r0, 80079d0 <__strtok_r+0x2c>
 80079ac:	4604      	mov	r4, r0
 80079ae:	4620      	mov	r0, r4
 80079b0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80079b4:	460f      	mov	r7, r1
 80079b6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80079ba:	b91e      	cbnz	r6, 80079c4 <__strtok_r+0x20>
 80079bc:	b965      	cbnz	r5, 80079d8 <__strtok_r+0x34>
 80079be:	6015      	str	r5, [r2, #0]
 80079c0:	4628      	mov	r0, r5
 80079c2:	e005      	b.n	80079d0 <__strtok_r+0x2c>
 80079c4:	42b5      	cmp	r5, r6
 80079c6:	d1f6      	bne.n	80079b6 <__strtok_r+0x12>
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1f0      	bne.n	80079ae <__strtok_r+0xa>
 80079cc:	6014      	str	r4, [r2, #0]
 80079ce:	7003      	strb	r3, [r0, #0]
 80079d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079d2:	461c      	mov	r4, r3
 80079d4:	e00c      	b.n	80079f0 <__strtok_r+0x4c>
 80079d6:	b915      	cbnz	r5, 80079de <__strtok_r+0x3a>
 80079d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80079dc:	460e      	mov	r6, r1
 80079de:	f816 5b01 	ldrb.w	r5, [r6], #1
 80079e2:	42ab      	cmp	r3, r5
 80079e4:	d1f7      	bne.n	80079d6 <__strtok_r+0x32>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d0f3      	beq.n	80079d2 <__strtok_r+0x2e>
 80079ea:	2300      	movs	r3, #0
 80079ec:	f804 3c01 	strb.w	r3, [r4, #-1]
 80079f0:	6014      	str	r4, [r2, #0]
 80079f2:	e7ed      	b.n	80079d0 <__strtok_r+0x2c>

080079f4 <__swbuf_r>:
 80079f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f6:	460e      	mov	r6, r1
 80079f8:	4614      	mov	r4, r2
 80079fa:	4605      	mov	r5, r0
 80079fc:	b118      	cbz	r0, 8007a06 <__swbuf_r+0x12>
 80079fe:	6983      	ldr	r3, [r0, #24]
 8007a00:	b90b      	cbnz	r3, 8007a06 <__swbuf_r+0x12>
 8007a02:	f001 f867 	bl	8008ad4 <__sinit>
 8007a06:	4b21      	ldr	r3, [pc, #132]	; (8007a8c <__swbuf_r+0x98>)
 8007a08:	429c      	cmp	r4, r3
 8007a0a:	d12b      	bne.n	8007a64 <__swbuf_r+0x70>
 8007a0c:	686c      	ldr	r4, [r5, #4]
 8007a0e:	69a3      	ldr	r3, [r4, #24]
 8007a10:	60a3      	str	r3, [r4, #8]
 8007a12:	89a3      	ldrh	r3, [r4, #12]
 8007a14:	071a      	lsls	r2, r3, #28
 8007a16:	d52f      	bpl.n	8007a78 <__swbuf_r+0x84>
 8007a18:	6923      	ldr	r3, [r4, #16]
 8007a1a:	b36b      	cbz	r3, 8007a78 <__swbuf_r+0x84>
 8007a1c:	6923      	ldr	r3, [r4, #16]
 8007a1e:	6820      	ldr	r0, [r4, #0]
 8007a20:	1ac0      	subs	r0, r0, r3
 8007a22:	6963      	ldr	r3, [r4, #20]
 8007a24:	b2f6      	uxtb	r6, r6
 8007a26:	4283      	cmp	r3, r0
 8007a28:	4637      	mov	r7, r6
 8007a2a:	dc04      	bgt.n	8007a36 <__swbuf_r+0x42>
 8007a2c:	4621      	mov	r1, r4
 8007a2e:	4628      	mov	r0, r5
 8007a30:	f000 ffbc 	bl	80089ac <_fflush_r>
 8007a34:	bb30      	cbnz	r0, 8007a84 <__swbuf_r+0x90>
 8007a36:	68a3      	ldr	r3, [r4, #8]
 8007a38:	3b01      	subs	r3, #1
 8007a3a:	60a3      	str	r3, [r4, #8]
 8007a3c:	6823      	ldr	r3, [r4, #0]
 8007a3e:	1c5a      	adds	r2, r3, #1
 8007a40:	6022      	str	r2, [r4, #0]
 8007a42:	701e      	strb	r6, [r3, #0]
 8007a44:	6963      	ldr	r3, [r4, #20]
 8007a46:	3001      	adds	r0, #1
 8007a48:	4283      	cmp	r3, r0
 8007a4a:	d004      	beq.n	8007a56 <__swbuf_r+0x62>
 8007a4c:	89a3      	ldrh	r3, [r4, #12]
 8007a4e:	07db      	lsls	r3, r3, #31
 8007a50:	d506      	bpl.n	8007a60 <__swbuf_r+0x6c>
 8007a52:	2e0a      	cmp	r6, #10
 8007a54:	d104      	bne.n	8007a60 <__swbuf_r+0x6c>
 8007a56:	4621      	mov	r1, r4
 8007a58:	4628      	mov	r0, r5
 8007a5a:	f000 ffa7 	bl	80089ac <_fflush_r>
 8007a5e:	b988      	cbnz	r0, 8007a84 <__swbuf_r+0x90>
 8007a60:	4638      	mov	r0, r7
 8007a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a64:	4b0a      	ldr	r3, [pc, #40]	; (8007a90 <__swbuf_r+0x9c>)
 8007a66:	429c      	cmp	r4, r3
 8007a68:	d101      	bne.n	8007a6e <__swbuf_r+0x7a>
 8007a6a:	68ac      	ldr	r4, [r5, #8]
 8007a6c:	e7cf      	b.n	8007a0e <__swbuf_r+0x1a>
 8007a6e:	4b09      	ldr	r3, [pc, #36]	; (8007a94 <__swbuf_r+0xa0>)
 8007a70:	429c      	cmp	r4, r3
 8007a72:	bf08      	it	eq
 8007a74:	68ec      	ldreq	r4, [r5, #12]
 8007a76:	e7ca      	b.n	8007a0e <__swbuf_r+0x1a>
 8007a78:	4621      	mov	r1, r4
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	f000 f80c 	bl	8007a98 <__swsetup_r>
 8007a80:	2800      	cmp	r0, #0
 8007a82:	d0cb      	beq.n	8007a1c <__swbuf_r+0x28>
 8007a84:	f04f 37ff 	mov.w	r7, #4294967295
 8007a88:	e7ea      	b.n	8007a60 <__swbuf_r+0x6c>
 8007a8a:	bf00      	nop
 8007a8c:	08009d84 	.word	0x08009d84
 8007a90:	08009da4 	.word	0x08009da4
 8007a94:	08009d64 	.word	0x08009d64

08007a98 <__swsetup_r>:
 8007a98:	4b32      	ldr	r3, [pc, #200]	; (8007b64 <__swsetup_r+0xcc>)
 8007a9a:	b570      	push	{r4, r5, r6, lr}
 8007a9c:	681d      	ldr	r5, [r3, #0]
 8007a9e:	4606      	mov	r6, r0
 8007aa0:	460c      	mov	r4, r1
 8007aa2:	b125      	cbz	r5, 8007aae <__swsetup_r+0x16>
 8007aa4:	69ab      	ldr	r3, [r5, #24]
 8007aa6:	b913      	cbnz	r3, 8007aae <__swsetup_r+0x16>
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	f001 f813 	bl	8008ad4 <__sinit>
 8007aae:	4b2e      	ldr	r3, [pc, #184]	; (8007b68 <__swsetup_r+0xd0>)
 8007ab0:	429c      	cmp	r4, r3
 8007ab2:	d10f      	bne.n	8007ad4 <__swsetup_r+0x3c>
 8007ab4:	686c      	ldr	r4, [r5, #4]
 8007ab6:	89a3      	ldrh	r3, [r4, #12]
 8007ab8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007abc:	0719      	lsls	r1, r3, #28
 8007abe:	d42c      	bmi.n	8007b1a <__swsetup_r+0x82>
 8007ac0:	06dd      	lsls	r5, r3, #27
 8007ac2:	d411      	bmi.n	8007ae8 <__swsetup_r+0x50>
 8007ac4:	2309      	movs	r3, #9
 8007ac6:	6033      	str	r3, [r6, #0]
 8007ac8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007acc:	81a3      	strh	r3, [r4, #12]
 8007ace:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad2:	e03e      	b.n	8007b52 <__swsetup_r+0xba>
 8007ad4:	4b25      	ldr	r3, [pc, #148]	; (8007b6c <__swsetup_r+0xd4>)
 8007ad6:	429c      	cmp	r4, r3
 8007ad8:	d101      	bne.n	8007ade <__swsetup_r+0x46>
 8007ada:	68ac      	ldr	r4, [r5, #8]
 8007adc:	e7eb      	b.n	8007ab6 <__swsetup_r+0x1e>
 8007ade:	4b24      	ldr	r3, [pc, #144]	; (8007b70 <__swsetup_r+0xd8>)
 8007ae0:	429c      	cmp	r4, r3
 8007ae2:	bf08      	it	eq
 8007ae4:	68ec      	ldreq	r4, [r5, #12]
 8007ae6:	e7e6      	b.n	8007ab6 <__swsetup_r+0x1e>
 8007ae8:	0758      	lsls	r0, r3, #29
 8007aea:	d512      	bpl.n	8007b12 <__swsetup_r+0x7a>
 8007aec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007aee:	b141      	cbz	r1, 8007b02 <__swsetup_r+0x6a>
 8007af0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007af4:	4299      	cmp	r1, r3
 8007af6:	d002      	beq.n	8007afe <__swsetup_r+0x66>
 8007af8:	4630      	mov	r0, r6
 8007afa:	f001 fc9d 	bl	8009438 <_free_r>
 8007afe:	2300      	movs	r3, #0
 8007b00:	6363      	str	r3, [r4, #52]	; 0x34
 8007b02:	89a3      	ldrh	r3, [r4, #12]
 8007b04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007b08:	81a3      	strh	r3, [r4, #12]
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	6063      	str	r3, [r4, #4]
 8007b0e:	6923      	ldr	r3, [r4, #16]
 8007b10:	6023      	str	r3, [r4, #0]
 8007b12:	89a3      	ldrh	r3, [r4, #12]
 8007b14:	f043 0308 	orr.w	r3, r3, #8
 8007b18:	81a3      	strh	r3, [r4, #12]
 8007b1a:	6923      	ldr	r3, [r4, #16]
 8007b1c:	b94b      	cbnz	r3, 8007b32 <__swsetup_r+0x9a>
 8007b1e:	89a3      	ldrh	r3, [r4, #12]
 8007b20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b28:	d003      	beq.n	8007b32 <__swsetup_r+0x9a>
 8007b2a:	4621      	mov	r1, r4
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	f001 f8ad 	bl	8008c8c <__smakebuf_r>
 8007b32:	89a0      	ldrh	r0, [r4, #12]
 8007b34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b38:	f010 0301 	ands.w	r3, r0, #1
 8007b3c:	d00a      	beq.n	8007b54 <__swsetup_r+0xbc>
 8007b3e:	2300      	movs	r3, #0
 8007b40:	60a3      	str	r3, [r4, #8]
 8007b42:	6963      	ldr	r3, [r4, #20]
 8007b44:	425b      	negs	r3, r3
 8007b46:	61a3      	str	r3, [r4, #24]
 8007b48:	6923      	ldr	r3, [r4, #16]
 8007b4a:	b943      	cbnz	r3, 8007b5e <__swsetup_r+0xc6>
 8007b4c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b50:	d1ba      	bne.n	8007ac8 <__swsetup_r+0x30>
 8007b52:	bd70      	pop	{r4, r5, r6, pc}
 8007b54:	0781      	lsls	r1, r0, #30
 8007b56:	bf58      	it	pl
 8007b58:	6963      	ldrpl	r3, [r4, #20]
 8007b5a:	60a3      	str	r3, [r4, #8]
 8007b5c:	e7f4      	b.n	8007b48 <__swsetup_r+0xb0>
 8007b5e:	2000      	movs	r0, #0
 8007b60:	e7f7      	b.n	8007b52 <__swsetup_r+0xba>
 8007b62:	bf00      	nop
 8007b64:	20000010 	.word	0x20000010
 8007b68:	08009d84 	.word	0x08009d84
 8007b6c:	08009da4 	.word	0x08009da4
 8007b70:	08009d64 	.word	0x08009d64

08007b74 <__assert_func>:
 8007b74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b76:	4614      	mov	r4, r2
 8007b78:	461a      	mov	r2, r3
 8007b7a:	4b09      	ldr	r3, [pc, #36]	; (8007ba0 <__assert_func+0x2c>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4605      	mov	r5, r0
 8007b80:	68d8      	ldr	r0, [r3, #12]
 8007b82:	b14c      	cbz	r4, 8007b98 <__assert_func+0x24>
 8007b84:	4b07      	ldr	r3, [pc, #28]	; (8007ba4 <__assert_func+0x30>)
 8007b86:	9100      	str	r1, [sp, #0]
 8007b88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b8c:	4906      	ldr	r1, [pc, #24]	; (8007ba8 <__assert_func+0x34>)
 8007b8e:	462b      	mov	r3, r5
 8007b90:	f001 f81e 	bl	8008bd0 <fiprintf>
 8007b94:	f001 feba 	bl	800990c <abort>
 8007b98:	4b04      	ldr	r3, [pc, #16]	; (8007bac <__assert_func+0x38>)
 8007b9a:	461c      	mov	r4, r3
 8007b9c:	e7f3      	b.n	8007b86 <__assert_func+0x12>
 8007b9e:	bf00      	nop
 8007ba0:	20000010 	.word	0x20000010
 8007ba4:	08009ca8 	.word	0x08009ca8
 8007ba8:	08009cb5 	.word	0x08009cb5
 8007bac:	08009ce3 	.word	0x08009ce3

08007bb0 <quorem>:
 8007bb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb4:	6903      	ldr	r3, [r0, #16]
 8007bb6:	690c      	ldr	r4, [r1, #16]
 8007bb8:	42a3      	cmp	r3, r4
 8007bba:	4607      	mov	r7, r0
 8007bbc:	f2c0 8081 	blt.w	8007cc2 <quorem+0x112>
 8007bc0:	3c01      	subs	r4, #1
 8007bc2:	f101 0814 	add.w	r8, r1, #20
 8007bc6:	f100 0514 	add.w	r5, r0, #20
 8007bca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bce:	9301      	str	r3, [sp, #4]
 8007bd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bd8:	3301      	adds	r3, #1
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007be0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007be4:	fbb2 f6f3 	udiv	r6, r2, r3
 8007be8:	d331      	bcc.n	8007c4e <quorem+0x9e>
 8007bea:	f04f 0e00 	mov.w	lr, #0
 8007bee:	4640      	mov	r0, r8
 8007bf0:	46ac      	mov	ip, r5
 8007bf2:	46f2      	mov	sl, lr
 8007bf4:	f850 2b04 	ldr.w	r2, [r0], #4
 8007bf8:	b293      	uxth	r3, r2
 8007bfa:	fb06 e303 	mla	r3, r6, r3, lr
 8007bfe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	ebaa 0303 	sub.w	r3, sl, r3
 8007c08:	0c12      	lsrs	r2, r2, #16
 8007c0a:	f8dc a000 	ldr.w	sl, [ip]
 8007c0e:	fb06 e202 	mla	r2, r6, r2, lr
 8007c12:	fa13 f38a 	uxtah	r3, r3, sl
 8007c16:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c1a:	fa1f fa82 	uxth.w	sl, r2
 8007c1e:	f8dc 2000 	ldr.w	r2, [ip]
 8007c22:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007c26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c30:	4581      	cmp	r9, r0
 8007c32:	f84c 3b04 	str.w	r3, [ip], #4
 8007c36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c3a:	d2db      	bcs.n	8007bf4 <quorem+0x44>
 8007c3c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c40:	b92b      	cbnz	r3, 8007c4e <quorem+0x9e>
 8007c42:	9b01      	ldr	r3, [sp, #4]
 8007c44:	3b04      	subs	r3, #4
 8007c46:	429d      	cmp	r5, r3
 8007c48:	461a      	mov	r2, r3
 8007c4a:	d32e      	bcc.n	8007caa <quorem+0xfa>
 8007c4c:	613c      	str	r4, [r7, #16]
 8007c4e:	4638      	mov	r0, r7
 8007c50:	f001 fae2 	bl	8009218 <__mcmp>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	db24      	blt.n	8007ca2 <quorem+0xf2>
 8007c58:	3601      	adds	r6, #1
 8007c5a:	4628      	mov	r0, r5
 8007c5c:	f04f 0c00 	mov.w	ip, #0
 8007c60:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c64:	f8d0 e000 	ldr.w	lr, [r0]
 8007c68:	b293      	uxth	r3, r2
 8007c6a:	ebac 0303 	sub.w	r3, ip, r3
 8007c6e:	0c12      	lsrs	r2, r2, #16
 8007c70:	fa13 f38e 	uxtah	r3, r3, lr
 8007c74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007c78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c82:	45c1      	cmp	r9, r8
 8007c84:	f840 3b04 	str.w	r3, [r0], #4
 8007c88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007c8c:	d2e8      	bcs.n	8007c60 <quorem+0xb0>
 8007c8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c96:	b922      	cbnz	r2, 8007ca2 <quorem+0xf2>
 8007c98:	3b04      	subs	r3, #4
 8007c9a:	429d      	cmp	r5, r3
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	d30a      	bcc.n	8007cb6 <quorem+0x106>
 8007ca0:	613c      	str	r4, [r7, #16]
 8007ca2:	4630      	mov	r0, r6
 8007ca4:	b003      	add	sp, #12
 8007ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007caa:	6812      	ldr	r2, [r2, #0]
 8007cac:	3b04      	subs	r3, #4
 8007cae:	2a00      	cmp	r2, #0
 8007cb0:	d1cc      	bne.n	8007c4c <quorem+0x9c>
 8007cb2:	3c01      	subs	r4, #1
 8007cb4:	e7c7      	b.n	8007c46 <quorem+0x96>
 8007cb6:	6812      	ldr	r2, [r2, #0]
 8007cb8:	3b04      	subs	r3, #4
 8007cba:	2a00      	cmp	r2, #0
 8007cbc:	d1f0      	bne.n	8007ca0 <quorem+0xf0>
 8007cbe:	3c01      	subs	r4, #1
 8007cc0:	e7eb      	b.n	8007c9a <quorem+0xea>
 8007cc2:	2000      	movs	r0, #0
 8007cc4:	e7ee      	b.n	8007ca4 <quorem+0xf4>
	...

08007cc8 <_dtoa_r>:
 8007cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ccc:	ed2d 8b02 	vpush	{d8}
 8007cd0:	ec57 6b10 	vmov	r6, r7, d0
 8007cd4:	b095      	sub	sp, #84	; 0x54
 8007cd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007cd8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007cdc:	9105      	str	r1, [sp, #20]
 8007cde:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007ce2:	4604      	mov	r4, r0
 8007ce4:	9209      	str	r2, [sp, #36]	; 0x24
 8007ce6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ce8:	b975      	cbnz	r5, 8007d08 <_dtoa_r+0x40>
 8007cea:	2010      	movs	r0, #16
 8007cec:	f001 f80e 	bl	8008d0c <malloc>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	6260      	str	r0, [r4, #36]	; 0x24
 8007cf4:	b920      	cbnz	r0, 8007d00 <_dtoa_r+0x38>
 8007cf6:	4bb2      	ldr	r3, [pc, #712]	; (8007fc0 <_dtoa_r+0x2f8>)
 8007cf8:	21ea      	movs	r1, #234	; 0xea
 8007cfa:	48b2      	ldr	r0, [pc, #712]	; (8007fc4 <_dtoa_r+0x2fc>)
 8007cfc:	f7ff ff3a 	bl	8007b74 <__assert_func>
 8007d00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007d04:	6005      	str	r5, [r0, #0]
 8007d06:	60c5      	str	r5, [r0, #12]
 8007d08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d0a:	6819      	ldr	r1, [r3, #0]
 8007d0c:	b151      	cbz	r1, 8007d24 <_dtoa_r+0x5c>
 8007d0e:	685a      	ldr	r2, [r3, #4]
 8007d10:	604a      	str	r2, [r1, #4]
 8007d12:	2301      	movs	r3, #1
 8007d14:	4093      	lsls	r3, r2
 8007d16:	608b      	str	r3, [r1, #8]
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f001 f83f 	bl	8008d9c <_Bfree>
 8007d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d20:	2200      	movs	r2, #0
 8007d22:	601a      	str	r2, [r3, #0]
 8007d24:	1e3b      	subs	r3, r7, #0
 8007d26:	bfb9      	ittee	lt
 8007d28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007d2c:	9303      	strlt	r3, [sp, #12]
 8007d2e:	2300      	movge	r3, #0
 8007d30:	f8c8 3000 	strge.w	r3, [r8]
 8007d34:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007d38:	4ba3      	ldr	r3, [pc, #652]	; (8007fc8 <_dtoa_r+0x300>)
 8007d3a:	bfbc      	itt	lt
 8007d3c:	2201      	movlt	r2, #1
 8007d3e:	f8c8 2000 	strlt.w	r2, [r8]
 8007d42:	ea33 0309 	bics.w	r3, r3, r9
 8007d46:	d11b      	bne.n	8007d80 <_dtoa_r+0xb8>
 8007d48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d4a:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d4e:	6013      	str	r3, [r2, #0]
 8007d50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d54:	4333      	orrs	r3, r6
 8007d56:	f000 857a 	beq.w	800884e <_dtoa_r+0xb86>
 8007d5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d5c:	b963      	cbnz	r3, 8007d78 <_dtoa_r+0xb0>
 8007d5e:	4b9b      	ldr	r3, [pc, #620]	; (8007fcc <_dtoa_r+0x304>)
 8007d60:	e024      	b.n	8007dac <_dtoa_r+0xe4>
 8007d62:	4b9b      	ldr	r3, [pc, #620]	; (8007fd0 <_dtoa_r+0x308>)
 8007d64:	9300      	str	r3, [sp, #0]
 8007d66:	3308      	adds	r3, #8
 8007d68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d6a:	6013      	str	r3, [r2, #0]
 8007d6c:	9800      	ldr	r0, [sp, #0]
 8007d6e:	b015      	add	sp, #84	; 0x54
 8007d70:	ecbd 8b02 	vpop	{d8}
 8007d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d78:	4b94      	ldr	r3, [pc, #592]	; (8007fcc <_dtoa_r+0x304>)
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	3303      	adds	r3, #3
 8007d7e:	e7f3      	b.n	8007d68 <_dtoa_r+0xa0>
 8007d80:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d84:	2200      	movs	r2, #0
 8007d86:	ec51 0b17 	vmov	r0, r1, d7
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007d90:	f7f8 fe9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d94:	4680      	mov	r8, r0
 8007d96:	b158      	cbz	r0, 8007db0 <_dtoa_r+0xe8>
 8007d98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	6013      	str	r3, [r2, #0]
 8007d9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f000 8551 	beq.w	8008848 <_dtoa_r+0xb80>
 8007da6:	488b      	ldr	r0, [pc, #556]	; (8007fd4 <_dtoa_r+0x30c>)
 8007da8:	6018      	str	r0, [r3, #0]
 8007daa:	1e43      	subs	r3, r0, #1
 8007dac:	9300      	str	r3, [sp, #0]
 8007dae:	e7dd      	b.n	8007d6c <_dtoa_r+0xa4>
 8007db0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007db4:	aa12      	add	r2, sp, #72	; 0x48
 8007db6:	a913      	add	r1, sp, #76	; 0x4c
 8007db8:	4620      	mov	r0, r4
 8007dba:	f001 fad1 	bl	8009360 <__d2b>
 8007dbe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007dc2:	4683      	mov	fp, r0
 8007dc4:	2d00      	cmp	r5, #0
 8007dc6:	d07c      	beq.n	8007ec2 <_dtoa_r+0x1fa>
 8007dc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007dce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dd2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007dd6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007dda:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007dde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007de2:	4b7d      	ldr	r3, [pc, #500]	; (8007fd8 <_dtoa_r+0x310>)
 8007de4:	2200      	movs	r2, #0
 8007de6:	4630      	mov	r0, r6
 8007de8:	4639      	mov	r1, r7
 8007dea:	f7f8 fa4d 	bl	8000288 <__aeabi_dsub>
 8007dee:	a36e      	add	r3, pc, #440	; (adr r3, 8007fa8 <_dtoa_r+0x2e0>)
 8007df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df4:	f7f8 fc00 	bl	80005f8 <__aeabi_dmul>
 8007df8:	a36d      	add	r3, pc, #436	; (adr r3, 8007fb0 <_dtoa_r+0x2e8>)
 8007dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfe:	f7f8 fa45 	bl	800028c <__adddf3>
 8007e02:	4606      	mov	r6, r0
 8007e04:	4628      	mov	r0, r5
 8007e06:	460f      	mov	r7, r1
 8007e08:	f7f8 fb8c 	bl	8000524 <__aeabi_i2d>
 8007e0c:	a36a      	add	r3, pc, #424	; (adr r3, 8007fb8 <_dtoa_r+0x2f0>)
 8007e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e12:	f7f8 fbf1 	bl	80005f8 <__aeabi_dmul>
 8007e16:	4602      	mov	r2, r0
 8007e18:	460b      	mov	r3, r1
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	4639      	mov	r1, r7
 8007e1e:	f7f8 fa35 	bl	800028c <__adddf3>
 8007e22:	4606      	mov	r6, r0
 8007e24:	460f      	mov	r7, r1
 8007e26:	f7f8 fe97 	bl	8000b58 <__aeabi_d2iz>
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	4682      	mov	sl, r0
 8007e2e:	2300      	movs	r3, #0
 8007e30:	4630      	mov	r0, r6
 8007e32:	4639      	mov	r1, r7
 8007e34:	f7f8 fe52 	bl	8000adc <__aeabi_dcmplt>
 8007e38:	b148      	cbz	r0, 8007e4e <_dtoa_r+0x186>
 8007e3a:	4650      	mov	r0, sl
 8007e3c:	f7f8 fb72 	bl	8000524 <__aeabi_i2d>
 8007e40:	4632      	mov	r2, r6
 8007e42:	463b      	mov	r3, r7
 8007e44:	f7f8 fe40 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e48:	b908      	cbnz	r0, 8007e4e <_dtoa_r+0x186>
 8007e4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e4e:	f1ba 0f16 	cmp.w	sl, #22
 8007e52:	d854      	bhi.n	8007efe <_dtoa_r+0x236>
 8007e54:	4b61      	ldr	r3, [pc, #388]	; (8007fdc <_dtoa_r+0x314>)
 8007e56:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e62:	f7f8 fe3b 	bl	8000adc <__aeabi_dcmplt>
 8007e66:	2800      	cmp	r0, #0
 8007e68:	d04b      	beq.n	8007f02 <_dtoa_r+0x23a>
 8007e6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e6e:	2300      	movs	r3, #0
 8007e70:	930e      	str	r3, [sp, #56]	; 0x38
 8007e72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e74:	1b5d      	subs	r5, r3, r5
 8007e76:	1e6b      	subs	r3, r5, #1
 8007e78:	9304      	str	r3, [sp, #16]
 8007e7a:	bf43      	ittte	mi
 8007e7c:	2300      	movmi	r3, #0
 8007e7e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007e82:	9304      	strmi	r3, [sp, #16]
 8007e84:	f04f 0800 	movpl.w	r8, #0
 8007e88:	f1ba 0f00 	cmp.w	sl, #0
 8007e8c:	db3b      	blt.n	8007f06 <_dtoa_r+0x23e>
 8007e8e:	9b04      	ldr	r3, [sp, #16]
 8007e90:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007e94:	4453      	add	r3, sl
 8007e96:	9304      	str	r3, [sp, #16]
 8007e98:	2300      	movs	r3, #0
 8007e9a:	9306      	str	r3, [sp, #24]
 8007e9c:	9b05      	ldr	r3, [sp, #20]
 8007e9e:	2b09      	cmp	r3, #9
 8007ea0:	d869      	bhi.n	8007f76 <_dtoa_r+0x2ae>
 8007ea2:	2b05      	cmp	r3, #5
 8007ea4:	bfc4      	itt	gt
 8007ea6:	3b04      	subgt	r3, #4
 8007ea8:	9305      	strgt	r3, [sp, #20]
 8007eaa:	9b05      	ldr	r3, [sp, #20]
 8007eac:	f1a3 0302 	sub.w	r3, r3, #2
 8007eb0:	bfcc      	ite	gt
 8007eb2:	2500      	movgt	r5, #0
 8007eb4:	2501      	movle	r5, #1
 8007eb6:	2b03      	cmp	r3, #3
 8007eb8:	d869      	bhi.n	8007f8e <_dtoa_r+0x2c6>
 8007eba:	e8df f003 	tbb	[pc, r3]
 8007ebe:	4e2c      	.short	0x4e2c
 8007ec0:	5a4c      	.short	0x5a4c
 8007ec2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007ec6:	441d      	add	r5, r3
 8007ec8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007ecc:	2b20      	cmp	r3, #32
 8007ece:	bfc1      	itttt	gt
 8007ed0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ed4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007ed8:	fa09 f303 	lslgt.w	r3, r9, r3
 8007edc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007ee0:	bfda      	itte	le
 8007ee2:	f1c3 0320 	rsble	r3, r3, #32
 8007ee6:	fa06 f003 	lslle.w	r0, r6, r3
 8007eea:	4318      	orrgt	r0, r3
 8007eec:	f7f8 fb0a 	bl	8000504 <__aeabi_ui2d>
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	4606      	mov	r6, r0
 8007ef4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007ef8:	3d01      	subs	r5, #1
 8007efa:	9310      	str	r3, [sp, #64]	; 0x40
 8007efc:	e771      	b.n	8007de2 <_dtoa_r+0x11a>
 8007efe:	2301      	movs	r3, #1
 8007f00:	e7b6      	b.n	8007e70 <_dtoa_r+0x1a8>
 8007f02:	900e      	str	r0, [sp, #56]	; 0x38
 8007f04:	e7b5      	b.n	8007e72 <_dtoa_r+0x1aa>
 8007f06:	f1ca 0300 	rsb	r3, sl, #0
 8007f0a:	9306      	str	r3, [sp, #24]
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	eba8 080a 	sub.w	r8, r8, sl
 8007f12:	930d      	str	r3, [sp, #52]	; 0x34
 8007f14:	e7c2      	b.n	8007e9c <_dtoa_r+0x1d4>
 8007f16:	2300      	movs	r3, #0
 8007f18:	9308      	str	r3, [sp, #32]
 8007f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	dc39      	bgt.n	8007f94 <_dtoa_r+0x2cc>
 8007f20:	f04f 0901 	mov.w	r9, #1
 8007f24:	f8cd 9004 	str.w	r9, [sp, #4]
 8007f28:	464b      	mov	r3, r9
 8007f2a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007f2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007f30:	2200      	movs	r2, #0
 8007f32:	6042      	str	r2, [r0, #4]
 8007f34:	2204      	movs	r2, #4
 8007f36:	f102 0614 	add.w	r6, r2, #20
 8007f3a:	429e      	cmp	r6, r3
 8007f3c:	6841      	ldr	r1, [r0, #4]
 8007f3e:	d92f      	bls.n	8007fa0 <_dtoa_r+0x2d8>
 8007f40:	4620      	mov	r0, r4
 8007f42:	f000 feeb 	bl	8008d1c <_Balloc>
 8007f46:	9000      	str	r0, [sp, #0]
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	d14b      	bne.n	8007fe4 <_dtoa_r+0x31c>
 8007f4c:	4b24      	ldr	r3, [pc, #144]	; (8007fe0 <_dtoa_r+0x318>)
 8007f4e:	4602      	mov	r2, r0
 8007f50:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007f54:	e6d1      	b.n	8007cfa <_dtoa_r+0x32>
 8007f56:	2301      	movs	r3, #1
 8007f58:	e7de      	b.n	8007f18 <_dtoa_r+0x250>
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	9308      	str	r3, [sp, #32]
 8007f5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f60:	eb0a 0903 	add.w	r9, sl, r3
 8007f64:	f109 0301 	add.w	r3, r9, #1
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	9301      	str	r3, [sp, #4]
 8007f6c:	bfb8      	it	lt
 8007f6e:	2301      	movlt	r3, #1
 8007f70:	e7dd      	b.n	8007f2e <_dtoa_r+0x266>
 8007f72:	2301      	movs	r3, #1
 8007f74:	e7f2      	b.n	8007f5c <_dtoa_r+0x294>
 8007f76:	2501      	movs	r5, #1
 8007f78:	2300      	movs	r3, #0
 8007f7a:	9305      	str	r3, [sp, #20]
 8007f7c:	9508      	str	r5, [sp, #32]
 8007f7e:	f04f 39ff 	mov.w	r9, #4294967295
 8007f82:	2200      	movs	r2, #0
 8007f84:	f8cd 9004 	str.w	r9, [sp, #4]
 8007f88:	2312      	movs	r3, #18
 8007f8a:	9209      	str	r2, [sp, #36]	; 0x24
 8007f8c:	e7cf      	b.n	8007f2e <_dtoa_r+0x266>
 8007f8e:	2301      	movs	r3, #1
 8007f90:	9308      	str	r3, [sp, #32]
 8007f92:	e7f4      	b.n	8007f7e <_dtoa_r+0x2b6>
 8007f94:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007f98:	f8cd 9004 	str.w	r9, [sp, #4]
 8007f9c:	464b      	mov	r3, r9
 8007f9e:	e7c6      	b.n	8007f2e <_dtoa_r+0x266>
 8007fa0:	3101      	adds	r1, #1
 8007fa2:	6041      	str	r1, [r0, #4]
 8007fa4:	0052      	lsls	r2, r2, #1
 8007fa6:	e7c6      	b.n	8007f36 <_dtoa_r+0x26e>
 8007fa8:	636f4361 	.word	0x636f4361
 8007fac:	3fd287a7 	.word	0x3fd287a7
 8007fb0:	8b60c8b3 	.word	0x8b60c8b3
 8007fb4:	3fc68a28 	.word	0x3fc68a28
 8007fb8:	509f79fb 	.word	0x509f79fb
 8007fbc:	3fd34413 	.word	0x3fd34413
 8007fc0:	08009c30 	.word	0x08009c30
 8007fc4:	08009cf1 	.word	0x08009cf1
 8007fc8:	7ff00000 	.word	0x7ff00000
 8007fcc:	08009ced 	.word	0x08009ced
 8007fd0:	08009ce4 	.word	0x08009ce4
 8007fd4:	08009c0d 	.word	0x08009c0d
 8007fd8:	3ff80000 	.word	0x3ff80000
 8007fdc:	08009e50 	.word	0x08009e50
 8007fe0:	08009d50 	.word	0x08009d50
 8007fe4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fe6:	9a00      	ldr	r2, [sp, #0]
 8007fe8:	601a      	str	r2, [r3, #0]
 8007fea:	9b01      	ldr	r3, [sp, #4]
 8007fec:	2b0e      	cmp	r3, #14
 8007fee:	f200 80ad 	bhi.w	800814c <_dtoa_r+0x484>
 8007ff2:	2d00      	cmp	r5, #0
 8007ff4:	f000 80aa 	beq.w	800814c <_dtoa_r+0x484>
 8007ff8:	f1ba 0f00 	cmp.w	sl, #0
 8007ffc:	dd36      	ble.n	800806c <_dtoa_r+0x3a4>
 8007ffe:	4ac3      	ldr	r2, [pc, #780]	; (800830c <_dtoa_r+0x644>)
 8008000:	f00a 030f 	and.w	r3, sl, #15
 8008004:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008008:	ed93 7b00 	vldr	d7, [r3]
 800800c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008010:	ea4f 172a 	mov.w	r7, sl, asr #4
 8008014:	eeb0 8a47 	vmov.f32	s16, s14
 8008018:	eef0 8a67 	vmov.f32	s17, s15
 800801c:	d016      	beq.n	800804c <_dtoa_r+0x384>
 800801e:	4bbc      	ldr	r3, [pc, #752]	; (8008310 <_dtoa_r+0x648>)
 8008020:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008024:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008028:	f7f8 fc10 	bl	800084c <__aeabi_ddiv>
 800802c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008030:	f007 070f 	and.w	r7, r7, #15
 8008034:	2503      	movs	r5, #3
 8008036:	4eb6      	ldr	r6, [pc, #728]	; (8008310 <_dtoa_r+0x648>)
 8008038:	b957      	cbnz	r7, 8008050 <_dtoa_r+0x388>
 800803a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800803e:	ec53 2b18 	vmov	r2, r3, d8
 8008042:	f7f8 fc03 	bl	800084c <__aeabi_ddiv>
 8008046:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800804a:	e029      	b.n	80080a0 <_dtoa_r+0x3d8>
 800804c:	2502      	movs	r5, #2
 800804e:	e7f2      	b.n	8008036 <_dtoa_r+0x36e>
 8008050:	07f9      	lsls	r1, r7, #31
 8008052:	d508      	bpl.n	8008066 <_dtoa_r+0x39e>
 8008054:	ec51 0b18 	vmov	r0, r1, d8
 8008058:	e9d6 2300 	ldrd	r2, r3, [r6]
 800805c:	f7f8 facc 	bl	80005f8 <__aeabi_dmul>
 8008060:	ec41 0b18 	vmov	d8, r0, r1
 8008064:	3501      	adds	r5, #1
 8008066:	107f      	asrs	r7, r7, #1
 8008068:	3608      	adds	r6, #8
 800806a:	e7e5      	b.n	8008038 <_dtoa_r+0x370>
 800806c:	f000 80a6 	beq.w	80081bc <_dtoa_r+0x4f4>
 8008070:	f1ca 0600 	rsb	r6, sl, #0
 8008074:	4ba5      	ldr	r3, [pc, #660]	; (800830c <_dtoa_r+0x644>)
 8008076:	4fa6      	ldr	r7, [pc, #664]	; (8008310 <_dtoa_r+0x648>)
 8008078:	f006 020f 	and.w	r2, r6, #15
 800807c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008084:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008088:	f7f8 fab6 	bl	80005f8 <__aeabi_dmul>
 800808c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008090:	1136      	asrs	r6, r6, #4
 8008092:	2300      	movs	r3, #0
 8008094:	2502      	movs	r5, #2
 8008096:	2e00      	cmp	r6, #0
 8008098:	f040 8085 	bne.w	80081a6 <_dtoa_r+0x4de>
 800809c:	2b00      	cmp	r3, #0
 800809e:	d1d2      	bne.n	8008046 <_dtoa_r+0x37e>
 80080a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f000 808c 	beq.w	80081c0 <_dtoa_r+0x4f8>
 80080a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80080ac:	4b99      	ldr	r3, [pc, #612]	; (8008314 <_dtoa_r+0x64c>)
 80080ae:	2200      	movs	r2, #0
 80080b0:	4630      	mov	r0, r6
 80080b2:	4639      	mov	r1, r7
 80080b4:	f7f8 fd12 	bl	8000adc <__aeabi_dcmplt>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	f000 8081 	beq.w	80081c0 <_dtoa_r+0x4f8>
 80080be:	9b01      	ldr	r3, [sp, #4]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d07d      	beq.n	80081c0 <_dtoa_r+0x4f8>
 80080c4:	f1b9 0f00 	cmp.w	r9, #0
 80080c8:	dd3c      	ble.n	8008144 <_dtoa_r+0x47c>
 80080ca:	f10a 33ff 	add.w	r3, sl, #4294967295
 80080ce:	9307      	str	r3, [sp, #28]
 80080d0:	2200      	movs	r2, #0
 80080d2:	4b91      	ldr	r3, [pc, #580]	; (8008318 <_dtoa_r+0x650>)
 80080d4:	4630      	mov	r0, r6
 80080d6:	4639      	mov	r1, r7
 80080d8:	f7f8 fa8e 	bl	80005f8 <__aeabi_dmul>
 80080dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080e0:	3501      	adds	r5, #1
 80080e2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80080e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80080ea:	4628      	mov	r0, r5
 80080ec:	f7f8 fa1a 	bl	8000524 <__aeabi_i2d>
 80080f0:	4632      	mov	r2, r6
 80080f2:	463b      	mov	r3, r7
 80080f4:	f7f8 fa80 	bl	80005f8 <__aeabi_dmul>
 80080f8:	4b88      	ldr	r3, [pc, #544]	; (800831c <_dtoa_r+0x654>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	f7f8 f8c6 	bl	800028c <__adddf3>
 8008100:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008108:	9303      	str	r3, [sp, #12]
 800810a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800810c:	2b00      	cmp	r3, #0
 800810e:	d15c      	bne.n	80081ca <_dtoa_r+0x502>
 8008110:	4b83      	ldr	r3, [pc, #524]	; (8008320 <_dtoa_r+0x658>)
 8008112:	2200      	movs	r2, #0
 8008114:	4630      	mov	r0, r6
 8008116:	4639      	mov	r1, r7
 8008118:	f7f8 f8b6 	bl	8000288 <__aeabi_dsub>
 800811c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008120:	4606      	mov	r6, r0
 8008122:	460f      	mov	r7, r1
 8008124:	f7f8 fcf8 	bl	8000b18 <__aeabi_dcmpgt>
 8008128:	2800      	cmp	r0, #0
 800812a:	f040 8296 	bne.w	800865a <_dtoa_r+0x992>
 800812e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008132:	4630      	mov	r0, r6
 8008134:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008138:	4639      	mov	r1, r7
 800813a:	f7f8 fccf 	bl	8000adc <__aeabi_dcmplt>
 800813e:	2800      	cmp	r0, #0
 8008140:	f040 8288 	bne.w	8008654 <_dtoa_r+0x98c>
 8008144:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008148:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800814c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800814e:	2b00      	cmp	r3, #0
 8008150:	f2c0 8158 	blt.w	8008404 <_dtoa_r+0x73c>
 8008154:	f1ba 0f0e 	cmp.w	sl, #14
 8008158:	f300 8154 	bgt.w	8008404 <_dtoa_r+0x73c>
 800815c:	4b6b      	ldr	r3, [pc, #428]	; (800830c <_dtoa_r+0x644>)
 800815e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008162:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008168:	2b00      	cmp	r3, #0
 800816a:	f280 80e3 	bge.w	8008334 <_dtoa_r+0x66c>
 800816e:	9b01      	ldr	r3, [sp, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	f300 80df 	bgt.w	8008334 <_dtoa_r+0x66c>
 8008176:	f040 826d 	bne.w	8008654 <_dtoa_r+0x98c>
 800817a:	4b69      	ldr	r3, [pc, #420]	; (8008320 <_dtoa_r+0x658>)
 800817c:	2200      	movs	r2, #0
 800817e:	4640      	mov	r0, r8
 8008180:	4649      	mov	r1, r9
 8008182:	f7f8 fa39 	bl	80005f8 <__aeabi_dmul>
 8008186:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800818a:	f7f8 fcbb 	bl	8000b04 <__aeabi_dcmpge>
 800818e:	9e01      	ldr	r6, [sp, #4]
 8008190:	4637      	mov	r7, r6
 8008192:	2800      	cmp	r0, #0
 8008194:	f040 8243 	bne.w	800861e <_dtoa_r+0x956>
 8008198:	9d00      	ldr	r5, [sp, #0]
 800819a:	2331      	movs	r3, #49	; 0x31
 800819c:	f805 3b01 	strb.w	r3, [r5], #1
 80081a0:	f10a 0a01 	add.w	sl, sl, #1
 80081a4:	e23f      	b.n	8008626 <_dtoa_r+0x95e>
 80081a6:	07f2      	lsls	r2, r6, #31
 80081a8:	d505      	bpl.n	80081b6 <_dtoa_r+0x4ee>
 80081aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081ae:	f7f8 fa23 	bl	80005f8 <__aeabi_dmul>
 80081b2:	3501      	adds	r5, #1
 80081b4:	2301      	movs	r3, #1
 80081b6:	1076      	asrs	r6, r6, #1
 80081b8:	3708      	adds	r7, #8
 80081ba:	e76c      	b.n	8008096 <_dtoa_r+0x3ce>
 80081bc:	2502      	movs	r5, #2
 80081be:	e76f      	b.n	80080a0 <_dtoa_r+0x3d8>
 80081c0:	9b01      	ldr	r3, [sp, #4]
 80081c2:	f8cd a01c 	str.w	sl, [sp, #28]
 80081c6:	930c      	str	r3, [sp, #48]	; 0x30
 80081c8:	e78d      	b.n	80080e6 <_dtoa_r+0x41e>
 80081ca:	9900      	ldr	r1, [sp, #0]
 80081cc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80081ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081d0:	4b4e      	ldr	r3, [pc, #312]	; (800830c <_dtoa_r+0x644>)
 80081d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081d6:	4401      	add	r1, r0
 80081d8:	9102      	str	r1, [sp, #8]
 80081da:	9908      	ldr	r1, [sp, #32]
 80081dc:	eeb0 8a47 	vmov.f32	s16, s14
 80081e0:	eef0 8a67 	vmov.f32	s17, s15
 80081e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081ec:	2900      	cmp	r1, #0
 80081ee:	d045      	beq.n	800827c <_dtoa_r+0x5b4>
 80081f0:	494c      	ldr	r1, [pc, #304]	; (8008324 <_dtoa_r+0x65c>)
 80081f2:	2000      	movs	r0, #0
 80081f4:	f7f8 fb2a 	bl	800084c <__aeabi_ddiv>
 80081f8:	ec53 2b18 	vmov	r2, r3, d8
 80081fc:	f7f8 f844 	bl	8000288 <__aeabi_dsub>
 8008200:	9d00      	ldr	r5, [sp, #0]
 8008202:	ec41 0b18 	vmov	d8, r0, r1
 8008206:	4639      	mov	r1, r7
 8008208:	4630      	mov	r0, r6
 800820a:	f7f8 fca5 	bl	8000b58 <__aeabi_d2iz>
 800820e:	900c      	str	r0, [sp, #48]	; 0x30
 8008210:	f7f8 f988 	bl	8000524 <__aeabi_i2d>
 8008214:	4602      	mov	r2, r0
 8008216:	460b      	mov	r3, r1
 8008218:	4630      	mov	r0, r6
 800821a:	4639      	mov	r1, r7
 800821c:	f7f8 f834 	bl	8000288 <__aeabi_dsub>
 8008220:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008222:	3330      	adds	r3, #48	; 0x30
 8008224:	f805 3b01 	strb.w	r3, [r5], #1
 8008228:	ec53 2b18 	vmov	r2, r3, d8
 800822c:	4606      	mov	r6, r0
 800822e:	460f      	mov	r7, r1
 8008230:	f7f8 fc54 	bl	8000adc <__aeabi_dcmplt>
 8008234:	2800      	cmp	r0, #0
 8008236:	d165      	bne.n	8008304 <_dtoa_r+0x63c>
 8008238:	4632      	mov	r2, r6
 800823a:	463b      	mov	r3, r7
 800823c:	4935      	ldr	r1, [pc, #212]	; (8008314 <_dtoa_r+0x64c>)
 800823e:	2000      	movs	r0, #0
 8008240:	f7f8 f822 	bl	8000288 <__aeabi_dsub>
 8008244:	ec53 2b18 	vmov	r2, r3, d8
 8008248:	f7f8 fc48 	bl	8000adc <__aeabi_dcmplt>
 800824c:	2800      	cmp	r0, #0
 800824e:	f040 80b9 	bne.w	80083c4 <_dtoa_r+0x6fc>
 8008252:	9b02      	ldr	r3, [sp, #8]
 8008254:	429d      	cmp	r5, r3
 8008256:	f43f af75 	beq.w	8008144 <_dtoa_r+0x47c>
 800825a:	4b2f      	ldr	r3, [pc, #188]	; (8008318 <_dtoa_r+0x650>)
 800825c:	ec51 0b18 	vmov	r0, r1, d8
 8008260:	2200      	movs	r2, #0
 8008262:	f7f8 f9c9 	bl	80005f8 <__aeabi_dmul>
 8008266:	4b2c      	ldr	r3, [pc, #176]	; (8008318 <_dtoa_r+0x650>)
 8008268:	ec41 0b18 	vmov	d8, r0, r1
 800826c:	2200      	movs	r2, #0
 800826e:	4630      	mov	r0, r6
 8008270:	4639      	mov	r1, r7
 8008272:	f7f8 f9c1 	bl	80005f8 <__aeabi_dmul>
 8008276:	4606      	mov	r6, r0
 8008278:	460f      	mov	r7, r1
 800827a:	e7c4      	b.n	8008206 <_dtoa_r+0x53e>
 800827c:	ec51 0b17 	vmov	r0, r1, d7
 8008280:	f7f8 f9ba 	bl	80005f8 <__aeabi_dmul>
 8008284:	9b02      	ldr	r3, [sp, #8]
 8008286:	9d00      	ldr	r5, [sp, #0]
 8008288:	930c      	str	r3, [sp, #48]	; 0x30
 800828a:	ec41 0b18 	vmov	d8, r0, r1
 800828e:	4639      	mov	r1, r7
 8008290:	4630      	mov	r0, r6
 8008292:	f7f8 fc61 	bl	8000b58 <__aeabi_d2iz>
 8008296:	9011      	str	r0, [sp, #68]	; 0x44
 8008298:	f7f8 f944 	bl	8000524 <__aeabi_i2d>
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	4630      	mov	r0, r6
 80082a2:	4639      	mov	r1, r7
 80082a4:	f7f7 fff0 	bl	8000288 <__aeabi_dsub>
 80082a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80082aa:	3330      	adds	r3, #48	; 0x30
 80082ac:	f805 3b01 	strb.w	r3, [r5], #1
 80082b0:	9b02      	ldr	r3, [sp, #8]
 80082b2:	429d      	cmp	r5, r3
 80082b4:	4606      	mov	r6, r0
 80082b6:	460f      	mov	r7, r1
 80082b8:	f04f 0200 	mov.w	r2, #0
 80082bc:	d134      	bne.n	8008328 <_dtoa_r+0x660>
 80082be:	4b19      	ldr	r3, [pc, #100]	; (8008324 <_dtoa_r+0x65c>)
 80082c0:	ec51 0b18 	vmov	r0, r1, d8
 80082c4:	f7f7 ffe2 	bl	800028c <__adddf3>
 80082c8:	4602      	mov	r2, r0
 80082ca:	460b      	mov	r3, r1
 80082cc:	4630      	mov	r0, r6
 80082ce:	4639      	mov	r1, r7
 80082d0:	f7f8 fc22 	bl	8000b18 <__aeabi_dcmpgt>
 80082d4:	2800      	cmp	r0, #0
 80082d6:	d175      	bne.n	80083c4 <_dtoa_r+0x6fc>
 80082d8:	ec53 2b18 	vmov	r2, r3, d8
 80082dc:	4911      	ldr	r1, [pc, #68]	; (8008324 <_dtoa_r+0x65c>)
 80082de:	2000      	movs	r0, #0
 80082e0:	f7f7 ffd2 	bl	8000288 <__aeabi_dsub>
 80082e4:	4602      	mov	r2, r0
 80082e6:	460b      	mov	r3, r1
 80082e8:	4630      	mov	r0, r6
 80082ea:	4639      	mov	r1, r7
 80082ec:	f7f8 fbf6 	bl	8000adc <__aeabi_dcmplt>
 80082f0:	2800      	cmp	r0, #0
 80082f2:	f43f af27 	beq.w	8008144 <_dtoa_r+0x47c>
 80082f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082f8:	1e6b      	subs	r3, r5, #1
 80082fa:	930c      	str	r3, [sp, #48]	; 0x30
 80082fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008300:	2b30      	cmp	r3, #48	; 0x30
 8008302:	d0f8      	beq.n	80082f6 <_dtoa_r+0x62e>
 8008304:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008308:	e04a      	b.n	80083a0 <_dtoa_r+0x6d8>
 800830a:	bf00      	nop
 800830c:	08009e50 	.word	0x08009e50
 8008310:	08009e28 	.word	0x08009e28
 8008314:	3ff00000 	.word	0x3ff00000
 8008318:	40240000 	.word	0x40240000
 800831c:	401c0000 	.word	0x401c0000
 8008320:	40140000 	.word	0x40140000
 8008324:	3fe00000 	.word	0x3fe00000
 8008328:	4baf      	ldr	r3, [pc, #700]	; (80085e8 <_dtoa_r+0x920>)
 800832a:	f7f8 f965 	bl	80005f8 <__aeabi_dmul>
 800832e:	4606      	mov	r6, r0
 8008330:	460f      	mov	r7, r1
 8008332:	e7ac      	b.n	800828e <_dtoa_r+0x5c6>
 8008334:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008338:	9d00      	ldr	r5, [sp, #0]
 800833a:	4642      	mov	r2, r8
 800833c:	464b      	mov	r3, r9
 800833e:	4630      	mov	r0, r6
 8008340:	4639      	mov	r1, r7
 8008342:	f7f8 fa83 	bl	800084c <__aeabi_ddiv>
 8008346:	f7f8 fc07 	bl	8000b58 <__aeabi_d2iz>
 800834a:	9002      	str	r0, [sp, #8]
 800834c:	f7f8 f8ea 	bl	8000524 <__aeabi_i2d>
 8008350:	4642      	mov	r2, r8
 8008352:	464b      	mov	r3, r9
 8008354:	f7f8 f950 	bl	80005f8 <__aeabi_dmul>
 8008358:	4602      	mov	r2, r0
 800835a:	460b      	mov	r3, r1
 800835c:	4630      	mov	r0, r6
 800835e:	4639      	mov	r1, r7
 8008360:	f7f7 ff92 	bl	8000288 <__aeabi_dsub>
 8008364:	9e02      	ldr	r6, [sp, #8]
 8008366:	9f01      	ldr	r7, [sp, #4]
 8008368:	3630      	adds	r6, #48	; 0x30
 800836a:	f805 6b01 	strb.w	r6, [r5], #1
 800836e:	9e00      	ldr	r6, [sp, #0]
 8008370:	1bae      	subs	r6, r5, r6
 8008372:	42b7      	cmp	r7, r6
 8008374:	4602      	mov	r2, r0
 8008376:	460b      	mov	r3, r1
 8008378:	d137      	bne.n	80083ea <_dtoa_r+0x722>
 800837a:	f7f7 ff87 	bl	800028c <__adddf3>
 800837e:	4642      	mov	r2, r8
 8008380:	464b      	mov	r3, r9
 8008382:	4606      	mov	r6, r0
 8008384:	460f      	mov	r7, r1
 8008386:	f7f8 fbc7 	bl	8000b18 <__aeabi_dcmpgt>
 800838a:	b9c8      	cbnz	r0, 80083c0 <_dtoa_r+0x6f8>
 800838c:	4642      	mov	r2, r8
 800838e:	464b      	mov	r3, r9
 8008390:	4630      	mov	r0, r6
 8008392:	4639      	mov	r1, r7
 8008394:	f7f8 fb98 	bl	8000ac8 <__aeabi_dcmpeq>
 8008398:	b110      	cbz	r0, 80083a0 <_dtoa_r+0x6d8>
 800839a:	9b02      	ldr	r3, [sp, #8]
 800839c:	07d9      	lsls	r1, r3, #31
 800839e:	d40f      	bmi.n	80083c0 <_dtoa_r+0x6f8>
 80083a0:	4620      	mov	r0, r4
 80083a2:	4659      	mov	r1, fp
 80083a4:	f000 fcfa 	bl	8008d9c <_Bfree>
 80083a8:	2300      	movs	r3, #0
 80083aa:	702b      	strb	r3, [r5, #0]
 80083ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083ae:	f10a 0001 	add.w	r0, sl, #1
 80083b2:	6018      	str	r0, [r3, #0]
 80083b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f43f acd8 	beq.w	8007d6c <_dtoa_r+0xa4>
 80083bc:	601d      	str	r5, [r3, #0]
 80083be:	e4d5      	b.n	8007d6c <_dtoa_r+0xa4>
 80083c0:	f8cd a01c 	str.w	sl, [sp, #28]
 80083c4:	462b      	mov	r3, r5
 80083c6:	461d      	mov	r5, r3
 80083c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083cc:	2a39      	cmp	r2, #57	; 0x39
 80083ce:	d108      	bne.n	80083e2 <_dtoa_r+0x71a>
 80083d0:	9a00      	ldr	r2, [sp, #0]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d1f7      	bne.n	80083c6 <_dtoa_r+0x6fe>
 80083d6:	9a07      	ldr	r2, [sp, #28]
 80083d8:	9900      	ldr	r1, [sp, #0]
 80083da:	3201      	adds	r2, #1
 80083dc:	9207      	str	r2, [sp, #28]
 80083de:	2230      	movs	r2, #48	; 0x30
 80083e0:	700a      	strb	r2, [r1, #0]
 80083e2:	781a      	ldrb	r2, [r3, #0]
 80083e4:	3201      	adds	r2, #1
 80083e6:	701a      	strb	r2, [r3, #0]
 80083e8:	e78c      	b.n	8008304 <_dtoa_r+0x63c>
 80083ea:	4b7f      	ldr	r3, [pc, #508]	; (80085e8 <_dtoa_r+0x920>)
 80083ec:	2200      	movs	r2, #0
 80083ee:	f7f8 f903 	bl	80005f8 <__aeabi_dmul>
 80083f2:	2200      	movs	r2, #0
 80083f4:	2300      	movs	r3, #0
 80083f6:	4606      	mov	r6, r0
 80083f8:	460f      	mov	r7, r1
 80083fa:	f7f8 fb65 	bl	8000ac8 <__aeabi_dcmpeq>
 80083fe:	2800      	cmp	r0, #0
 8008400:	d09b      	beq.n	800833a <_dtoa_r+0x672>
 8008402:	e7cd      	b.n	80083a0 <_dtoa_r+0x6d8>
 8008404:	9a08      	ldr	r2, [sp, #32]
 8008406:	2a00      	cmp	r2, #0
 8008408:	f000 80c4 	beq.w	8008594 <_dtoa_r+0x8cc>
 800840c:	9a05      	ldr	r2, [sp, #20]
 800840e:	2a01      	cmp	r2, #1
 8008410:	f300 80a8 	bgt.w	8008564 <_dtoa_r+0x89c>
 8008414:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008416:	2a00      	cmp	r2, #0
 8008418:	f000 80a0 	beq.w	800855c <_dtoa_r+0x894>
 800841c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008420:	9e06      	ldr	r6, [sp, #24]
 8008422:	4645      	mov	r5, r8
 8008424:	9a04      	ldr	r2, [sp, #16]
 8008426:	2101      	movs	r1, #1
 8008428:	441a      	add	r2, r3
 800842a:	4620      	mov	r0, r4
 800842c:	4498      	add	r8, r3
 800842e:	9204      	str	r2, [sp, #16]
 8008430:	f000 fd70 	bl	8008f14 <__i2b>
 8008434:	4607      	mov	r7, r0
 8008436:	2d00      	cmp	r5, #0
 8008438:	dd0b      	ble.n	8008452 <_dtoa_r+0x78a>
 800843a:	9b04      	ldr	r3, [sp, #16]
 800843c:	2b00      	cmp	r3, #0
 800843e:	dd08      	ble.n	8008452 <_dtoa_r+0x78a>
 8008440:	42ab      	cmp	r3, r5
 8008442:	9a04      	ldr	r2, [sp, #16]
 8008444:	bfa8      	it	ge
 8008446:	462b      	movge	r3, r5
 8008448:	eba8 0803 	sub.w	r8, r8, r3
 800844c:	1aed      	subs	r5, r5, r3
 800844e:	1ad3      	subs	r3, r2, r3
 8008450:	9304      	str	r3, [sp, #16]
 8008452:	9b06      	ldr	r3, [sp, #24]
 8008454:	b1fb      	cbz	r3, 8008496 <_dtoa_r+0x7ce>
 8008456:	9b08      	ldr	r3, [sp, #32]
 8008458:	2b00      	cmp	r3, #0
 800845a:	f000 809f 	beq.w	800859c <_dtoa_r+0x8d4>
 800845e:	2e00      	cmp	r6, #0
 8008460:	dd11      	ble.n	8008486 <_dtoa_r+0x7be>
 8008462:	4639      	mov	r1, r7
 8008464:	4632      	mov	r2, r6
 8008466:	4620      	mov	r0, r4
 8008468:	f000 fe10 	bl	800908c <__pow5mult>
 800846c:	465a      	mov	r2, fp
 800846e:	4601      	mov	r1, r0
 8008470:	4607      	mov	r7, r0
 8008472:	4620      	mov	r0, r4
 8008474:	f000 fd64 	bl	8008f40 <__multiply>
 8008478:	4659      	mov	r1, fp
 800847a:	9007      	str	r0, [sp, #28]
 800847c:	4620      	mov	r0, r4
 800847e:	f000 fc8d 	bl	8008d9c <_Bfree>
 8008482:	9b07      	ldr	r3, [sp, #28]
 8008484:	469b      	mov	fp, r3
 8008486:	9b06      	ldr	r3, [sp, #24]
 8008488:	1b9a      	subs	r2, r3, r6
 800848a:	d004      	beq.n	8008496 <_dtoa_r+0x7ce>
 800848c:	4659      	mov	r1, fp
 800848e:	4620      	mov	r0, r4
 8008490:	f000 fdfc 	bl	800908c <__pow5mult>
 8008494:	4683      	mov	fp, r0
 8008496:	2101      	movs	r1, #1
 8008498:	4620      	mov	r0, r4
 800849a:	f000 fd3b 	bl	8008f14 <__i2b>
 800849e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	4606      	mov	r6, r0
 80084a4:	dd7c      	ble.n	80085a0 <_dtoa_r+0x8d8>
 80084a6:	461a      	mov	r2, r3
 80084a8:	4601      	mov	r1, r0
 80084aa:	4620      	mov	r0, r4
 80084ac:	f000 fdee 	bl	800908c <__pow5mult>
 80084b0:	9b05      	ldr	r3, [sp, #20]
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	4606      	mov	r6, r0
 80084b6:	dd76      	ble.n	80085a6 <_dtoa_r+0x8de>
 80084b8:	2300      	movs	r3, #0
 80084ba:	9306      	str	r3, [sp, #24]
 80084bc:	6933      	ldr	r3, [r6, #16]
 80084be:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80084c2:	6918      	ldr	r0, [r3, #16]
 80084c4:	f000 fcd6 	bl	8008e74 <__hi0bits>
 80084c8:	f1c0 0020 	rsb	r0, r0, #32
 80084cc:	9b04      	ldr	r3, [sp, #16]
 80084ce:	4418      	add	r0, r3
 80084d0:	f010 001f 	ands.w	r0, r0, #31
 80084d4:	f000 8086 	beq.w	80085e4 <_dtoa_r+0x91c>
 80084d8:	f1c0 0320 	rsb	r3, r0, #32
 80084dc:	2b04      	cmp	r3, #4
 80084de:	dd7f      	ble.n	80085e0 <_dtoa_r+0x918>
 80084e0:	f1c0 001c 	rsb	r0, r0, #28
 80084e4:	9b04      	ldr	r3, [sp, #16]
 80084e6:	4403      	add	r3, r0
 80084e8:	4480      	add	r8, r0
 80084ea:	4405      	add	r5, r0
 80084ec:	9304      	str	r3, [sp, #16]
 80084ee:	f1b8 0f00 	cmp.w	r8, #0
 80084f2:	dd05      	ble.n	8008500 <_dtoa_r+0x838>
 80084f4:	4659      	mov	r1, fp
 80084f6:	4642      	mov	r2, r8
 80084f8:	4620      	mov	r0, r4
 80084fa:	f000 fe21 	bl	8009140 <__lshift>
 80084fe:	4683      	mov	fp, r0
 8008500:	9b04      	ldr	r3, [sp, #16]
 8008502:	2b00      	cmp	r3, #0
 8008504:	dd05      	ble.n	8008512 <_dtoa_r+0x84a>
 8008506:	4631      	mov	r1, r6
 8008508:	461a      	mov	r2, r3
 800850a:	4620      	mov	r0, r4
 800850c:	f000 fe18 	bl	8009140 <__lshift>
 8008510:	4606      	mov	r6, r0
 8008512:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008514:	2b00      	cmp	r3, #0
 8008516:	d069      	beq.n	80085ec <_dtoa_r+0x924>
 8008518:	4631      	mov	r1, r6
 800851a:	4658      	mov	r0, fp
 800851c:	f000 fe7c 	bl	8009218 <__mcmp>
 8008520:	2800      	cmp	r0, #0
 8008522:	da63      	bge.n	80085ec <_dtoa_r+0x924>
 8008524:	2300      	movs	r3, #0
 8008526:	4659      	mov	r1, fp
 8008528:	220a      	movs	r2, #10
 800852a:	4620      	mov	r0, r4
 800852c:	f000 fc58 	bl	8008de0 <__multadd>
 8008530:	9b08      	ldr	r3, [sp, #32]
 8008532:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008536:	4683      	mov	fp, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	f000 818f 	beq.w	800885c <_dtoa_r+0xb94>
 800853e:	4639      	mov	r1, r7
 8008540:	2300      	movs	r3, #0
 8008542:	220a      	movs	r2, #10
 8008544:	4620      	mov	r0, r4
 8008546:	f000 fc4b 	bl	8008de0 <__multadd>
 800854a:	f1b9 0f00 	cmp.w	r9, #0
 800854e:	4607      	mov	r7, r0
 8008550:	f300 808e 	bgt.w	8008670 <_dtoa_r+0x9a8>
 8008554:	9b05      	ldr	r3, [sp, #20]
 8008556:	2b02      	cmp	r3, #2
 8008558:	dc50      	bgt.n	80085fc <_dtoa_r+0x934>
 800855a:	e089      	b.n	8008670 <_dtoa_r+0x9a8>
 800855c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800855e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008562:	e75d      	b.n	8008420 <_dtoa_r+0x758>
 8008564:	9b01      	ldr	r3, [sp, #4]
 8008566:	1e5e      	subs	r6, r3, #1
 8008568:	9b06      	ldr	r3, [sp, #24]
 800856a:	42b3      	cmp	r3, r6
 800856c:	bfbf      	itttt	lt
 800856e:	9b06      	ldrlt	r3, [sp, #24]
 8008570:	9606      	strlt	r6, [sp, #24]
 8008572:	1af2      	sublt	r2, r6, r3
 8008574:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008576:	bfb6      	itet	lt
 8008578:	189b      	addlt	r3, r3, r2
 800857a:	1b9e      	subge	r6, r3, r6
 800857c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800857e:	9b01      	ldr	r3, [sp, #4]
 8008580:	bfb8      	it	lt
 8008582:	2600      	movlt	r6, #0
 8008584:	2b00      	cmp	r3, #0
 8008586:	bfb5      	itete	lt
 8008588:	eba8 0503 	sublt.w	r5, r8, r3
 800858c:	9b01      	ldrge	r3, [sp, #4]
 800858e:	2300      	movlt	r3, #0
 8008590:	4645      	movge	r5, r8
 8008592:	e747      	b.n	8008424 <_dtoa_r+0x75c>
 8008594:	9e06      	ldr	r6, [sp, #24]
 8008596:	9f08      	ldr	r7, [sp, #32]
 8008598:	4645      	mov	r5, r8
 800859a:	e74c      	b.n	8008436 <_dtoa_r+0x76e>
 800859c:	9a06      	ldr	r2, [sp, #24]
 800859e:	e775      	b.n	800848c <_dtoa_r+0x7c4>
 80085a0:	9b05      	ldr	r3, [sp, #20]
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	dc18      	bgt.n	80085d8 <_dtoa_r+0x910>
 80085a6:	9b02      	ldr	r3, [sp, #8]
 80085a8:	b9b3      	cbnz	r3, 80085d8 <_dtoa_r+0x910>
 80085aa:	9b03      	ldr	r3, [sp, #12]
 80085ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085b0:	b9a3      	cbnz	r3, 80085dc <_dtoa_r+0x914>
 80085b2:	9b03      	ldr	r3, [sp, #12]
 80085b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085b8:	0d1b      	lsrs	r3, r3, #20
 80085ba:	051b      	lsls	r3, r3, #20
 80085bc:	b12b      	cbz	r3, 80085ca <_dtoa_r+0x902>
 80085be:	9b04      	ldr	r3, [sp, #16]
 80085c0:	3301      	adds	r3, #1
 80085c2:	9304      	str	r3, [sp, #16]
 80085c4:	f108 0801 	add.w	r8, r8, #1
 80085c8:	2301      	movs	r3, #1
 80085ca:	9306      	str	r3, [sp, #24]
 80085cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	f47f af74 	bne.w	80084bc <_dtoa_r+0x7f4>
 80085d4:	2001      	movs	r0, #1
 80085d6:	e779      	b.n	80084cc <_dtoa_r+0x804>
 80085d8:	2300      	movs	r3, #0
 80085da:	e7f6      	b.n	80085ca <_dtoa_r+0x902>
 80085dc:	9b02      	ldr	r3, [sp, #8]
 80085de:	e7f4      	b.n	80085ca <_dtoa_r+0x902>
 80085e0:	d085      	beq.n	80084ee <_dtoa_r+0x826>
 80085e2:	4618      	mov	r0, r3
 80085e4:	301c      	adds	r0, #28
 80085e6:	e77d      	b.n	80084e4 <_dtoa_r+0x81c>
 80085e8:	40240000 	.word	0x40240000
 80085ec:	9b01      	ldr	r3, [sp, #4]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	dc38      	bgt.n	8008664 <_dtoa_r+0x99c>
 80085f2:	9b05      	ldr	r3, [sp, #20]
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	dd35      	ble.n	8008664 <_dtoa_r+0x99c>
 80085f8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80085fc:	f1b9 0f00 	cmp.w	r9, #0
 8008600:	d10d      	bne.n	800861e <_dtoa_r+0x956>
 8008602:	4631      	mov	r1, r6
 8008604:	464b      	mov	r3, r9
 8008606:	2205      	movs	r2, #5
 8008608:	4620      	mov	r0, r4
 800860a:	f000 fbe9 	bl	8008de0 <__multadd>
 800860e:	4601      	mov	r1, r0
 8008610:	4606      	mov	r6, r0
 8008612:	4658      	mov	r0, fp
 8008614:	f000 fe00 	bl	8009218 <__mcmp>
 8008618:	2800      	cmp	r0, #0
 800861a:	f73f adbd 	bgt.w	8008198 <_dtoa_r+0x4d0>
 800861e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008620:	9d00      	ldr	r5, [sp, #0]
 8008622:	ea6f 0a03 	mvn.w	sl, r3
 8008626:	f04f 0800 	mov.w	r8, #0
 800862a:	4631      	mov	r1, r6
 800862c:	4620      	mov	r0, r4
 800862e:	f000 fbb5 	bl	8008d9c <_Bfree>
 8008632:	2f00      	cmp	r7, #0
 8008634:	f43f aeb4 	beq.w	80083a0 <_dtoa_r+0x6d8>
 8008638:	f1b8 0f00 	cmp.w	r8, #0
 800863c:	d005      	beq.n	800864a <_dtoa_r+0x982>
 800863e:	45b8      	cmp	r8, r7
 8008640:	d003      	beq.n	800864a <_dtoa_r+0x982>
 8008642:	4641      	mov	r1, r8
 8008644:	4620      	mov	r0, r4
 8008646:	f000 fba9 	bl	8008d9c <_Bfree>
 800864a:	4639      	mov	r1, r7
 800864c:	4620      	mov	r0, r4
 800864e:	f000 fba5 	bl	8008d9c <_Bfree>
 8008652:	e6a5      	b.n	80083a0 <_dtoa_r+0x6d8>
 8008654:	2600      	movs	r6, #0
 8008656:	4637      	mov	r7, r6
 8008658:	e7e1      	b.n	800861e <_dtoa_r+0x956>
 800865a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800865c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008660:	4637      	mov	r7, r6
 8008662:	e599      	b.n	8008198 <_dtoa_r+0x4d0>
 8008664:	9b08      	ldr	r3, [sp, #32]
 8008666:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800866a:	2b00      	cmp	r3, #0
 800866c:	f000 80fd 	beq.w	800886a <_dtoa_r+0xba2>
 8008670:	2d00      	cmp	r5, #0
 8008672:	dd05      	ble.n	8008680 <_dtoa_r+0x9b8>
 8008674:	4639      	mov	r1, r7
 8008676:	462a      	mov	r2, r5
 8008678:	4620      	mov	r0, r4
 800867a:	f000 fd61 	bl	8009140 <__lshift>
 800867e:	4607      	mov	r7, r0
 8008680:	9b06      	ldr	r3, [sp, #24]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d05c      	beq.n	8008740 <_dtoa_r+0xa78>
 8008686:	6879      	ldr	r1, [r7, #4]
 8008688:	4620      	mov	r0, r4
 800868a:	f000 fb47 	bl	8008d1c <_Balloc>
 800868e:	4605      	mov	r5, r0
 8008690:	b928      	cbnz	r0, 800869e <_dtoa_r+0x9d6>
 8008692:	4b80      	ldr	r3, [pc, #512]	; (8008894 <_dtoa_r+0xbcc>)
 8008694:	4602      	mov	r2, r0
 8008696:	f240 21ea 	movw	r1, #746	; 0x2ea
 800869a:	f7ff bb2e 	b.w	8007cfa <_dtoa_r+0x32>
 800869e:	693a      	ldr	r2, [r7, #16]
 80086a0:	3202      	adds	r2, #2
 80086a2:	0092      	lsls	r2, r2, #2
 80086a4:	f107 010c 	add.w	r1, r7, #12
 80086a8:	300c      	adds	r0, #12
 80086aa:	f7fe fc39 	bl	8006f20 <memcpy>
 80086ae:	2201      	movs	r2, #1
 80086b0:	4629      	mov	r1, r5
 80086b2:	4620      	mov	r0, r4
 80086b4:	f000 fd44 	bl	8009140 <__lshift>
 80086b8:	9b00      	ldr	r3, [sp, #0]
 80086ba:	3301      	adds	r3, #1
 80086bc:	9301      	str	r3, [sp, #4]
 80086be:	9b00      	ldr	r3, [sp, #0]
 80086c0:	444b      	add	r3, r9
 80086c2:	9307      	str	r3, [sp, #28]
 80086c4:	9b02      	ldr	r3, [sp, #8]
 80086c6:	f003 0301 	and.w	r3, r3, #1
 80086ca:	46b8      	mov	r8, r7
 80086cc:	9306      	str	r3, [sp, #24]
 80086ce:	4607      	mov	r7, r0
 80086d0:	9b01      	ldr	r3, [sp, #4]
 80086d2:	4631      	mov	r1, r6
 80086d4:	3b01      	subs	r3, #1
 80086d6:	4658      	mov	r0, fp
 80086d8:	9302      	str	r3, [sp, #8]
 80086da:	f7ff fa69 	bl	8007bb0 <quorem>
 80086de:	4603      	mov	r3, r0
 80086e0:	3330      	adds	r3, #48	; 0x30
 80086e2:	9004      	str	r0, [sp, #16]
 80086e4:	4641      	mov	r1, r8
 80086e6:	4658      	mov	r0, fp
 80086e8:	9308      	str	r3, [sp, #32]
 80086ea:	f000 fd95 	bl	8009218 <__mcmp>
 80086ee:	463a      	mov	r2, r7
 80086f0:	4681      	mov	r9, r0
 80086f2:	4631      	mov	r1, r6
 80086f4:	4620      	mov	r0, r4
 80086f6:	f000 fdab 	bl	8009250 <__mdiff>
 80086fa:	68c2      	ldr	r2, [r0, #12]
 80086fc:	9b08      	ldr	r3, [sp, #32]
 80086fe:	4605      	mov	r5, r0
 8008700:	bb02      	cbnz	r2, 8008744 <_dtoa_r+0xa7c>
 8008702:	4601      	mov	r1, r0
 8008704:	4658      	mov	r0, fp
 8008706:	f000 fd87 	bl	8009218 <__mcmp>
 800870a:	9b08      	ldr	r3, [sp, #32]
 800870c:	4602      	mov	r2, r0
 800870e:	4629      	mov	r1, r5
 8008710:	4620      	mov	r0, r4
 8008712:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008716:	f000 fb41 	bl	8008d9c <_Bfree>
 800871a:	9b05      	ldr	r3, [sp, #20]
 800871c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800871e:	9d01      	ldr	r5, [sp, #4]
 8008720:	ea43 0102 	orr.w	r1, r3, r2
 8008724:	9b06      	ldr	r3, [sp, #24]
 8008726:	430b      	orrs	r3, r1
 8008728:	9b08      	ldr	r3, [sp, #32]
 800872a:	d10d      	bne.n	8008748 <_dtoa_r+0xa80>
 800872c:	2b39      	cmp	r3, #57	; 0x39
 800872e:	d029      	beq.n	8008784 <_dtoa_r+0xabc>
 8008730:	f1b9 0f00 	cmp.w	r9, #0
 8008734:	dd01      	ble.n	800873a <_dtoa_r+0xa72>
 8008736:	9b04      	ldr	r3, [sp, #16]
 8008738:	3331      	adds	r3, #49	; 0x31
 800873a:	9a02      	ldr	r2, [sp, #8]
 800873c:	7013      	strb	r3, [r2, #0]
 800873e:	e774      	b.n	800862a <_dtoa_r+0x962>
 8008740:	4638      	mov	r0, r7
 8008742:	e7b9      	b.n	80086b8 <_dtoa_r+0x9f0>
 8008744:	2201      	movs	r2, #1
 8008746:	e7e2      	b.n	800870e <_dtoa_r+0xa46>
 8008748:	f1b9 0f00 	cmp.w	r9, #0
 800874c:	db06      	blt.n	800875c <_dtoa_r+0xa94>
 800874e:	9905      	ldr	r1, [sp, #20]
 8008750:	ea41 0909 	orr.w	r9, r1, r9
 8008754:	9906      	ldr	r1, [sp, #24]
 8008756:	ea59 0101 	orrs.w	r1, r9, r1
 800875a:	d120      	bne.n	800879e <_dtoa_r+0xad6>
 800875c:	2a00      	cmp	r2, #0
 800875e:	ddec      	ble.n	800873a <_dtoa_r+0xa72>
 8008760:	4659      	mov	r1, fp
 8008762:	2201      	movs	r2, #1
 8008764:	4620      	mov	r0, r4
 8008766:	9301      	str	r3, [sp, #4]
 8008768:	f000 fcea 	bl	8009140 <__lshift>
 800876c:	4631      	mov	r1, r6
 800876e:	4683      	mov	fp, r0
 8008770:	f000 fd52 	bl	8009218 <__mcmp>
 8008774:	2800      	cmp	r0, #0
 8008776:	9b01      	ldr	r3, [sp, #4]
 8008778:	dc02      	bgt.n	8008780 <_dtoa_r+0xab8>
 800877a:	d1de      	bne.n	800873a <_dtoa_r+0xa72>
 800877c:	07da      	lsls	r2, r3, #31
 800877e:	d5dc      	bpl.n	800873a <_dtoa_r+0xa72>
 8008780:	2b39      	cmp	r3, #57	; 0x39
 8008782:	d1d8      	bne.n	8008736 <_dtoa_r+0xa6e>
 8008784:	9a02      	ldr	r2, [sp, #8]
 8008786:	2339      	movs	r3, #57	; 0x39
 8008788:	7013      	strb	r3, [r2, #0]
 800878a:	462b      	mov	r3, r5
 800878c:	461d      	mov	r5, r3
 800878e:	3b01      	subs	r3, #1
 8008790:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008794:	2a39      	cmp	r2, #57	; 0x39
 8008796:	d050      	beq.n	800883a <_dtoa_r+0xb72>
 8008798:	3201      	adds	r2, #1
 800879a:	701a      	strb	r2, [r3, #0]
 800879c:	e745      	b.n	800862a <_dtoa_r+0x962>
 800879e:	2a00      	cmp	r2, #0
 80087a0:	dd03      	ble.n	80087aa <_dtoa_r+0xae2>
 80087a2:	2b39      	cmp	r3, #57	; 0x39
 80087a4:	d0ee      	beq.n	8008784 <_dtoa_r+0xabc>
 80087a6:	3301      	adds	r3, #1
 80087a8:	e7c7      	b.n	800873a <_dtoa_r+0xa72>
 80087aa:	9a01      	ldr	r2, [sp, #4]
 80087ac:	9907      	ldr	r1, [sp, #28]
 80087ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 80087b2:	428a      	cmp	r2, r1
 80087b4:	d02a      	beq.n	800880c <_dtoa_r+0xb44>
 80087b6:	4659      	mov	r1, fp
 80087b8:	2300      	movs	r3, #0
 80087ba:	220a      	movs	r2, #10
 80087bc:	4620      	mov	r0, r4
 80087be:	f000 fb0f 	bl	8008de0 <__multadd>
 80087c2:	45b8      	cmp	r8, r7
 80087c4:	4683      	mov	fp, r0
 80087c6:	f04f 0300 	mov.w	r3, #0
 80087ca:	f04f 020a 	mov.w	r2, #10
 80087ce:	4641      	mov	r1, r8
 80087d0:	4620      	mov	r0, r4
 80087d2:	d107      	bne.n	80087e4 <_dtoa_r+0xb1c>
 80087d4:	f000 fb04 	bl	8008de0 <__multadd>
 80087d8:	4680      	mov	r8, r0
 80087da:	4607      	mov	r7, r0
 80087dc:	9b01      	ldr	r3, [sp, #4]
 80087de:	3301      	adds	r3, #1
 80087e0:	9301      	str	r3, [sp, #4]
 80087e2:	e775      	b.n	80086d0 <_dtoa_r+0xa08>
 80087e4:	f000 fafc 	bl	8008de0 <__multadd>
 80087e8:	4639      	mov	r1, r7
 80087ea:	4680      	mov	r8, r0
 80087ec:	2300      	movs	r3, #0
 80087ee:	220a      	movs	r2, #10
 80087f0:	4620      	mov	r0, r4
 80087f2:	f000 faf5 	bl	8008de0 <__multadd>
 80087f6:	4607      	mov	r7, r0
 80087f8:	e7f0      	b.n	80087dc <_dtoa_r+0xb14>
 80087fa:	f1b9 0f00 	cmp.w	r9, #0
 80087fe:	9a00      	ldr	r2, [sp, #0]
 8008800:	bfcc      	ite	gt
 8008802:	464d      	movgt	r5, r9
 8008804:	2501      	movle	r5, #1
 8008806:	4415      	add	r5, r2
 8008808:	f04f 0800 	mov.w	r8, #0
 800880c:	4659      	mov	r1, fp
 800880e:	2201      	movs	r2, #1
 8008810:	4620      	mov	r0, r4
 8008812:	9301      	str	r3, [sp, #4]
 8008814:	f000 fc94 	bl	8009140 <__lshift>
 8008818:	4631      	mov	r1, r6
 800881a:	4683      	mov	fp, r0
 800881c:	f000 fcfc 	bl	8009218 <__mcmp>
 8008820:	2800      	cmp	r0, #0
 8008822:	dcb2      	bgt.n	800878a <_dtoa_r+0xac2>
 8008824:	d102      	bne.n	800882c <_dtoa_r+0xb64>
 8008826:	9b01      	ldr	r3, [sp, #4]
 8008828:	07db      	lsls	r3, r3, #31
 800882a:	d4ae      	bmi.n	800878a <_dtoa_r+0xac2>
 800882c:	462b      	mov	r3, r5
 800882e:	461d      	mov	r5, r3
 8008830:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008834:	2a30      	cmp	r2, #48	; 0x30
 8008836:	d0fa      	beq.n	800882e <_dtoa_r+0xb66>
 8008838:	e6f7      	b.n	800862a <_dtoa_r+0x962>
 800883a:	9a00      	ldr	r2, [sp, #0]
 800883c:	429a      	cmp	r2, r3
 800883e:	d1a5      	bne.n	800878c <_dtoa_r+0xac4>
 8008840:	f10a 0a01 	add.w	sl, sl, #1
 8008844:	2331      	movs	r3, #49	; 0x31
 8008846:	e779      	b.n	800873c <_dtoa_r+0xa74>
 8008848:	4b13      	ldr	r3, [pc, #76]	; (8008898 <_dtoa_r+0xbd0>)
 800884a:	f7ff baaf 	b.w	8007dac <_dtoa_r+0xe4>
 800884e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008850:	2b00      	cmp	r3, #0
 8008852:	f47f aa86 	bne.w	8007d62 <_dtoa_r+0x9a>
 8008856:	4b11      	ldr	r3, [pc, #68]	; (800889c <_dtoa_r+0xbd4>)
 8008858:	f7ff baa8 	b.w	8007dac <_dtoa_r+0xe4>
 800885c:	f1b9 0f00 	cmp.w	r9, #0
 8008860:	dc03      	bgt.n	800886a <_dtoa_r+0xba2>
 8008862:	9b05      	ldr	r3, [sp, #20]
 8008864:	2b02      	cmp	r3, #2
 8008866:	f73f aec9 	bgt.w	80085fc <_dtoa_r+0x934>
 800886a:	9d00      	ldr	r5, [sp, #0]
 800886c:	4631      	mov	r1, r6
 800886e:	4658      	mov	r0, fp
 8008870:	f7ff f99e 	bl	8007bb0 <quorem>
 8008874:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008878:	f805 3b01 	strb.w	r3, [r5], #1
 800887c:	9a00      	ldr	r2, [sp, #0]
 800887e:	1aaa      	subs	r2, r5, r2
 8008880:	4591      	cmp	r9, r2
 8008882:	ddba      	ble.n	80087fa <_dtoa_r+0xb32>
 8008884:	4659      	mov	r1, fp
 8008886:	2300      	movs	r3, #0
 8008888:	220a      	movs	r2, #10
 800888a:	4620      	mov	r0, r4
 800888c:	f000 faa8 	bl	8008de0 <__multadd>
 8008890:	4683      	mov	fp, r0
 8008892:	e7eb      	b.n	800886c <_dtoa_r+0xba4>
 8008894:	08009d50 	.word	0x08009d50
 8008898:	08009c0c 	.word	0x08009c0c
 800889c:	08009ce4 	.word	0x08009ce4

080088a0 <__sflush_r>:
 80088a0:	898a      	ldrh	r2, [r1, #12]
 80088a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088a6:	4605      	mov	r5, r0
 80088a8:	0710      	lsls	r0, r2, #28
 80088aa:	460c      	mov	r4, r1
 80088ac:	d458      	bmi.n	8008960 <__sflush_r+0xc0>
 80088ae:	684b      	ldr	r3, [r1, #4]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	dc05      	bgt.n	80088c0 <__sflush_r+0x20>
 80088b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	dc02      	bgt.n	80088c0 <__sflush_r+0x20>
 80088ba:	2000      	movs	r0, #0
 80088bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088c2:	2e00      	cmp	r6, #0
 80088c4:	d0f9      	beq.n	80088ba <__sflush_r+0x1a>
 80088c6:	2300      	movs	r3, #0
 80088c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088cc:	682f      	ldr	r7, [r5, #0]
 80088ce:	602b      	str	r3, [r5, #0]
 80088d0:	d032      	beq.n	8008938 <__sflush_r+0x98>
 80088d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088d4:	89a3      	ldrh	r3, [r4, #12]
 80088d6:	075a      	lsls	r2, r3, #29
 80088d8:	d505      	bpl.n	80088e6 <__sflush_r+0x46>
 80088da:	6863      	ldr	r3, [r4, #4]
 80088dc:	1ac0      	subs	r0, r0, r3
 80088de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80088e0:	b10b      	cbz	r3, 80088e6 <__sflush_r+0x46>
 80088e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088e4:	1ac0      	subs	r0, r0, r3
 80088e6:	2300      	movs	r3, #0
 80088e8:	4602      	mov	r2, r0
 80088ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088ec:	6a21      	ldr	r1, [r4, #32]
 80088ee:	4628      	mov	r0, r5
 80088f0:	47b0      	blx	r6
 80088f2:	1c43      	adds	r3, r0, #1
 80088f4:	89a3      	ldrh	r3, [r4, #12]
 80088f6:	d106      	bne.n	8008906 <__sflush_r+0x66>
 80088f8:	6829      	ldr	r1, [r5, #0]
 80088fa:	291d      	cmp	r1, #29
 80088fc:	d82c      	bhi.n	8008958 <__sflush_r+0xb8>
 80088fe:	4a2a      	ldr	r2, [pc, #168]	; (80089a8 <__sflush_r+0x108>)
 8008900:	40ca      	lsrs	r2, r1
 8008902:	07d6      	lsls	r6, r2, #31
 8008904:	d528      	bpl.n	8008958 <__sflush_r+0xb8>
 8008906:	2200      	movs	r2, #0
 8008908:	6062      	str	r2, [r4, #4]
 800890a:	04d9      	lsls	r1, r3, #19
 800890c:	6922      	ldr	r2, [r4, #16]
 800890e:	6022      	str	r2, [r4, #0]
 8008910:	d504      	bpl.n	800891c <__sflush_r+0x7c>
 8008912:	1c42      	adds	r2, r0, #1
 8008914:	d101      	bne.n	800891a <__sflush_r+0x7a>
 8008916:	682b      	ldr	r3, [r5, #0]
 8008918:	b903      	cbnz	r3, 800891c <__sflush_r+0x7c>
 800891a:	6560      	str	r0, [r4, #84]	; 0x54
 800891c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800891e:	602f      	str	r7, [r5, #0]
 8008920:	2900      	cmp	r1, #0
 8008922:	d0ca      	beq.n	80088ba <__sflush_r+0x1a>
 8008924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008928:	4299      	cmp	r1, r3
 800892a:	d002      	beq.n	8008932 <__sflush_r+0x92>
 800892c:	4628      	mov	r0, r5
 800892e:	f000 fd83 	bl	8009438 <_free_r>
 8008932:	2000      	movs	r0, #0
 8008934:	6360      	str	r0, [r4, #52]	; 0x34
 8008936:	e7c1      	b.n	80088bc <__sflush_r+0x1c>
 8008938:	6a21      	ldr	r1, [r4, #32]
 800893a:	2301      	movs	r3, #1
 800893c:	4628      	mov	r0, r5
 800893e:	47b0      	blx	r6
 8008940:	1c41      	adds	r1, r0, #1
 8008942:	d1c7      	bne.n	80088d4 <__sflush_r+0x34>
 8008944:	682b      	ldr	r3, [r5, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d0c4      	beq.n	80088d4 <__sflush_r+0x34>
 800894a:	2b1d      	cmp	r3, #29
 800894c:	d001      	beq.n	8008952 <__sflush_r+0xb2>
 800894e:	2b16      	cmp	r3, #22
 8008950:	d101      	bne.n	8008956 <__sflush_r+0xb6>
 8008952:	602f      	str	r7, [r5, #0]
 8008954:	e7b1      	b.n	80088ba <__sflush_r+0x1a>
 8008956:	89a3      	ldrh	r3, [r4, #12]
 8008958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800895c:	81a3      	strh	r3, [r4, #12]
 800895e:	e7ad      	b.n	80088bc <__sflush_r+0x1c>
 8008960:	690f      	ldr	r7, [r1, #16]
 8008962:	2f00      	cmp	r7, #0
 8008964:	d0a9      	beq.n	80088ba <__sflush_r+0x1a>
 8008966:	0793      	lsls	r3, r2, #30
 8008968:	680e      	ldr	r6, [r1, #0]
 800896a:	bf08      	it	eq
 800896c:	694b      	ldreq	r3, [r1, #20]
 800896e:	600f      	str	r7, [r1, #0]
 8008970:	bf18      	it	ne
 8008972:	2300      	movne	r3, #0
 8008974:	eba6 0807 	sub.w	r8, r6, r7
 8008978:	608b      	str	r3, [r1, #8]
 800897a:	f1b8 0f00 	cmp.w	r8, #0
 800897e:	dd9c      	ble.n	80088ba <__sflush_r+0x1a>
 8008980:	6a21      	ldr	r1, [r4, #32]
 8008982:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008984:	4643      	mov	r3, r8
 8008986:	463a      	mov	r2, r7
 8008988:	4628      	mov	r0, r5
 800898a:	47b0      	blx	r6
 800898c:	2800      	cmp	r0, #0
 800898e:	dc06      	bgt.n	800899e <__sflush_r+0xfe>
 8008990:	89a3      	ldrh	r3, [r4, #12]
 8008992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008996:	81a3      	strh	r3, [r4, #12]
 8008998:	f04f 30ff 	mov.w	r0, #4294967295
 800899c:	e78e      	b.n	80088bc <__sflush_r+0x1c>
 800899e:	4407      	add	r7, r0
 80089a0:	eba8 0800 	sub.w	r8, r8, r0
 80089a4:	e7e9      	b.n	800897a <__sflush_r+0xda>
 80089a6:	bf00      	nop
 80089a8:	20400001 	.word	0x20400001

080089ac <_fflush_r>:
 80089ac:	b538      	push	{r3, r4, r5, lr}
 80089ae:	690b      	ldr	r3, [r1, #16]
 80089b0:	4605      	mov	r5, r0
 80089b2:	460c      	mov	r4, r1
 80089b4:	b913      	cbnz	r3, 80089bc <_fflush_r+0x10>
 80089b6:	2500      	movs	r5, #0
 80089b8:	4628      	mov	r0, r5
 80089ba:	bd38      	pop	{r3, r4, r5, pc}
 80089bc:	b118      	cbz	r0, 80089c6 <_fflush_r+0x1a>
 80089be:	6983      	ldr	r3, [r0, #24]
 80089c0:	b90b      	cbnz	r3, 80089c6 <_fflush_r+0x1a>
 80089c2:	f000 f887 	bl	8008ad4 <__sinit>
 80089c6:	4b14      	ldr	r3, [pc, #80]	; (8008a18 <_fflush_r+0x6c>)
 80089c8:	429c      	cmp	r4, r3
 80089ca:	d11b      	bne.n	8008a04 <_fflush_r+0x58>
 80089cc:	686c      	ldr	r4, [r5, #4]
 80089ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d0ef      	beq.n	80089b6 <_fflush_r+0xa>
 80089d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089d8:	07d0      	lsls	r0, r2, #31
 80089da:	d404      	bmi.n	80089e6 <_fflush_r+0x3a>
 80089dc:	0599      	lsls	r1, r3, #22
 80089de:	d402      	bmi.n	80089e6 <_fflush_r+0x3a>
 80089e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089e2:	f000 f92c 	bl	8008c3e <__retarget_lock_acquire_recursive>
 80089e6:	4628      	mov	r0, r5
 80089e8:	4621      	mov	r1, r4
 80089ea:	f7ff ff59 	bl	80088a0 <__sflush_r>
 80089ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089f0:	07da      	lsls	r2, r3, #31
 80089f2:	4605      	mov	r5, r0
 80089f4:	d4e0      	bmi.n	80089b8 <_fflush_r+0xc>
 80089f6:	89a3      	ldrh	r3, [r4, #12]
 80089f8:	059b      	lsls	r3, r3, #22
 80089fa:	d4dd      	bmi.n	80089b8 <_fflush_r+0xc>
 80089fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089fe:	f000 f91f 	bl	8008c40 <__retarget_lock_release_recursive>
 8008a02:	e7d9      	b.n	80089b8 <_fflush_r+0xc>
 8008a04:	4b05      	ldr	r3, [pc, #20]	; (8008a1c <_fflush_r+0x70>)
 8008a06:	429c      	cmp	r4, r3
 8008a08:	d101      	bne.n	8008a0e <_fflush_r+0x62>
 8008a0a:	68ac      	ldr	r4, [r5, #8]
 8008a0c:	e7df      	b.n	80089ce <_fflush_r+0x22>
 8008a0e:	4b04      	ldr	r3, [pc, #16]	; (8008a20 <_fflush_r+0x74>)
 8008a10:	429c      	cmp	r4, r3
 8008a12:	bf08      	it	eq
 8008a14:	68ec      	ldreq	r4, [r5, #12]
 8008a16:	e7da      	b.n	80089ce <_fflush_r+0x22>
 8008a18:	08009d84 	.word	0x08009d84
 8008a1c:	08009da4 	.word	0x08009da4
 8008a20:	08009d64 	.word	0x08009d64

08008a24 <std>:
 8008a24:	2300      	movs	r3, #0
 8008a26:	b510      	push	{r4, lr}
 8008a28:	4604      	mov	r4, r0
 8008a2a:	e9c0 3300 	strd	r3, r3, [r0]
 8008a2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a32:	6083      	str	r3, [r0, #8]
 8008a34:	8181      	strh	r1, [r0, #12]
 8008a36:	6643      	str	r3, [r0, #100]	; 0x64
 8008a38:	81c2      	strh	r2, [r0, #14]
 8008a3a:	6183      	str	r3, [r0, #24]
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	2208      	movs	r2, #8
 8008a40:	305c      	adds	r0, #92	; 0x5c
 8008a42:	f7fe fa7b 	bl	8006f3c <memset>
 8008a46:	4b05      	ldr	r3, [pc, #20]	; (8008a5c <std+0x38>)
 8008a48:	6263      	str	r3, [r4, #36]	; 0x24
 8008a4a:	4b05      	ldr	r3, [pc, #20]	; (8008a60 <std+0x3c>)
 8008a4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a4e:	4b05      	ldr	r3, [pc, #20]	; (8008a64 <std+0x40>)
 8008a50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a52:	4b05      	ldr	r3, [pc, #20]	; (8008a68 <std+0x44>)
 8008a54:	6224      	str	r4, [r4, #32]
 8008a56:	6323      	str	r3, [r4, #48]	; 0x30
 8008a58:	bd10      	pop	{r4, pc}
 8008a5a:	bf00      	nop
 8008a5c:	08009861 	.word	0x08009861
 8008a60:	08009883 	.word	0x08009883
 8008a64:	080098bb 	.word	0x080098bb
 8008a68:	080098df 	.word	0x080098df

08008a6c <_cleanup_r>:
 8008a6c:	4901      	ldr	r1, [pc, #4]	; (8008a74 <_cleanup_r+0x8>)
 8008a6e:	f000 b8c1 	b.w	8008bf4 <_fwalk_reent>
 8008a72:	bf00      	nop
 8008a74:	080089ad 	.word	0x080089ad

08008a78 <__sfmoreglue>:
 8008a78:	b570      	push	{r4, r5, r6, lr}
 8008a7a:	1e4a      	subs	r2, r1, #1
 8008a7c:	2568      	movs	r5, #104	; 0x68
 8008a7e:	4355      	muls	r5, r2
 8008a80:	460e      	mov	r6, r1
 8008a82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a86:	f000 fd27 	bl	80094d8 <_malloc_r>
 8008a8a:	4604      	mov	r4, r0
 8008a8c:	b140      	cbz	r0, 8008aa0 <__sfmoreglue+0x28>
 8008a8e:	2100      	movs	r1, #0
 8008a90:	e9c0 1600 	strd	r1, r6, [r0]
 8008a94:	300c      	adds	r0, #12
 8008a96:	60a0      	str	r0, [r4, #8]
 8008a98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a9c:	f7fe fa4e 	bl	8006f3c <memset>
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	bd70      	pop	{r4, r5, r6, pc}

08008aa4 <__sfp_lock_acquire>:
 8008aa4:	4801      	ldr	r0, [pc, #4]	; (8008aac <__sfp_lock_acquire+0x8>)
 8008aa6:	f000 b8ca 	b.w	8008c3e <__retarget_lock_acquire_recursive>
 8008aaa:	bf00      	nop
 8008aac:	20004304 	.word	0x20004304

08008ab0 <__sfp_lock_release>:
 8008ab0:	4801      	ldr	r0, [pc, #4]	; (8008ab8 <__sfp_lock_release+0x8>)
 8008ab2:	f000 b8c5 	b.w	8008c40 <__retarget_lock_release_recursive>
 8008ab6:	bf00      	nop
 8008ab8:	20004304 	.word	0x20004304

08008abc <__sinit_lock_acquire>:
 8008abc:	4801      	ldr	r0, [pc, #4]	; (8008ac4 <__sinit_lock_acquire+0x8>)
 8008abe:	f000 b8be 	b.w	8008c3e <__retarget_lock_acquire_recursive>
 8008ac2:	bf00      	nop
 8008ac4:	200042ff 	.word	0x200042ff

08008ac8 <__sinit_lock_release>:
 8008ac8:	4801      	ldr	r0, [pc, #4]	; (8008ad0 <__sinit_lock_release+0x8>)
 8008aca:	f000 b8b9 	b.w	8008c40 <__retarget_lock_release_recursive>
 8008ace:	bf00      	nop
 8008ad0:	200042ff 	.word	0x200042ff

08008ad4 <__sinit>:
 8008ad4:	b510      	push	{r4, lr}
 8008ad6:	4604      	mov	r4, r0
 8008ad8:	f7ff fff0 	bl	8008abc <__sinit_lock_acquire>
 8008adc:	69a3      	ldr	r3, [r4, #24]
 8008ade:	b11b      	cbz	r3, 8008ae8 <__sinit+0x14>
 8008ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ae4:	f7ff bff0 	b.w	8008ac8 <__sinit_lock_release>
 8008ae8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008aec:	6523      	str	r3, [r4, #80]	; 0x50
 8008aee:	4b13      	ldr	r3, [pc, #76]	; (8008b3c <__sinit+0x68>)
 8008af0:	4a13      	ldr	r2, [pc, #76]	; (8008b40 <__sinit+0x6c>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008af6:	42a3      	cmp	r3, r4
 8008af8:	bf04      	itt	eq
 8008afa:	2301      	moveq	r3, #1
 8008afc:	61a3      	streq	r3, [r4, #24]
 8008afe:	4620      	mov	r0, r4
 8008b00:	f000 f820 	bl	8008b44 <__sfp>
 8008b04:	6060      	str	r0, [r4, #4]
 8008b06:	4620      	mov	r0, r4
 8008b08:	f000 f81c 	bl	8008b44 <__sfp>
 8008b0c:	60a0      	str	r0, [r4, #8]
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f000 f818 	bl	8008b44 <__sfp>
 8008b14:	2200      	movs	r2, #0
 8008b16:	60e0      	str	r0, [r4, #12]
 8008b18:	2104      	movs	r1, #4
 8008b1a:	6860      	ldr	r0, [r4, #4]
 8008b1c:	f7ff ff82 	bl	8008a24 <std>
 8008b20:	68a0      	ldr	r0, [r4, #8]
 8008b22:	2201      	movs	r2, #1
 8008b24:	2109      	movs	r1, #9
 8008b26:	f7ff ff7d 	bl	8008a24 <std>
 8008b2a:	68e0      	ldr	r0, [r4, #12]
 8008b2c:	2202      	movs	r2, #2
 8008b2e:	2112      	movs	r1, #18
 8008b30:	f7ff ff78 	bl	8008a24 <std>
 8008b34:	2301      	movs	r3, #1
 8008b36:	61a3      	str	r3, [r4, #24]
 8008b38:	e7d2      	b.n	8008ae0 <__sinit+0xc>
 8008b3a:	bf00      	nop
 8008b3c:	08009bf8 	.word	0x08009bf8
 8008b40:	08008a6d 	.word	0x08008a6d

08008b44 <__sfp>:
 8008b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b46:	4607      	mov	r7, r0
 8008b48:	f7ff ffac 	bl	8008aa4 <__sfp_lock_acquire>
 8008b4c:	4b1e      	ldr	r3, [pc, #120]	; (8008bc8 <__sfp+0x84>)
 8008b4e:	681e      	ldr	r6, [r3, #0]
 8008b50:	69b3      	ldr	r3, [r6, #24]
 8008b52:	b913      	cbnz	r3, 8008b5a <__sfp+0x16>
 8008b54:	4630      	mov	r0, r6
 8008b56:	f7ff ffbd 	bl	8008ad4 <__sinit>
 8008b5a:	3648      	adds	r6, #72	; 0x48
 8008b5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b60:	3b01      	subs	r3, #1
 8008b62:	d503      	bpl.n	8008b6c <__sfp+0x28>
 8008b64:	6833      	ldr	r3, [r6, #0]
 8008b66:	b30b      	cbz	r3, 8008bac <__sfp+0x68>
 8008b68:	6836      	ldr	r6, [r6, #0]
 8008b6a:	e7f7      	b.n	8008b5c <__sfp+0x18>
 8008b6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b70:	b9d5      	cbnz	r5, 8008ba8 <__sfp+0x64>
 8008b72:	4b16      	ldr	r3, [pc, #88]	; (8008bcc <__sfp+0x88>)
 8008b74:	60e3      	str	r3, [r4, #12]
 8008b76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b7a:	6665      	str	r5, [r4, #100]	; 0x64
 8008b7c:	f000 f85e 	bl	8008c3c <__retarget_lock_init_recursive>
 8008b80:	f7ff ff96 	bl	8008ab0 <__sfp_lock_release>
 8008b84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008b88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008b8c:	6025      	str	r5, [r4, #0]
 8008b8e:	61a5      	str	r5, [r4, #24]
 8008b90:	2208      	movs	r2, #8
 8008b92:	4629      	mov	r1, r5
 8008b94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b98:	f7fe f9d0 	bl	8006f3c <memset>
 8008b9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ba0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ba8:	3468      	adds	r4, #104	; 0x68
 8008baa:	e7d9      	b.n	8008b60 <__sfp+0x1c>
 8008bac:	2104      	movs	r1, #4
 8008bae:	4638      	mov	r0, r7
 8008bb0:	f7ff ff62 	bl	8008a78 <__sfmoreglue>
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	6030      	str	r0, [r6, #0]
 8008bb8:	2800      	cmp	r0, #0
 8008bba:	d1d5      	bne.n	8008b68 <__sfp+0x24>
 8008bbc:	f7ff ff78 	bl	8008ab0 <__sfp_lock_release>
 8008bc0:	230c      	movs	r3, #12
 8008bc2:	603b      	str	r3, [r7, #0]
 8008bc4:	e7ee      	b.n	8008ba4 <__sfp+0x60>
 8008bc6:	bf00      	nop
 8008bc8:	08009bf8 	.word	0x08009bf8
 8008bcc:	ffff0001 	.word	0xffff0001

08008bd0 <fiprintf>:
 8008bd0:	b40e      	push	{r1, r2, r3}
 8008bd2:	b503      	push	{r0, r1, lr}
 8008bd4:	4601      	mov	r1, r0
 8008bd6:	ab03      	add	r3, sp, #12
 8008bd8:	4805      	ldr	r0, [pc, #20]	; (8008bf0 <fiprintf+0x20>)
 8008bda:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bde:	6800      	ldr	r0, [r0, #0]
 8008be0:	9301      	str	r3, [sp, #4]
 8008be2:	f000 fcfd 	bl	80095e0 <_vfiprintf_r>
 8008be6:	b002      	add	sp, #8
 8008be8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bec:	b003      	add	sp, #12
 8008bee:	4770      	bx	lr
 8008bf0:	20000010 	.word	0x20000010

08008bf4 <_fwalk_reent>:
 8008bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bf8:	4606      	mov	r6, r0
 8008bfa:	4688      	mov	r8, r1
 8008bfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c00:	2700      	movs	r7, #0
 8008c02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c06:	f1b9 0901 	subs.w	r9, r9, #1
 8008c0a:	d505      	bpl.n	8008c18 <_fwalk_reent+0x24>
 8008c0c:	6824      	ldr	r4, [r4, #0]
 8008c0e:	2c00      	cmp	r4, #0
 8008c10:	d1f7      	bne.n	8008c02 <_fwalk_reent+0xe>
 8008c12:	4638      	mov	r0, r7
 8008c14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c18:	89ab      	ldrh	r3, [r5, #12]
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d907      	bls.n	8008c2e <_fwalk_reent+0x3a>
 8008c1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c22:	3301      	adds	r3, #1
 8008c24:	d003      	beq.n	8008c2e <_fwalk_reent+0x3a>
 8008c26:	4629      	mov	r1, r5
 8008c28:	4630      	mov	r0, r6
 8008c2a:	47c0      	blx	r8
 8008c2c:	4307      	orrs	r7, r0
 8008c2e:	3568      	adds	r5, #104	; 0x68
 8008c30:	e7e9      	b.n	8008c06 <_fwalk_reent+0x12>
	...

08008c34 <_localeconv_r>:
 8008c34:	4800      	ldr	r0, [pc, #0]	; (8008c38 <_localeconv_r+0x4>)
 8008c36:	4770      	bx	lr
 8008c38:	20000164 	.word	0x20000164

08008c3c <__retarget_lock_init_recursive>:
 8008c3c:	4770      	bx	lr

08008c3e <__retarget_lock_acquire_recursive>:
 8008c3e:	4770      	bx	lr

08008c40 <__retarget_lock_release_recursive>:
 8008c40:	4770      	bx	lr

08008c42 <__swhatbuf_r>:
 8008c42:	b570      	push	{r4, r5, r6, lr}
 8008c44:	460e      	mov	r6, r1
 8008c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c4a:	2900      	cmp	r1, #0
 8008c4c:	b096      	sub	sp, #88	; 0x58
 8008c4e:	4614      	mov	r4, r2
 8008c50:	461d      	mov	r5, r3
 8008c52:	da07      	bge.n	8008c64 <__swhatbuf_r+0x22>
 8008c54:	2300      	movs	r3, #0
 8008c56:	602b      	str	r3, [r5, #0]
 8008c58:	89b3      	ldrh	r3, [r6, #12]
 8008c5a:	061a      	lsls	r2, r3, #24
 8008c5c:	d410      	bmi.n	8008c80 <__swhatbuf_r+0x3e>
 8008c5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c62:	e00e      	b.n	8008c82 <__swhatbuf_r+0x40>
 8008c64:	466a      	mov	r2, sp
 8008c66:	f000 fe69 	bl	800993c <_fstat_r>
 8008c6a:	2800      	cmp	r0, #0
 8008c6c:	dbf2      	blt.n	8008c54 <__swhatbuf_r+0x12>
 8008c6e:	9a01      	ldr	r2, [sp, #4]
 8008c70:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c74:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c78:	425a      	negs	r2, r3
 8008c7a:	415a      	adcs	r2, r3
 8008c7c:	602a      	str	r2, [r5, #0]
 8008c7e:	e7ee      	b.n	8008c5e <__swhatbuf_r+0x1c>
 8008c80:	2340      	movs	r3, #64	; 0x40
 8008c82:	2000      	movs	r0, #0
 8008c84:	6023      	str	r3, [r4, #0]
 8008c86:	b016      	add	sp, #88	; 0x58
 8008c88:	bd70      	pop	{r4, r5, r6, pc}
	...

08008c8c <__smakebuf_r>:
 8008c8c:	898b      	ldrh	r3, [r1, #12]
 8008c8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c90:	079d      	lsls	r5, r3, #30
 8008c92:	4606      	mov	r6, r0
 8008c94:	460c      	mov	r4, r1
 8008c96:	d507      	bpl.n	8008ca8 <__smakebuf_r+0x1c>
 8008c98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c9c:	6023      	str	r3, [r4, #0]
 8008c9e:	6123      	str	r3, [r4, #16]
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	6163      	str	r3, [r4, #20]
 8008ca4:	b002      	add	sp, #8
 8008ca6:	bd70      	pop	{r4, r5, r6, pc}
 8008ca8:	ab01      	add	r3, sp, #4
 8008caa:	466a      	mov	r2, sp
 8008cac:	f7ff ffc9 	bl	8008c42 <__swhatbuf_r>
 8008cb0:	9900      	ldr	r1, [sp, #0]
 8008cb2:	4605      	mov	r5, r0
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	f000 fc0f 	bl	80094d8 <_malloc_r>
 8008cba:	b948      	cbnz	r0, 8008cd0 <__smakebuf_r+0x44>
 8008cbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cc0:	059a      	lsls	r2, r3, #22
 8008cc2:	d4ef      	bmi.n	8008ca4 <__smakebuf_r+0x18>
 8008cc4:	f023 0303 	bic.w	r3, r3, #3
 8008cc8:	f043 0302 	orr.w	r3, r3, #2
 8008ccc:	81a3      	strh	r3, [r4, #12]
 8008cce:	e7e3      	b.n	8008c98 <__smakebuf_r+0xc>
 8008cd0:	4b0d      	ldr	r3, [pc, #52]	; (8008d08 <__smakebuf_r+0x7c>)
 8008cd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008cd4:	89a3      	ldrh	r3, [r4, #12]
 8008cd6:	6020      	str	r0, [r4, #0]
 8008cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cdc:	81a3      	strh	r3, [r4, #12]
 8008cde:	9b00      	ldr	r3, [sp, #0]
 8008ce0:	6163      	str	r3, [r4, #20]
 8008ce2:	9b01      	ldr	r3, [sp, #4]
 8008ce4:	6120      	str	r0, [r4, #16]
 8008ce6:	b15b      	cbz	r3, 8008d00 <__smakebuf_r+0x74>
 8008ce8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cec:	4630      	mov	r0, r6
 8008cee:	f000 fe37 	bl	8009960 <_isatty_r>
 8008cf2:	b128      	cbz	r0, 8008d00 <__smakebuf_r+0x74>
 8008cf4:	89a3      	ldrh	r3, [r4, #12]
 8008cf6:	f023 0303 	bic.w	r3, r3, #3
 8008cfa:	f043 0301 	orr.w	r3, r3, #1
 8008cfe:	81a3      	strh	r3, [r4, #12]
 8008d00:	89a0      	ldrh	r0, [r4, #12]
 8008d02:	4305      	orrs	r5, r0
 8008d04:	81a5      	strh	r5, [r4, #12]
 8008d06:	e7cd      	b.n	8008ca4 <__smakebuf_r+0x18>
 8008d08:	08008a6d 	.word	0x08008a6d

08008d0c <malloc>:
 8008d0c:	4b02      	ldr	r3, [pc, #8]	; (8008d18 <malloc+0xc>)
 8008d0e:	4601      	mov	r1, r0
 8008d10:	6818      	ldr	r0, [r3, #0]
 8008d12:	f000 bbe1 	b.w	80094d8 <_malloc_r>
 8008d16:	bf00      	nop
 8008d18:	20000010 	.word	0x20000010

08008d1c <_Balloc>:
 8008d1c:	b570      	push	{r4, r5, r6, lr}
 8008d1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d20:	4604      	mov	r4, r0
 8008d22:	460d      	mov	r5, r1
 8008d24:	b976      	cbnz	r6, 8008d44 <_Balloc+0x28>
 8008d26:	2010      	movs	r0, #16
 8008d28:	f7ff fff0 	bl	8008d0c <malloc>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	6260      	str	r0, [r4, #36]	; 0x24
 8008d30:	b920      	cbnz	r0, 8008d3c <_Balloc+0x20>
 8008d32:	4b18      	ldr	r3, [pc, #96]	; (8008d94 <_Balloc+0x78>)
 8008d34:	4818      	ldr	r0, [pc, #96]	; (8008d98 <_Balloc+0x7c>)
 8008d36:	2166      	movs	r1, #102	; 0x66
 8008d38:	f7fe ff1c 	bl	8007b74 <__assert_func>
 8008d3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d40:	6006      	str	r6, [r0, #0]
 8008d42:	60c6      	str	r6, [r0, #12]
 8008d44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d46:	68f3      	ldr	r3, [r6, #12]
 8008d48:	b183      	cbz	r3, 8008d6c <_Balloc+0x50>
 8008d4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d52:	b9b8      	cbnz	r0, 8008d84 <_Balloc+0x68>
 8008d54:	2101      	movs	r1, #1
 8008d56:	fa01 f605 	lsl.w	r6, r1, r5
 8008d5a:	1d72      	adds	r2, r6, #5
 8008d5c:	0092      	lsls	r2, r2, #2
 8008d5e:	4620      	mov	r0, r4
 8008d60:	f000 fb5a 	bl	8009418 <_calloc_r>
 8008d64:	b160      	cbz	r0, 8008d80 <_Balloc+0x64>
 8008d66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d6a:	e00e      	b.n	8008d8a <_Balloc+0x6e>
 8008d6c:	2221      	movs	r2, #33	; 0x21
 8008d6e:	2104      	movs	r1, #4
 8008d70:	4620      	mov	r0, r4
 8008d72:	f000 fb51 	bl	8009418 <_calloc_r>
 8008d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d78:	60f0      	str	r0, [r6, #12]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1e4      	bne.n	8008d4a <_Balloc+0x2e>
 8008d80:	2000      	movs	r0, #0
 8008d82:	bd70      	pop	{r4, r5, r6, pc}
 8008d84:	6802      	ldr	r2, [r0, #0]
 8008d86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d90:	e7f7      	b.n	8008d82 <_Balloc+0x66>
 8008d92:	bf00      	nop
 8008d94:	08009c30 	.word	0x08009c30
 8008d98:	08009dc4 	.word	0x08009dc4

08008d9c <_Bfree>:
 8008d9c:	b570      	push	{r4, r5, r6, lr}
 8008d9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008da0:	4605      	mov	r5, r0
 8008da2:	460c      	mov	r4, r1
 8008da4:	b976      	cbnz	r6, 8008dc4 <_Bfree+0x28>
 8008da6:	2010      	movs	r0, #16
 8008da8:	f7ff ffb0 	bl	8008d0c <malloc>
 8008dac:	4602      	mov	r2, r0
 8008dae:	6268      	str	r0, [r5, #36]	; 0x24
 8008db0:	b920      	cbnz	r0, 8008dbc <_Bfree+0x20>
 8008db2:	4b09      	ldr	r3, [pc, #36]	; (8008dd8 <_Bfree+0x3c>)
 8008db4:	4809      	ldr	r0, [pc, #36]	; (8008ddc <_Bfree+0x40>)
 8008db6:	218a      	movs	r1, #138	; 0x8a
 8008db8:	f7fe fedc 	bl	8007b74 <__assert_func>
 8008dbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008dc0:	6006      	str	r6, [r0, #0]
 8008dc2:	60c6      	str	r6, [r0, #12]
 8008dc4:	b13c      	cbz	r4, 8008dd6 <_Bfree+0x3a>
 8008dc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008dc8:	6862      	ldr	r2, [r4, #4]
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008dd0:	6021      	str	r1, [r4, #0]
 8008dd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008dd6:	bd70      	pop	{r4, r5, r6, pc}
 8008dd8:	08009c30 	.word	0x08009c30
 8008ddc:	08009dc4 	.word	0x08009dc4

08008de0 <__multadd>:
 8008de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008de4:	690e      	ldr	r6, [r1, #16]
 8008de6:	4607      	mov	r7, r0
 8008de8:	4698      	mov	r8, r3
 8008dea:	460c      	mov	r4, r1
 8008dec:	f101 0014 	add.w	r0, r1, #20
 8008df0:	2300      	movs	r3, #0
 8008df2:	6805      	ldr	r5, [r0, #0]
 8008df4:	b2a9      	uxth	r1, r5
 8008df6:	fb02 8101 	mla	r1, r2, r1, r8
 8008dfa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8008dfe:	0c2d      	lsrs	r5, r5, #16
 8008e00:	fb02 c505 	mla	r5, r2, r5, ip
 8008e04:	b289      	uxth	r1, r1
 8008e06:	3301      	adds	r3, #1
 8008e08:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008e0c:	429e      	cmp	r6, r3
 8008e0e:	f840 1b04 	str.w	r1, [r0], #4
 8008e12:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008e16:	dcec      	bgt.n	8008df2 <__multadd+0x12>
 8008e18:	f1b8 0f00 	cmp.w	r8, #0
 8008e1c:	d022      	beq.n	8008e64 <__multadd+0x84>
 8008e1e:	68a3      	ldr	r3, [r4, #8]
 8008e20:	42b3      	cmp	r3, r6
 8008e22:	dc19      	bgt.n	8008e58 <__multadd+0x78>
 8008e24:	6861      	ldr	r1, [r4, #4]
 8008e26:	4638      	mov	r0, r7
 8008e28:	3101      	adds	r1, #1
 8008e2a:	f7ff ff77 	bl	8008d1c <_Balloc>
 8008e2e:	4605      	mov	r5, r0
 8008e30:	b928      	cbnz	r0, 8008e3e <__multadd+0x5e>
 8008e32:	4602      	mov	r2, r0
 8008e34:	4b0d      	ldr	r3, [pc, #52]	; (8008e6c <__multadd+0x8c>)
 8008e36:	480e      	ldr	r0, [pc, #56]	; (8008e70 <__multadd+0x90>)
 8008e38:	21b5      	movs	r1, #181	; 0xb5
 8008e3a:	f7fe fe9b 	bl	8007b74 <__assert_func>
 8008e3e:	6922      	ldr	r2, [r4, #16]
 8008e40:	3202      	adds	r2, #2
 8008e42:	f104 010c 	add.w	r1, r4, #12
 8008e46:	0092      	lsls	r2, r2, #2
 8008e48:	300c      	adds	r0, #12
 8008e4a:	f7fe f869 	bl	8006f20 <memcpy>
 8008e4e:	4621      	mov	r1, r4
 8008e50:	4638      	mov	r0, r7
 8008e52:	f7ff ffa3 	bl	8008d9c <_Bfree>
 8008e56:	462c      	mov	r4, r5
 8008e58:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008e5c:	3601      	adds	r6, #1
 8008e5e:	f8c3 8014 	str.w	r8, [r3, #20]
 8008e62:	6126      	str	r6, [r4, #16]
 8008e64:	4620      	mov	r0, r4
 8008e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e6a:	bf00      	nop
 8008e6c:	08009d50 	.word	0x08009d50
 8008e70:	08009dc4 	.word	0x08009dc4

08008e74 <__hi0bits>:
 8008e74:	0c03      	lsrs	r3, r0, #16
 8008e76:	041b      	lsls	r3, r3, #16
 8008e78:	b9d3      	cbnz	r3, 8008eb0 <__hi0bits+0x3c>
 8008e7a:	0400      	lsls	r0, r0, #16
 8008e7c:	2310      	movs	r3, #16
 8008e7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e82:	bf04      	itt	eq
 8008e84:	0200      	lsleq	r0, r0, #8
 8008e86:	3308      	addeq	r3, #8
 8008e88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008e8c:	bf04      	itt	eq
 8008e8e:	0100      	lsleq	r0, r0, #4
 8008e90:	3304      	addeq	r3, #4
 8008e92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008e96:	bf04      	itt	eq
 8008e98:	0080      	lsleq	r0, r0, #2
 8008e9a:	3302      	addeq	r3, #2
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	db05      	blt.n	8008eac <__hi0bits+0x38>
 8008ea0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008ea4:	f103 0301 	add.w	r3, r3, #1
 8008ea8:	bf08      	it	eq
 8008eaa:	2320      	moveq	r3, #32
 8008eac:	4618      	mov	r0, r3
 8008eae:	4770      	bx	lr
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	e7e4      	b.n	8008e7e <__hi0bits+0xa>

08008eb4 <__lo0bits>:
 8008eb4:	6803      	ldr	r3, [r0, #0]
 8008eb6:	f013 0207 	ands.w	r2, r3, #7
 8008eba:	4601      	mov	r1, r0
 8008ebc:	d00b      	beq.n	8008ed6 <__lo0bits+0x22>
 8008ebe:	07da      	lsls	r2, r3, #31
 8008ec0:	d424      	bmi.n	8008f0c <__lo0bits+0x58>
 8008ec2:	0798      	lsls	r0, r3, #30
 8008ec4:	bf49      	itett	mi
 8008ec6:	085b      	lsrmi	r3, r3, #1
 8008ec8:	089b      	lsrpl	r3, r3, #2
 8008eca:	2001      	movmi	r0, #1
 8008ecc:	600b      	strmi	r3, [r1, #0]
 8008ece:	bf5c      	itt	pl
 8008ed0:	600b      	strpl	r3, [r1, #0]
 8008ed2:	2002      	movpl	r0, #2
 8008ed4:	4770      	bx	lr
 8008ed6:	b298      	uxth	r0, r3
 8008ed8:	b9b0      	cbnz	r0, 8008f08 <__lo0bits+0x54>
 8008eda:	0c1b      	lsrs	r3, r3, #16
 8008edc:	2010      	movs	r0, #16
 8008ede:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008ee2:	bf04      	itt	eq
 8008ee4:	0a1b      	lsreq	r3, r3, #8
 8008ee6:	3008      	addeq	r0, #8
 8008ee8:	071a      	lsls	r2, r3, #28
 8008eea:	bf04      	itt	eq
 8008eec:	091b      	lsreq	r3, r3, #4
 8008eee:	3004      	addeq	r0, #4
 8008ef0:	079a      	lsls	r2, r3, #30
 8008ef2:	bf04      	itt	eq
 8008ef4:	089b      	lsreq	r3, r3, #2
 8008ef6:	3002      	addeq	r0, #2
 8008ef8:	07da      	lsls	r2, r3, #31
 8008efa:	d403      	bmi.n	8008f04 <__lo0bits+0x50>
 8008efc:	085b      	lsrs	r3, r3, #1
 8008efe:	f100 0001 	add.w	r0, r0, #1
 8008f02:	d005      	beq.n	8008f10 <__lo0bits+0x5c>
 8008f04:	600b      	str	r3, [r1, #0]
 8008f06:	4770      	bx	lr
 8008f08:	4610      	mov	r0, r2
 8008f0a:	e7e8      	b.n	8008ede <__lo0bits+0x2a>
 8008f0c:	2000      	movs	r0, #0
 8008f0e:	4770      	bx	lr
 8008f10:	2020      	movs	r0, #32
 8008f12:	4770      	bx	lr

08008f14 <__i2b>:
 8008f14:	b510      	push	{r4, lr}
 8008f16:	460c      	mov	r4, r1
 8008f18:	2101      	movs	r1, #1
 8008f1a:	f7ff feff 	bl	8008d1c <_Balloc>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	b928      	cbnz	r0, 8008f2e <__i2b+0x1a>
 8008f22:	4b05      	ldr	r3, [pc, #20]	; (8008f38 <__i2b+0x24>)
 8008f24:	4805      	ldr	r0, [pc, #20]	; (8008f3c <__i2b+0x28>)
 8008f26:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008f2a:	f7fe fe23 	bl	8007b74 <__assert_func>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	6144      	str	r4, [r0, #20]
 8008f32:	6103      	str	r3, [r0, #16]
 8008f34:	bd10      	pop	{r4, pc}
 8008f36:	bf00      	nop
 8008f38:	08009d50 	.word	0x08009d50
 8008f3c:	08009dc4 	.word	0x08009dc4

08008f40 <__multiply>:
 8008f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f44:	4614      	mov	r4, r2
 8008f46:	690a      	ldr	r2, [r1, #16]
 8008f48:	6923      	ldr	r3, [r4, #16]
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	bfb8      	it	lt
 8008f4e:	460b      	movlt	r3, r1
 8008f50:	460d      	mov	r5, r1
 8008f52:	bfbc      	itt	lt
 8008f54:	4625      	movlt	r5, r4
 8008f56:	461c      	movlt	r4, r3
 8008f58:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008f5c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008f60:	68ab      	ldr	r3, [r5, #8]
 8008f62:	6869      	ldr	r1, [r5, #4]
 8008f64:	eb0a 0709 	add.w	r7, sl, r9
 8008f68:	42bb      	cmp	r3, r7
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	bfb8      	it	lt
 8008f6e:	3101      	addlt	r1, #1
 8008f70:	f7ff fed4 	bl	8008d1c <_Balloc>
 8008f74:	b930      	cbnz	r0, 8008f84 <__multiply+0x44>
 8008f76:	4602      	mov	r2, r0
 8008f78:	4b42      	ldr	r3, [pc, #264]	; (8009084 <__multiply+0x144>)
 8008f7a:	4843      	ldr	r0, [pc, #268]	; (8009088 <__multiply+0x148>)
 8008f7c:	f240 115d 	movw	r1, #349	; 0x15d
 8008f80:	f7fe fdf8 	bl	8007b74 <__assert_func>
 8008f84:	f100 0614 	add.w	r6, r0, #20
 8008f88:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008f8c:	4633      	mov	r3, r6
 8008f8e:	2200      	movs	r2, #0
 8008f90:	4543      	cmp	r3, r8
 8008f92:	d31e      	bcc.n	8008fd2 <__multiply+0x92>
 8008f94:	f105 0c14 	add.w	ip, r5, #20
 8008f98:	f104 0314 	add.w	r3, r4, #20
 8008f9c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008fa0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008fa4:	9202      	str	r2, [sp, #8]
 8008fa6:	ebac 0205 	sub.w	r2, ip, r5
 8008faa:	3a15      	subs	r2, #21
 8008fac:	f022 0203 	bic.w	r2, r2, #3
 8008fb0:	3204      	adds	r2, #4
 8008fb2:	f105 0115 	add.w	r1, r5, #21
 8008fb6:	458c      	cmp	ip, r1
 8008fb8:	bf38      	it	cc
 8008fba:	2204      	movcc	r2, #4
 8008fbc:	9201      	str	r2, [sp, #4]
 8008fbe:	9a02      	ldr	r2, [sp, #8]
 8008fc0:	9303      	str	r3, [sp, #12]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d808      	bhi.n	8008fd8 <__multiply+0x98>
 8008fc6:	2f00      	cmp	r7, #0
 8008fc8:	dc55      	bgt.n	8009076 <__multiply+0x136>
 8008fca:	6107      	str	r7, [r0, #16]
 8008fcc:	b005      	add	sp, #20
 8008fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd2:	f843 2b04 	str.w	r2, [r3], #4
 8008fd6:	e7db      	b.n	8008f90 <__multiply+0x50>
 8008fd8:	f8b3 a000 	ldrh.w	sl, [r3]
 8008fdc:	f1ba 0f00 	cmp.w	sl, #0
 8008fe0:	d020      	beq.n	8009024 <__multiply+0xe4>
 8008fe2:	f105 0e14 	add.w	lr, r5, #20
 8008fe6:	46b1      	mov	r9, r6
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008fee:	f8d9 b000 	ldr.w	fp, [r9]
 8008ff2:	b2a1      	uxth	r1, r4
 8008ff4:	fa1f fb8b 	uxth.w	fp, fp
 8008ff8:	fb0a b101 	mla	r1, sl, r1, fp
 8008ffc:	4411      	add	r1, r2
 8008ffe:	f8d9 2000 	ldr.w	r2, [r9]
 8009002:	0c24      	lsrs	r4, r4, #16
 8009004:	0c12      	lsrs	r2, r2, #16
 8009006:	fb0a 2404 	mla	r4, sl, r4, r2
 800900a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800900e:	b289      	uxth	r1, r1
 8009010:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009014:	45f4      	cmp	ip, lr
 8009016:	f849 1b04 	str.w	r1, [r9], #4
 800901a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800901e:	d8e4      	bhi.n	8008fea <__multiply+0xaa>
 8009020:	9901      	ldr	r1, [sp, #4]
 8009022:	5072      	str	r2, [r6, r1]
 8009024:	9a03      	ldr	r2, [sp, #12]
 8009026:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800902a:	3304      	adds	r3, #4
 800902c:	f1b9 0f00 	cmp.w	r9, #0
 8009030:	d01f      	beq.n	8009072 <__multiply+0x132>
 8009032:	6834      	ldr	r4, [r6, #0]
 8009034:	f105 0114 	add.w	r1, r5, #20
 8009038:	46b6      	mov	lr, r6
 800903a:	f04f 0a00 	mov.w	sl, #0
 800903e:	880a      	ldrh	r2, [r1, #0]
 8009040:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009044:	fb09 b202 	mla	r2, r9, r2, fp
 8009048:	4492      	add	sl, r2
 800904a:	b2a4      	uxth	r4, r4
 800904c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009050:	f84e 4b04 	str.w	r4, [lr], #4
 8009054:	f851 4b04 	ldr.w	r4, [r1], #4
 8009058:	f8be 2000 	ldrh.w	r2, [lr]
 800905c:	0c24      	lsrs	r4, r4, #16
 800905e:	fb09 2404 	mla	r4, r9, r4, r2
 8009062:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009066:	458c      	cmp	ip, r1
 8009068:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800906c:	d8e7      	bhi.n	800903e <__multiply+0xfe>
 800906e:	9a01      	ldr	r2, [sp, #4]
 8009070:	50b4      	str	r4, [r6, r2]
 8009072:	3604      	adds	r6, #4
 8009074:	e7a3      	b.n	8008fbe <__multiply+0x7e>
 8009076:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800907a:	2b00      	cmp	r3, #0
 800907c:	d1a5      	bne.n	8008fca <__multiply+0x8a>
 800907e:	3f01      	subs	r7, #1
 8009080:	e7a1      	b.n	8008fc6 <__multiply+0x86>
 8009082:	bf00      	nop
 8009084:	08009d50 	.word	0x08009d50
 8009088:	08009dc4 	.word	0x08009dc4

0800908c <__pow5mult>:
 800908c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009090:	4615      	mov	r5, r2
 8009092:	f012 0203 	ands.w	r2, r2, #3
 8009096:	4606      	mov	r6, r0
 8009098:	460f      	mov	r7, r1
 800909a:	d007      	beq.n	80090ac <__pow5mult+0x20>
 800909c:	4c25      	ldr	r4, [pc, #148]	; (8009134 <__pow5mult+0xa8>)
 800909e:	3a01      	subs	r2, #1
 80090a0:	2300      	movs	r3, #0
 80090a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090a6:	f7ff fe9b 	bl	8008de0 <__multadd>
 80090aa:	4607      	mov	r7, r0
 80090ac:	10ad      	asrs	r5, r5, #2
 80090ae:	d03d      	beq.n	800912c <__pow5mult+0xa0>
 80090b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80090b2:	b97c      	cbnz	r4, 80090d4 <__pow5mult+0x48>
 80090b4:	2010      	movs	r0, #16
 80090b6:	f7ff fe29 	bl	8008d0c <malloc>
 80090ba:	4602      	mov	r2, r0
 80090bc:	6270      	str	r0, [r6, #36]	; 0x24
 80090be:	b928      	cbnz	r0, 80090cc <__pow5mult+0x40>
 80090c0:	4b1d      	ldr	r3, [pc, #116]	; (8009138 <__pow5mult+0xac>)
 80090c2:	481e      	ldr	r0, [pc, #120]	; (800913c <__pow5mult+0xb0>)
 80090c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80090c8:	f7fe fd54 	bl	8007b74 <__assert_func>
 80090cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090d0:	6004      	str	r4, [r0, #0]
 80090d2:	60c4      	str	r4, [r0, #12]
 80090d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80090d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090dc:	b94c      	cbnz	r4, 80090f2 <__pow5mult+0x66>
 80090de:	f240 2171 	movw	r1, #625	; 0x271
 80090e2:	4630      	mov	r0, r6
 80090e4:	f7ff ff16 	bl	8008f14 <__i2b>
 80090e8:	2300      	movs	r3, #0
 80090ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80090ee:	4604      	mov	r4, r0
 80090f0:	6003      	str	r3, [r0, #0]
 80090f2:	f04f 0900 	mov.w	r9, #0
 80090f6:	07eb      	lsls	r3, r5, #31
 80090f8:	d50a      	bpl.n	8009110 <__pow5mult+0x84>
 80090fa:	4639      	mov	r1, r7
 80090fc:	4622      	mov	r2, r4
 80090fe:	4630      	mov	r0, r6
 8009100:	f7ff ff1e 	bl	8008f40 <__multiply>
 8009104:	4639      	mov	r1, r7
 8009106:	4680      	mov	r8, r0
 8009108:	4630      	mov	r0, r6
 800910a:	f7ff fe47 	bl	8008d9c <_Bfree>
 800910e:	4647      	mov	r7, r8
 8009110:	106d      	asrs	r5, r5, #1
 8009112:	d00b      	beq.n	800912c <__pow5mult+0xa0>
 8009114:	6820      	ldr	r0, [r4, #0]
 8009116:	b938      	cbnz	r0, 8009128 <__pow5mult+0x9c>
 8009118:	4622      	mov	r2, r4
 800911a:	4621      	mov	r1, r4
 800911c:	4630      	mov	r0, r6
 800911e:	f7ff ff0f 	bl	8008f40 <__multiply>
 8009122:	6020      	str	r0, [r4, #0]
 8009124:	f8c0 9000 	str.w	r9, [r0]
 8009128:	4604      	mov	r4, r0
 800912a:	e7e4      	b.n	80090f6 <__pow5mult+0x6a>
 800912c:	4638      	mov	r0, r7
 800912e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009132:	bf00      	nop
 8009134:	08009f18 	.word	0x08009f18
 8009138:	08009c30 	.word	0x08009c30
 800913c:	08009dc4 	.word	0x08009dc4

08009140 <__lshift>:
 8009140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009144:	460c      	mov	r4, r1
 8009146:	6849      	ldr	r1, [r1, #4]
 8009148:	6923      	ldr	r3, [r4, #16]
 800914a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800914e:	68a3      	ldr	r3, [r4, #8]
 8009150:	4607      	mov	r7, r0
 8009152:	4691      	mov	r9, r2
 8009154:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009158:	f108 0601 	add.w	r6, r8, #1
 800915c:	42b3      	cmp	r3, r6
 800915e:	db0b      	blt.n	8009178 <__lshift+0x38>
 8009160:	4638      	mov	r0, r7
 8009162:	f7ff fddb 	bl	8008d1c <_Balloc>
 8009166:	4605      	mov	r5, r0
 8009168:	b948      	cbnz	r0, 800917e <__lshift+0x3e>
 800916a:	4602      	mov	r2, r0
 800916c:	4b28      	ldr	r3, [pc, #160]	; (8009210 <__lshift+0xd0>)
 800916e:	4829      	ldr	r0, [pc, #164]	; (8009214 <__lshift+0xd4>)
 8009170:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009174:	f7fe fcfe 	bl	8007b74 <__assert_func>
 8009178:	3101      	adds	r1, #1
 800917a:	005b      	lsls	r3, r3, #1
 800917c:	e7ee      	b.n	800915c <__lshift+0x1c>
 800917e:	2300      	movs	r3, #0
 8009180:	f100 0114 	add.w	r1, r0, #20
 8009184:	f100 0210 	add.w	r2, r0, #16
 8009188:	4618      	mov	r0, r3
 800918a:	4553      	cmp	r3, sl
 800918c:	db33      	blt.n	80091f6 <__lshift+0xb6>
 800918e:	6920      	ldr	r0, [r4, #16]
 8009190:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009194:	f104 0314 	add.w	r3, r4, #20
 8009198:	f019 091f 	ands.w	r9, r9, #31
 800919c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80091a4:	d02b      	beq.n	80091fe <__lshift+0xbe>
 80091a6:	f1c9 0e20 	rsb	lr, r9, #32
 80091aa:	468a      	mov	sl, r1
 80091ac:	2200      	movs	r2, #0
 80091ae:	6818      	ldr	r0, [r3, #0]
 80091b0:	fa00 f009 	lsl.w	r0, r0, r9
 80091b4:	4302      	orrs	r2, r0
 80091b6:	f84a 2b04 	str.w	r2, [sl], #4
 80091ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80091be:	459c      	cmp	ip, r3
 80091c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80091c4:	d8f3      	bhi.n	80091ae <__lshift+0x6e>
 80091c6:	ebac 0304 	sub.w	r3, ip, r4
 80091ca:	3b15      	subs	r3, #21
 80091cc:	f023 0303 	bic.w	r3, r3, #3
 80091d0:	3304      	adds	r3, #4
 80091d2:	f104 0015 	add.w	r0, r4, #21
 80091d6:	4584      	cmp	ip, r0
 80091d8:	bf38      	it	cc
 80091da:	2304      	movcc	r3, #4
 80091dc:	50ca      	str	r2, [r1, r3]
 80091de:	b10a      	cbz	r2, 80091e4 <__lshift+0xa4>
 80091e0:	f108 0602 	add.w	r6, r8, #2
 80091e4:	3e01      	subs	r6, #1
 80091e6:	4638      	mov	r0, r7
 80091e8:	612e      	str	r6, [r5, #16]
 80091ea:	4621      	mov	r1, r4
 80091ec:	f7ff fdd6 	bl	8008d9c <_Bfree>
 80091f0:	4628      	mov	r0, r5
 80091f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80091fa:	3301      	adds	r3, #1
 80091fc:	e7c5      	b.n	800918a <__lshift+0x4a>
 80091fe:	3904      	subs	r1, #4
 8009200:	f853 2b04 	ldr.w	r2, [r3], #4
 8009204:	f841 2f04 	str.w	r2, [r1, #4]!
 8009208:	459c      	cmp	ip, r3
 800920a:	d8f9      	bhi.n	8009200 <__lshift+0xc0>
 800920c:	e7ea      	b.n	80091e4 <__lshift+0xa4>
 800920e:	bf00      	nop
 8009210:	08009d50 	.word	0x08009d50
 8009214:	08009dc4 	.word	0x08009dc4

08009218 <__mcmp>:
 8009218:	b530      	push	{r4, r5, lr}
 800921a:	6902      	ldr	r2, [r0, #16]
 800921c:	690c      	ldr	r4, [r1, #16]
 800921e:	1b12      	subs	r2, r2, r4
 8009220:	d10e      	bne.n	8009240 <__mcmp+0x28>
 8009222:	f100 0314 	add.w	r3, r0, #20
 8009226:	3114      	adds	r1, #20
 8009228:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800922c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009230:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009234:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009238:	42a5      	cmp	r5, r4
 800923a:	d003      	beq.n	8009244 <__mcmp+0x2c>
 800923c:	d305      	bcc.n	800924a <__mcmp+0x32>
 800923e:	2201      	movs	r2, #1
 8009240:	4610      	mov	r0, r2
 8009242:	bd30      	pop	{r4, r5, pc}
 8009244:	4283      	cmp	r3, r0
 8009246:	d3f3      	bcc.n	8009230 <__mcmp+0x18>
 8009248:	e7fa      	b.n	8009240 <__mcmp+0x28>
 800924a:	f04f 32ff 	mov.w	r2, #4294967295
 800924e:	e7f7      	b.n	8009240 <__mcmp+0x28>

08009250 <__mdiff>:
 8009250:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009254:	460c      	mov	r4, r1
 8009256:	4606      	mov	r6, r0
 8009258:	4611      	mov	r1, r2
 800925a:	4620      	mov	r0, r4
 800925c:	4617      	mov	r7, r2
 800925e:	f7ff ffdb 	bl	8009218 <__mcmp>
 8009262:	1e05      	subs	r5, r0, #0
 8009264:	d110      	bne.n	8009288 <__mdiff+0x38>
 8009266:	4629      	mov	r1, r5
 8009268:	4630      	mov	r0, r6
 800926a:	f7ff fd57 	bl	8008d1c <_Balloc>
 800926e:	b930      	cbnz	r0, 800927e <__mdiff+0x2e>
 8009270:	4b39      	ldr	r3, [pc, #228]	; (8009358 <__mdiff+0x108>)
 8009272:	4602      	mov	r2, r0
 8009274:	f240 2132 	movw	r1, #562	; 0x232
 8009278:	4838      	ldr	r0, [pc, #224]	; (800935c <__mdiff+0x10c>)
 800927a:	f7fe fc7b 	bl	8007b74 <__assert_func>
 800927e:	2301      	movs	r3, #1
 8009280:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009284:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009288:	bfa4      	itt	ge
 800928a:	463b      	movge	r3, r7
 800928c:	4627      	movge	r7, r4
 800928e:	4630      	mov	r0, r6
 8009290:	6879      	ldr	r1, [r7, #4]
 8009292:	bfa6      	itte	ge
 8009294:	461c      	movge	r4, r3
 8009296:	2500      	movge	r5, #0
 8009298:	2501      	movlt	r5, #1
 800929a:	f7ff fd3f 	bl	8008d1c <_Balloc>
 800929e:	b920      	cbnz	r0, 80092aa <__mdiff+0x5a>
 80092a0:	4b2d      	ldr	r3, [pc, #180]	; (8009358 <__mdiff+0x108>)
 80092a2:	4602      	mov	r2, r0
 80092a4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80092a8:	e7e6      	b.n	8009278 <__mdiff+0x28>
 80092aa:	693e      	ldr	r6, [r7, #16]
 80092ac:	60c5      	str	r5, [r0, #12]
 80092ae:	6925      	ldr	r5, [r4, #16]
 80092b0:	f107 0114 	add.w	r1, r7, #20
 80092b4:	f104 0914 	add.w	r9, r4, #20
 80092b8:	f100 0e14 	add.w	lr, r0, #20
 80092bc:	f107 0210 	add.w	r2, r7, #16
 80092c0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80092c4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80092c8:	46f2      	mov	sl, lr
 80092ca:	2700      	movs	r7, #0
 80092cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80092d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80092d4:	fa1f f883 	uxth.w	r8, r3
 80092d8:	fa17 f78b 	uxtah	r7, r7, fp
 80092dc:	0c1b      	lsrs	r3, r3, #16
 80092de:	eba7 0808 	sub.w	r8, r7, r8
 80092e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80092e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80092ea:	fa1f f888 	uxth.w	r8, r8
 80092ee:	141f      	asrs	r7, r3, #16
 80092f0:	454d      	cmp	r5, r9
 80092f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80092f6:	f84a 3b04 	str.w	r3, [sl], #4
 80092fa:	d8e7      	bhi.n	80092cc <__mdiff+0x7c>
 80092fc:	1b2b      	subs	r3, r5, r4
 80092fe:	3b15      	subs	r3, #21
 8009300:	f023 0303 	bic.w	r3, r3, #3
 8009304:	3304      	adds	r3, #4
 8009306:	3415      	adds	r4, #21
 8009308:	42a5      	cmp	r5, r4
 800930a:	bf38      	it	cc
 800930c:	2304      	movcc	r3, #4
 800930e:	4419      	add	r1, r3
 8009310:	4473      	add	r3, lr
 8009312:	469e      	mov	lr, r3
 8009314:	460d      	mov	r5, r1
 8009316:	4565      	cmp	r5, ip
 8009318:	d30e      	bcc.n	8009338 <__mdiff+0xe8>
 800931a:	f10c 0203 	add.w	r2, ip, #3
 800931e:	1a52      	subs	r2, r2, r1
 8009320:	f022 0203 	bic.w	r2, r2, #3
 8009324:	3903      	subs	r1, #3
 8009326:	458c      	cmp	ip, r1
 8009328:	bf38      	it	cc
 800932a:	2200      	movcc	r2, #0
 800932c:	441a      	add	r2, r3
 800932e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009332:	b17b      	cbz	r3, 8009354 <__mdiff+0x104>
 8009334:	6106      	str	r6, [r0, #16]
 8009336:	e7a5      	b.n	8009284 <__mdiff+0x34>
 8009338:	f855 8b04 	ldr.w	r8, [r5], #4
 800933c:	fa17 f488 	uxtah	r4, r7, r8
 8009340:	1422      	asrs	r2, r4, #16
 8009342:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009346:	b2a4      	uxth	r4, r4
 8009348:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800934c:	f84e 4b04 	str.w	r4, [lr], #4
 8009350:	1417      	asrs	r7, r2, #16
 8009352:	e7e0      	b.n	8009316 <__mdiff+0xc6>
 8009354:	3e01      	subs	r6, #1
 8009356:	e7ea      	b.n	800932e <__mdiff+0xde>
 8009358:	08009d50 	.word	0x08009d50
 800935c:	08009dc4 	.word	0x08009dc4

08009360 <__d2b>:
 8009360:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009364:	4689      	mov	r9, r1
 8009366:	2101      	movs	r1, #1
 8009368:	ec57 6b10 	vmov	r6, r7, d0
 800936c:	4690      	mov	r8, r2
 800936e:	f7ff fcd5 	bl	8008d1c <_Balloc>
 8009372:	4604      	mov	r4, r0
 8009374:	b930      	cbnz	r0, 8009384 <__d2b+0x24>
 8009376:	4602      	mov	r2, r0
 8009378:	4b25      	ldr	r3, [pc, #148]	; (8009410 <__d2b+0xb0>)
 800937a:	4826      	ldr	r0, [pc, #152]	; (8009414 <__d2b+0xb4>)
 800937c:	f240 310a 	movw	r1, #778	; 0x30a
 8009380:	f7fe fbf8 	bl	8007b74 <__assert_func>
 8009384:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009388:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800938c:	bb35      	cbnz	r5, 80093dc <__d2b+0x7c>
 800938e:	2e00      	cmp	r6, #0
 8009390:	9301      	str	r3, [sp, #4]
 8009392:	d028      	beq.n	80093e6 <__d2b+0x86>
 8009394:	4668      	mov	r0, sp
 8009396:	9600      	str	r6, [sp, #0]
 8009398:	f7ff fd8c 	bl	8008eb4 <__lo0bits>
 800939c:	9900      	ldr	r1, [sp, #0]
 800939e:	b300      	cbz	r0, 80093e2 <__d2b+0x82>
 80093a0:	9a01      	ldr	r2, [sp, #4]
 80093a2:	f1c0 0320 	rsb	r3, r0, #32
 80093a6:	fa02 f303 	lsl.w	r3, r2, r3
 80093aa:	430b      	orrs	r3, r1
 80093ac:	40c2      	lsrs	r2, r0
 80093ae:	6163      	str	r3, [r4, #20]
 80093b0:	9201      	str	r2, [sp, #4]
 80093b2:	9b01      	ldr	r3, [sp, #4]
 80093b4:	61a3      	str	r3, [r4, #24]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	bf14      	ite	ne
 80093ba:	2202      	movne	r2, #2
 80093bc:	2201      	moveq	r2, #1
 80093be:	6122      	str	r2, [r4, #16]
 80093c0:	b1d5      	cbz	r5, 80093f8 <__d2b+0x98>
 80093c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80093c6:	4405      	add	r5, r0
 80093c8:	f8c9 5000 	str.w	r5, [r9]
 80093cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80093d0:	f8c8 0000 	str.w	r0, [r8]
 80093d4:	4620      	mov	r0, r4
 80093d6:	b003      	add	sp, #12
 80093d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093e0:	e7d5      	b.n	800938e <__d2b+0x2e>
 80093e2:	6161      	str	r1, [r4, #20]
 80093e4:	e7e5      	b.n	80093b2 <__d2b+0x52>
 80093e6:	a801      	add	r0, sp, #4
 80093e8:	f7ff fd64 	bl	8008eb4 <__lo0bits>
 80093ec:	9b01      	ldr	r3, [sp, #4]
 80093ee:	6163      	str	r3, [r4, #20]
 80093f0:	2201      	movs	r2, #1
 80093f2:	6122      	str	r2, [r4, #16]
 80093f4:	3020      	adds	r0, #32
 80093f6:	e7e3      	b.n	80093c0 <__d2b+0x60>
 80093f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009400:	f8c9 0000 	str.w	r0, [r9]
 8009404:	6918      	ldr	r0, [r3, #16]
 8009406:	f7ff fd35 	bl	8008e74 <__hi0bits>
 800940a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800940e:	e7df      	b.n	80093d0 <__d2b+0x70>
 8009410:	08009d50 	.word	0x08009d50
 8009414:	08009dc4 	.word	0x08009dc4

08009418 <_calloc_r>:
 8009418:	b513      	push	{r0, r1, r4, lr}
 800941a:	434a      	muls	r2, r1
 800941c:	4611      	mov	r1, r2
 800941e:	9201      	str	r2, [sp, #4]
 8009420:	f000 f85a 	bl	80094d8 <_malloc_r>
 8009424:	4604      	mov	r4, r0
 8009426:	b118      	cbz	r0, 8009430 <_calloc_r+0x18>
 8009428:	9a01      	ldr	r2, [sp, #4]
 800942a:	2100      	movs	r1, #0
 800942c:	f7fd fd86 	bl	8006f3c <memset>
 8009430:	4620      	mov	r0, r4
 8009432:	b002      	add	sp, #8
 8009434:	bd10      	pop	{r4, pc}
	...

08009438 <_free_r>:
 8009438:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800943a:	2900      	cmp	r1, #0
 800943c:	d048      	beq.n	80094d0 <_free_r+0x98>
 800943e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009442:	9001      	str	r0, [sp, #4]
 8009444:	2b00      	cmp	r3, #0
 8009446:	f1a1 0404 	sub.w	r4, r1, #4
 800944a:	bfb8      	it	lt
 800944c:	18e4      	addlt	r4, r4, r3
 800944e:	f000 fabb 	bl	80099c8 <__malloc_lock>
 8009452:	4a20      	ldr	r2, [pc, #128]	; (80094d4 <_free_r+0x9c>)
 8009454:	9801      	ldr	r0, [sp, #4]
 8009456:	6813      	ldr	r3, [r2, #0]
 8009458:	4615      	mov	r5, r2
 800945a:	b933      	cbnz	r3, 800946a <_free_r+0x32>
 800945c:	6063      	str	r3, [r4, #4]
 800945e:	6014      	str	r4, [r2, #0]
 8009460:	b003      	add	sp, #12
 8009462:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009466:	f000 bab5 	b.w	80099d4 <__malloc_unlock>
 800946a:	42a3      	cmp	r3, r4
 800946c:	d90b      	bls.n	8009486 <_free_r+0x4e>
 800946e:	6821      	ldr	r1, [r4, #0]
 8009470:	1862      	adds	r2, r4, r1
 8009472:	4293      	cmp	r3, r2
 8009474:	bf04      	itt	eq
 8009476:	681a      	ldreq	r2, [r3, #0]
 8009478:	685b      	ldreq	r3, [r3, #4]
 800947a:	6063      	str	r3, [r4, #4]
 800947c:	bf04      	itt	eq
 800947e:	1852      	addeq	r2, r2, r1
 8009480:	6022      	streq	r2, [r4, #0]
 8009482:	602c      	str	r4, [r5, #0]
 8009484:	e7ec      	b.n	8009460 <_free_r+0x28>
 8009486:	461a      	mov	r2, r3
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	b10b      	cbz	r3, 8009490 <_free_r+0x58>
 800948c:	42a3      	cmp	r3, r4
 800948e:	d9fa      	bls.n	8009486 <_free_r+0x4e>
 8009490:	6811      	ldr	r1, [r2, #0]
 8009492:	1855      	adds	r5, r2, r1
 8009494:	42a5      	cmp	r5, r4
 8009496:	d10b      	bne.n	80094b0 <_free_r+0x78>
 8009498:	6824      	ldr	r4, [r4, #0]
 800949a:	4421      	add	r1, r4
 800949c:	1854      	adds	r4, r2, r1
 800949e:	42a3      	cmp	r3, r4
 80094a0:	6011      	str	r1, [r2, #0]
 80094a2:	d1dd      	bne.n	8009460 <_free_r+0x28>
 80094a4:	681c      	ldr	r4, [r3, #0]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	6053      	str	r3, [r2, #4]
 80094aa:	4421      	add	r1, r4
 80094ac:	6011      	str	r1, [r2, #0]
 80094ae:	e7d7      	b.n	8009460 <_free_r+0x28>
 80094b0:	d902      	bls.n	80094b8 <_free_r+0x80>
 80094b2:	230c      	movs	r3, #12
 80094b4:	6003      	str	r3, [r0, #0]
 80094b6:	e7d3      	b.n	8009460 <_free_r+0x28>
 80094b8:	6825      	ldr	r5, [r4, #0]
 80094ba:	1961      	adds	r1, r4, r5
 80094bc:	428b      	cmp	r3, r1
 80094be:	bf04      	itt	eq
 80094c0:	6819      	ldreq	r1, [r3, #0]
 80094c2:	685b      	ldreq	r3, [r3, #4]
 80094c4:	6063      	str	r3, [r4, #4]
 80094c6:	bf04      	itt	eq
 80094c8:	1949      	addeq	r1, r1, r5
 80094ca:	6021      	streq	r1, [r4, #0]
 80094cc:	6054      	str	r4, [r2, #4]
 80094ce:	e7c7      	b.n	8009460 <_free_r+0x28>
 80094d0:	b003      	add	sp, #12
 80094d2:	bd30      	pop	{r4, r5, pc}
 80094d4:	200041b0 	.word	0x200041b0

080094d8 <_malloc_r>:
 80094d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094da:	1ccd      	adds	r5, r1, #3
 80094dc:	f025 0503 	bic.w	r5, r5, #3
 80094e0:	3508      	adds	r5, #8
 80094e2:	2d0c      	cmp	r5, #12
 80094e4:	bf38      	it	cc
 80094e6:	250c      	movcc	r5, #12
 80094e8:	2d00      	cmp	r5, #0
 80094ea:	4606      	mov	r6, r0
 80094ec:	db01      	blt.n	80094f2 <_malloc_r+0x1a>
 80094ee:	42a9      	cmp	r1, r5
 80094f0:	d903      	bls.n	80094fa <_malloc_r+0x22>
 80094f2:	230c      	movs	r3, #12
 80094f4:	6033      	str	r3, [r6, #0]
 80094f6:	2000      	movs	r0, #0
 80094f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094fa:	f000 fa65 	bl	80099c8 <__malloc_lock>
 80094fe:	4921      	ldr	r1, [pc, #132]	; (8009584 <_malloc_r+0xac>)
 8009500:	680a      	ldr	r2, [r1, #0]
 8009502:	4614      	mov	r4, r2
 8009504:	b99c      	cbnz	r4, 800952e <_malloc_r+0x56>
 8009506:	4f20      	ldr	r7, [pc, #128]	; (8009588 <_malloc_r+0xb0>)
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	b923      	cbnz	r3, 8009516 <_malloc_r+0x3e>
 800950c:	4621      	mov	r1, r4
 800950e:	4630      	mov	r0, r6
 8009510:	f000 f996 	bl	8009840 <_sbrk_r>
 8009514:	6038      	str	r0, [r7, #0]
 8009516:	4629      	mov	r1, r5
 8009518:	4630      	mov	r0, r6
 800951a:	f000 f991 	bl	8009840 <_sbrk_r>
 800951e:	1c43      	adds	r3, r0, #1
 8009520:	d123      	bne.n	800956a <_malloc_r+0x92>
 8009522:	230c      	movs	r3, #12
 8009524:	6033      	str	r3, [r6, #0]
 8009526:	4630      	mov	r0, r6
 8009528:	f000 fa54 	bl	80099d4 <__malloc_unlock>
 800952c:	e7e3      	b.n	80094f6 <_malloc_r+0x1e>
 800952e:	6823      	ldr	r3, [r4, #0]
 8009530:	1b5b      	subs	r3, r3, r5
 8009532:	d417      	bmi.n	8009564 <_malloc_r+0x8c>
 8009534:	2b0b      	cmp	r3, #11
 8009536:	d903      	bls.n	8009540 <_malloc_r+0x68>
 8009538:	6023      	str	r3, [r4, #0]
 800953a:	441c      	add	r4, r3
 800953c:	6025      	str	r5, [r4, #0]
 800953e:	e004      	b.n	800954a <_malloc_r+0x72>
 8009540:	6863      	ldr	r3, [r4, #4]
 8009542:	42a2      	cmp	r2, r4
 8009544:	bf0c      	ite	eq
 8009546:	600b      	streq	r3, [r1, #0]
 8009548:	6053      	strne	r3, [r2, #4]
 800954a:	4630      	mov	r0, r6
 800954c:	f000 fa42 	bl	80099d4 <__malloc_unlock>
 8009550:	f104 000b 	add.w	r0, r4, #11
 8009554:	1d23      	adds	r3, r4, #4
 8009556:	f020 0007 	bic.w	r0, r0, #7
 800955a:	1ac2      	subs	r2, r0, r3
 800955c:	d0cc      	beq.n	80094f8 <_malloc_r+0x20>
 800955e:	1a1b      	subs	r3, r3, r0
 8009560:	50a3      	str	r3, [r4, r2]
 8009562:	e7c9      	b.n	80094f8 <_malloc_r+0x20>
 8009564:	4622      	mov	r2, r4
 8009566:	6864      	ldr	r4, [r4, #4]
 8009568:	e7cc      	b.n	8009504 <_malloc_r+0x2c>
 800956a:	1cc4      	adds	r4, r0, #3
 800956c:	f024 0403 	bic.w	r4, r4, #3
 8009570:	42a0      	cmp	r0, r4
 8009572:	d0e3      	beq.n	800953c <_malloc_r+0x64>
 8009574:	1a21      	subs	r1, r4, r0
 8009576:	4630      	mov	r0, r6
 8009578:	f000 f962 	bl	8009840 <_sbrk_r>
 800957c:	3001      	adds	r0, #1
 800957e:	d1dd      	bne.n	800953c <_malloc_r+0x64>
 8009580:	e7cf      	b.n	8009522 <_malloc_r+0x4a>
 8009582:	bf00      	nop
 8009584:	200041b0 	.word	0x200041b0
 8009588:	200041b4 	.word	0x200041b4

0800958c <__sfputc_r>:
 800958c:	6893      	ldr	r3, [r2, #8]
 800958e:	3b01      	subs	r3, #1
 8009590:	2b00      	cmp	r3, #0
 8009592:	b410      	push	{r4}
 8009594:	6093      	str	r3, [r2, #8]
 8009596:	da08      	bge.n	80095aa <__sfputc_r+0x1e>
 8009598:	6994      	ldr	r4, [r2, #24]
 800959a:	42a3      	cmp	r3, r4
 800959c:	db01      	blt.n	80095a2 <__sfputc_r+0x16>
 800959e:	290a      	cmp	r1, #10
 80095a0:	d103      	bne.n	80095aa <__sfputc_r+0x1e>
 80095a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095a6:	f7fe ba25 	b.w	80079f4 <__swbuf_r>
 80095aa:	6813      	ldr	r3, [r2, #0]
 80095ac:	1c58      	adds	r0, r3, #1
 80095ae:	6010      	str	r0, [r2, #0]
 80095b0:	7019      	strb	r1, [r3, #0]
 80095b2:	4608      	mov	r0, r1
 80095b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095b8:	4770      	bx	lr

080095ba <__sfputs_r>:
 80095ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095bc:	4606      	mov	r6, r0
 80095be:	460f      	mov	r7, r1
 80095c0:	4614      	mov	r4, r2
 80095c2:	18d5      	adds	r5, r2, r3
 80095c4:	42ac      	cmp	r4, r5
 80095c6:	d101      	bne.n	80095cc <__sfputs_r+0x12>
 80095c8:	2000      	movs	r0, #0
 80095ca:	e007      	b.n	80095dc <__sfputs_r+0x22>
 80095cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095d0:	463a      	mov	r2, r7
 80095d2:	4630      	mov	r0, r6
 80095d4:	f7ff ffda 	bl	800958c <__sfputc_r>
 80095d8:	1c43      	adds	r3, r0, #1
 80095da:	d1f3      	bne.n	80095c4 <__sfputs_r+0xa>
 80095dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080095e0 <_vfiprintf_r>:
 80095e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e4:	460d      	mov	r5, r1
 80095e6:	b09d      	sub	sp, #116	; 0x74
 80095e8:	4614      	mov	r4, r2
 80095ea:	4698      	mov	r8, r3
 80095ec:	4606      	mov	r6, r0
 80095ee:	b118      	cbz	r0, 80095f8 <_vfiprintf_r+0x18>
 80095f0:	6983      	ldr	r3, [r0, #24]
 80095f2:	b90b      	cbnz	r3, 80095f8 <_vfiprintf_r+0x18>
 80095f4:	f7ff fa6e 	bl	8008ad4 <__sinit>
 80095f8:	4b89      	ldr	r3, [pc, #548]	; (8009820 <_vfiprintf_r+0x240>)
 80095fa:	429d      	cmp	r5, r3
 80095fc:	d11b      	bne.n	8009636 <_vfiprintf_r+0x56>
 80095fe:	6875      	ldr	r5, [r6, #4]
 8009600:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009602:	07d9      	lsls	r1, r3, #31
 8009604:	d405      	bmi.n	8009612 <_vfiprintf_r+0x32>
 8009606:	89ab      	ldrh	r3, [r5, #12]
 8009608:	059a      	lsls	r2, r3, #22
 800960a:	d402      	bmi.n	8009612 <_vfiprintf_r+0x32>
 800960c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800960e:	f7ff fb16 	bl	8008c3e <__retarget_lock_acquire_recursive>
 8009612:	89ab      	ldrh	r3, [r5, #12]
 8009614:	071b      	lsls	r3, r3, #28
 8009616:	d501      	bpl.n	800961c <_vfiprintf_r+0x3c>
 8009618:	692b      	ldr	r3, [r5, #16]
 800961a:	b9eb      	cbnz	r3, 8009658 <_vfiprintf_r+0x78>
 800961c:	4629      	mov	r1, r5
 800961e:	4630      	mov	r0, r6
 8009620:	f7fe fa3a 	bl	8007a98 <__swsetup_r>
 8009624:	b1c0      	cbz	r0, 8009658 <_vfiprintf_r+0x78>
 8009626:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009628:	07dc      	lsls	r4, r3, #31
 800962a:	d50e      	bpl.n	800964a <_vfiprintf_r+0x6a>
 800962c:	f04f 30ff 	mov.w	r0, #4294967295
 8009630:	b01d      	add	sp, #116	; 0x74
 8009632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009636:	4b7b      	ldr	r3, [pc, #492]	; (8009824 <_vfiprintf_r+0x244>)
 8009638:	429d      	cmp	r5, r3
 800963a:	d101      	bne.n	8009640 <_vfiprintf_r+0x60>
 800963c:	68b5      	ldr	r5, [r6, #8]
 800963e:	e7df      	b.n	8009600 <_vfiprintf_r+0x20>
 8009640:	4b79      	ldr	r3, [pc, #484]	; (8009828 <_vfiprintf_r+0x248>)
 8009642:	429d      	cmp	r5, r3
 8009644:	bf08      	it	eq
 8009646:	68f5      	ldreq	r5, [r6, #12]
 8009648:	e7da      	b.n	8009600 <_vfiprintf_r+0x20>
 800964a:	89ab      	ldrh	r3, [r5, #12]
 800964c:	0598      	lsls	r0, r3, #22
 800964e:	d4ed      	bmi.n	800962c <_vfiprintf_r+0x4c>
 8009650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009652:	f7ff faf5 	bl	8008c40 <__retarget_lock_release_recursive>
 8009656:	e7e9      	b.n	800962c <_vfiprintf_r+0x4c>
 8009658:	2300      	movs	r3, #0
 800965a:	9309      	str	r3, [sp, #36]	; 0x24
 800965c:	2320      	movs	r3, #32
 800965e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009662:	f8cd 800c 	str.w	r8, [sp, #12]
 8009666:	2330      	movs	r3, #48	; 0x30
 8009668:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800982c <_vfiprintf_r+0x24c>
 800966c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009670:	f04f 0901 	mov.w	r9, #1
 8009674:	4623      	mov	r3, r4
 8009676:	469a      	mov	sl, r3
 8009678:	f813 2b01 	ldrb.w	r2, [r3], #1
 800967c:	b10a      	cbz	r2, 8009682 <_vfiprintf_r+0xa2>
 800967e:	2a25      	cmp	r2, #37	; 0x25
 8009680:	d1f9      	bne.n	8009676 <_vfiprintf_r+0x96>
 8009682:	ebba 0b04 	subs.w	fp, sl, r4
 8009686:	d00b      	beq.n	80096a0 <_vfiprintf_r+0xc0>
 8009688:	465b      	mov	r3, fp
 800968a:	4622      	mov	r2, r4
 800968c:	4629      	mov	r1, r5
 800968e:	4630      	mov	r0, r6
 8009690:	f7ff ff93 	bl	80095ba <__sfputs_r>
 8009694:	3001      	adds	r0, #1
 8009696:	f000 80aa 	beq.w	80097ee <_vfiprintf_r+0x20e>
 800969a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800969c:	445a      	add	r2, fp
 800969e:	9209      	str	r2, [sp, #36]	; 0x24
 80096a0:	f89a 3000 	ldrb.w	r3, [sl]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	f000 80a2 	beq.w	80097ee <_vfiprintf_r+0x20e>
 80096aa:	2300      	movs	r3, #0
 80096ac:	f04f 32ff 	mov.w	r2, #4294967295
 80096b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096b4:	f10a 0a01 	add.w	sl, sl, #1
 80096b8:	9304      	str	r3, [sp, #16]
 80096ba:	9307      	str	r3, [sp, #28]
 80096bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096c0:	931a      	str	r3, [sp, #104]	; 0x68
 80096c2:	4654      	mov	r4, sl
 80096c4:	2205      	movs	r2, #5
 80096c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ca:	4858      	ldr	r0, [pc, #352]	; (800982c <_vfiprintf_r+0x24c>)
 80096cc:	f7f6 fd88 	bl	80001e0 <memchr>
 80096d0:	9a04      	ldr	r2, [sp, #16]
 80096d2:	b9d8      	cbnz	r0, 800970c <_vfiprintf_r+0x12c>
 80096d4:	06d1      	lsls	r1, r2, #27
 80096d6:	bf44      	itt	mi
 80096d8:	2320      	movmi	r3, #32
 80096da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096de:	0713      	lsls	r3, r2, #28
 80096e0:	bf44      	itt	mi
 80096e2:	232b      	movmi	r3, #43	; 0x2b
 80096e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096e8:	f89a 3000 	ldrb.w	r3, [sl]
 80096ec:	2b2a      	cmp	r3, #42	; 0x2a
 80096ee:	d015      	beq.n	800971c <_vfiprintf_r+0x13c>
 80096f0:	9a07      	ldr	r2, [sp, #28]
 80096f2:	4654      	mov	r4, sl
 80096f4:	2000      	movs	r0, #0
 80096f6:	f04f 0c0a 	mov.w	ip, #10
 80096fa:	4621      	mov	r1, r4
 80096fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009700:	3b30      	subs	r3, #48	; 0x30
 8009702:	2b09      	cmp	r3, #9
 8009704:	d94e      	bls.n	80097a4 <_vfiprintf_r+0x1c4>
 8009706:	b1b0      	cbz	r0, 8009736 <_vfiprintf_r+0x156>
 8009708:	9207      	str	r2, [sp, #28]
 800970a:	e014      	b.n	8009736 <_vfiprintf_r+0x156>
 800970c:	eba0 0308 	sub.w	r3, r0, r8
 8009710:	fa09 f303 	lsl.w	r3, r9, r3
 8009714:	4313      	orrs	r3, r2
 8009716:	9304      	str	r3, [sp, #16]
 8009718:	46a2      	mov	sl, r4
 800971a:	e7d2      	b.n	80096c2 <_vfiprintf_r+0xe2>
 800971c:	9b03      	ldr	r3, [sp, #12]
 800971e:	1d19      	adds	r1, r3, #4
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	9103      	str	r1, [sp, #12]
 8009724:	2b00      	cmp	r3, #0
 8009726:	bfbb      	ittet	lt
 8009728:	425b      	neglt	r3, r3
 800972a:	f042 0202 	orrlt.w	r2, r2, #2
 800972e:	9307      	strge	r3, [sp, #28]
 8009730:	9307      	strlt	r3, [sp, #28]
 8009732:	bfb8      	it	lt
 8009734:	9204      	strlt	r2, [sp, #16]
 8009736:	7823      	ldrb	r3, [r4, #0]
 8009738:	2b2e      	cmp	r3, #46	; 0x2e
 800973a:	d10c      	bne.n	8009756 <_vfiprintf_r+0x176>
 800973c:	7863      	ldrb	r3, [r4, #1]
 800973e:	2b2a      	cmp	r3, #42	; 0x2a
 8009740:	d135      	bne.n	80097ae <_vfiprintf_r+0x1ce>
 8009742:	9b03      	ldr	r3, [sp, #12]
 8009744:	1d1a      	adds	r2, r3, #4
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	9203      	str	r2, [sp, #12]
 800974a:	2b00      	cmp	r3, #0
 800974c:	bfb8      	it	lt
 800974e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009752:	3402      	adds	r4, #2
 8009754:	9305      	str	r3, [sp, #20]
 8009756:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800983c <_vfiprintf_r+0x25c>
 800975a:	7821      	ldrb	r1, [r4, #0]
 800975c:	2203      	movs	r2, #3
 800975e:	4650      	mov	r0, sl
 8009760:	f7f6 fd3e 	bl	80001e0 <memchr>
 8009764:	b140      	cbz	r0, 8009778 <_vfiprintf_r+0x198>
 8009766:	2340      	movs	r3, #64	; 0x40
 8009768:	eba0 000a 	sub.w	r0, r0, sl
 800976c:	fa03 f000 	lsl.w	r0, r3, r0
 8009770:	9b04      	ldr	r3, [sp, #16]
 8009772:	4303      	orrs	r3, r0
 8009774:	3401      	adds	r4, #1
 8009776:	9304      	str	r3, [sp, #16]
 8009778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800977c:	482c      	ldr	r0, [pc, #176]	; (8009830 <_vfiprintf_r+0x250>)
 800977e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009782:	2206      	movs	r2, #6
 8009784:	f7f6 fd2c 	bl	80001e0 <memchr>
 8009788:	2800      	cmp	r0, #0
 800978a:	d03f      	beq.n	800980c <_vfiprintf_r+0x22c>
 800978c:	4b29      	ldr	r3, [pc, #164]	; (8009834 <_vfiprintf_r+0x254>)
 800978e:	bb1b      	cbnz	r3, 80097d8 <_vfiprintf_r+0x1f8>
 8009790:	9b03      	ldr	r3, [sp, #12]
 8009792:	3307      	adds	r3, #7
 8009794:	f023 0307 	bic.w	r3, r3, #7
 8009798:	3308      	adds	r3, #8
 800979a:	9303      	str	r3, [sp, #12]
 800979c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800979e:	443b      	add	r3, r7
 80097a0:	9309      	str	r3, [sp, #36]	; 0x24
 80097a2:	e767      	b.n	8009674 <_vfiprintf_r+0x94>
 80097a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80097a8:	460c      	mov	r4, r1
 80097aa:	2001      	movs	r0, #1
 80097ac:	e7a5      	b.n	80096fa <_vfiprintf_r+0x11a>
 80097ae:	2300      	movs	r3, #0
 80097b0:	3401      	adds	r4, #1
 80097b2:	9305      	str	r3, [sp, #20]
 80097b4:	4619      	mov	r1, r3
 80097b6:	f04f 0c0a 	mov.w	ip, #10
 80097ba:	4620      	mov	r0, r4
 80097bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097c0:	3a30      	subs	r2, #48	; 0x30
 80097c2:	2a09      	cmp	r2, #9
 80097c4:	d903      	bls.n	80097ce <_vfiprintf_r+0x1ee>
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d0c5      	beq.n	8009756 <_vfiprintf_r+0x176>
 80097ca:	9105      	str	r1, [sp, #20]
 80097cc:	e7c3      	b.n	8009756 <_vfiprintf_r+0x176>
 80097ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80097d2:	4604      	mov	r4, r0
 80097d4:	2301      	movs	r3, #1
 80097d6:	e7f0      	b.n	80097ba <_vfiprintf_r+0x1da>
 80097d8:	ab03      	add	r3, sp, #12
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	462a      	mov	r2, r5
 80097de:	4b16      	ldr	r3, [pc, #88]	; (8009838 <_vfiprintf_r+0x258>)
 80097e0:	a904      	add	r1, sp, #16
 80097e2:	4630      	mov	r0, r6
 80097e4:	f7fd fc52 	bl	800708c <_printf_float>
 80097e8:	4607      	mov	r7, r0
 80097ea:	1c78      	adds	r0, r7, #1
 80097ec:	d1d6      	bne.n	800979c <_vfiprintf_r+0x1bc>
 80097ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097f0:	07d9      	lsls	r1, r3, #31
 80097f2:	d405      	bmi.n	8009800 <_vfiprintf_r+0x220>
 80097f4:	89ab      	ldrh	r3, [r5, #12]
 80097f6:	059a      	lsls	r2, r3, #22
 80097f8:	d402      	bmi.n	8009800 <_vfiprintf_r+0x220>
 80097fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097fc:	f7ff fa20 	bl	8008c40 <__retarget_lock_release_recursive>
 8009800:	89ab      	ldrh	r3, [r5, #12]
 8009802:	065b      	lsls	r3, r3, #25
 8009804:	f53f af12 	bmi.w	800962c <_vfiprintf_r+0x4c>
 8009808:	9809      	ldr	r0, [sp, #36]	; 0x24
 800980a:	e711      	b.n	8009630 <_vfiprintf_r+0x50>
 800980c:	ab03      	add	r3, sp, #12
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	462a      	mov	r2, r5
 8009812:	4b09      	ldr	r3, [pc, #36]	; (8009838 <_vfiprintf_r+0x258>)
 8009814:	a904      	add	r1, sp, #16
 8009816:	4630      	mov	r0, r6
 8009818:	f7fd fedc 	bl	80075d4 <_printf_i>
 800981c:	e7e4      	b.n	80097e8 <_vfiprintf_r+0x208>
 800981e:	bf00      	nop
 8009820:	08009d84 	.word	0x08009d84
 8009824:	08009da4 	.word	0x08009da4
 8009828:	08009d64 	.word	0x08009d64
 800982c:	08009f24 	.word	0x08009f24
 8009830:	08009f2e 	.word	0x08009f2e
 8009834:	0800708d 	.word	0x0800708d
 8009838:	080095bb 	.word	0x080095bb
 800983c:	08009f2a 	.word	0x08009f2a

08009840 <_sbrk_r>:
 8009840:	b538      	push	{r3, r4, r5, lr}
 8009842:	4d06      	ldr	r5, [pc, #24]	; (800985c <_sbrk_r+0x1c>)
 8009844:	2300      	movs	r3, #0
 8009846:	4604      	mov	r4, r0
 8009848:	4608      	mov	r0, r1
 800984a:	602b      	str	r3, [r5, #0]
 800984c:	f7f8 f8ea 	bl	8001a24 <_sbrk>
 8009850:	1c43      	adds	r3, r0, #1
 8009852:	d102      	bne.n	800985a <_sbrk_r+0x1a>
 8009854:	682b      	ldr	r3, [r5, #0]
 8009856:	b103      	cbz	r3, 800985a <_sbrk_r+0x1a>
 8009858:	6023      	str	r3, [r4, #0]
 800985a:	bd38      	pop	{r3, r4, r5, pc}
 800985c:	20004308 	.word	0x20004308

08009860 <__sread>:
 8009860:	b510      	push	{r4, lr}
 8009862:	460c      	mov	r4, r1
 8009864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009868:	f000 f8ba 	bl	80099e0 <_read_r>
 800986c:	2800      	cmp	r0, #0
 800986e:	bfab      	itete	ge
 8009870:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009872:	89a3      	ldrhlt	r3, [r4, #12]
 8009874:	181b      	addge	r3, r3, r0
 8009876:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800987a:	bfac      	ite	ge
 800987c:	6563      	strge	r3, [r4, #84]	; 0x54
 800987e:	81a3      	strhlt	r3, [r4, #12]
 8009880:	bd10      	pop	{r4, pc}

08009882 <__swrite>:
 8009882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009886:	461f      	mov	r7, r3
 8009888:	898b      	ldrh	r3, [r1, #12]
 800988a:	05db      	lsls	r3, r3, #23
 800988c:	4605      	mov	r5, r0
 800988e:	460c      	mov	r4, r1
 8009890:	4616      	mov	r6, r2
 8009892:	d505      	bpl.n	80098a0 <__swrite+0x1e>
 8009894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009898:	2302      	movs	r3, #2
 800989a:	2200      	movs	r2, #0
 800989c:	f000 f870 	bl	8009980 <_lseek_r>
 80098a0:	89a3      	ldrh	r3, [r4, #12]
 80098a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098aa:	81a3      	strh	r3, [r4, #12]
 80098ac:	4632      	mov	r2, r6
 80098ae:	463b      	mov	r3, r7
 80098b0:	4628      	mov	r0, r5
 80098b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098b6:	f000 b817 	b.w	80098e8 <_write_r>

080098ba <__sseek>:
 80098ba:	b510      	push	{r4, lr}
 80098bc:	460c      	mov	r4, r1
 80098be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098c2:	f000 f85d 	bl	8009980 <_lseek_r>
 80098c6:	1c43      	adds	r3, r0, #1
 80098c8:	89a3      	ldrh	r3, [r4, #12]
 80098ca:	bf15      	itete	ne
 80098cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80098ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80098d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80098d6:	81a3      	strheq	r3, [r4, #12]
 80098d8:	bf18      	it	ne
 80098da:	81a3      	strhne	r3, [r4, #12]
 80098dc:	bd10      	pop	{r4, pc}

080098de <__sclose>:
 80098de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098e2:	f000 b81b 	b.w	800991c <_close_r>
	...

080098e8 <_write_r>:
 80098e8:	b538      	push	{r3, r4, r5, lr}
 80098ea:	4d07      	ldr	r5, [pc, #28]	; (8009908 <_write_r+0x20>)
 80098ec:	4604      	mov	r4, r0
 80098ee:	4608      	mov	r0, r1
 80098f0:	4611      	mov	r1, r2
 80098f2:	2200      	movs	r2, #0
 80098f4:	602a      	str	r2, [r5, #0]
 80098f6:	461a      	mov	r2, r3
 80098f8:	f7f7 fb13 	bl	8000f22 <_write>
 80098fc:	1c43      	adds	r3, r0, #1
 80098fe:	d102      	bne.n	8009906 <_write_r+0x1e>
 8009900:	682b      	ldr	r3, [r5, #0]
 8009902:	b103      	cbz	r3, 8009906 <_write_r+0x1e>
 8009904:	6023      	str	r3, [r4, #0]
 8009906:	bd38      	pop	{r3, r4, r5, pc}
 8009908:	20004308 	.word	0x20004308

0800990c <abort>:
 800990c:	b508      	push	{r3, lr}
 800990e:	2006      	movs	r0, #6
 8009910:	f000 f8a0 	bl	8009a54 <raise>
 8009914:	2001      	movs	r0, #1
 8009916:	f7f8 f829 	bl	800196c <_exit>
	...

0800991c <_close_r>:
 800991c:	b538      	push	{r3, r4, r5, lr}
 800991e:	4d06      	ldr	r5, [pc, #24]	; (8009938 <_close_r+0x1c>)
 8009920:	2300      	movs	r3, #0
 8009922:	4604      	mov	r4, r0
 8009924:	4608      	mov	r0, r1
 8009926:	602b      	str	r3, [r5, #0]
 8009928:	f7f8 f847 	bl	80019ba <_close>
 800992c:	1c43      	adds	r3, r0, #1
 800992e:	d102      	bne.n	8009936 <_close_r+0x1a>
 8009930:	682b      	ldr	r3, [r5, #0]
 8009932:	b103      	cbz	r3, 8009936 <_close_r+0x1a>
 8009934:	6023      	str	r3, [r4, #0]
 8009936:	bd38      	pop	{r3, r4, r5, pc}
 8009938:	20004308 	.word	0x20004308

0800993c <_fstat_r>:
 800993c:	b538      	push	{r3, r4, r5, lr}
 800993e:	4d07      	ldr	r5, [pc, #28]	; (800995c <_fstat_r+0x20>)
 8009940:	2300      	movs	r3, #0
 8009942:	4604      	mov	r4, r0
 8009944:	4608      	mov	r0, r1
 8009946:	4611      	mov	r1, r2
 8009948:	602b      	str	r3, [r5, #0]
 800994a:	f7f8 f842 	bl	80019d2 <_fstat>
 800994e:	1c43      	adds	r3, r0, #1
 8009950:	d102      	bne.n	8009958 <_fstat_r+0x1c>
 8009952:	682b      	ldr	r3, [r5, #0]
 8009954:	b103      	cbz	r3, 8009958 <_fstat_r+0x1c>
 8009956:	6023      	str	r3, [r4, #0]
 8009958:	bd38      	pop	{r3, r4, r5, pc}
 800995a:	bf00      	nop
 800995c:	20004308 	.word	0x20004308

08009960 <_isatty_r>:
 8009960:	b538      	push	{r3, r4, r5, lr}
 8009962:	4d06      	ldr	r5, [pc, #24]	; (800997c <_isatty_r+0x1c>)
 8009964:	2300      	movs	r3, #0
 8009966:	4604      	mov	r4, r0
 8009968:	4608      	mov	r0, r1
 800996a:	602b      	str	r3, [r5, #0]
 800996c:	f7f8 f841 	bl	80019f2 <_isatty>
 8009970:	1c43      	adds	r3, r0, #1
 8009972:	d102      	bne.n	800997a <_isatty_r+0x1a>
 8009974:	682b      	ldr	r3, [r5, #0]
 8009976:	b103      	cbz	r3, 800997a <_isatty_r+0x1a>
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	bd38      	pop	{r3, r4, r5, pc}
 800997c:	20004308 	.word	0x20004308

08009980 <_lseek_r>:
 8009980:	b538      	push	{r3, r4, r5, lr}
 8009982:	4d07      	ldr	r5, [pc, #28]	; (80099a0 <_lseek_r+0x20>)
 8009984:	4604      	mov	r4, r0
 8009986:	4608      	mov	r0, r1
 8009988:	4611      	mov	r1, r2
 800998a:	2200      	movs	r2, #0
 800998c:	602a      	str	r2, [r5, #0]
 800998e:	461a      	mov	r2, r3
 8009990:	f7f8 f83a 	bl	8001a08 <_lseek>
 8009994:	1c43      	adds	r3, r0, #1
 8009996:	d102      	bne.n	800999e <_lseek_r+0x1e>
 8009998:	682b      	ldr	r3, [r5, #0]
 800999a:	b103      	cbz	r3, 800999e <_lseek_r+0x1e>
 800999c:	6023      	str	r3, [r4, #0]
 800999e:	bd38      	pop	{r3, r4, r5, pc}
 80099a0:	20004308 	.word	0x20004308

080099a4 <__ascii_mbtowc>:
 80099a4:	b082      	sub	sp, #8
 80099a6:	b901      	cbnz	r1, 80099aa <__ascii_mbtowc+0x6>
 80099a8:	a901      	add	r1, sp, #4
 80099aa:	b142      	cbz	r2, 80099be <__ascii_mbtowc+0x1a>
 80099ac:	b14b      	cbz	r3, 80099c2 <__ascii_mbtowc+0x1e>
 80099ae:	7813      	ldrb	r3, [r2, #0]
 80099b0:	600b      	str	r3, [r1, #0]
 80099b2:	7812      	ldrb	r2, [r2, #0]
 80099b4:	1e10      	subs	r0, r2, #0
 80099b6:	bf18      	it	ne
 80099b8:	2001      	movne	r0, #1
 80099ba:	b002      	add	sp, #8
 80099bc:	4770      	bx	lr
 80099be:	4610      	mov	r0, r2
 80099c0:	e7fb      	b.n	80099ba <__ascii_mbtowc+0x16>
 80099c2:	f06f 0001 	mvn.w	r0, #1
 80099c6:	e7f8      	b.n	80099ba <__ascii_mbtowc+0x16>

080099c8 <__malloc_lock>:
 80099c8:	4801      	ldr	r0, [pc, #4]	; (80099d0 <__malloc_lock+0x8>)
 80099ca:	f7ff b938 	b.w	8008c3e <__retarget_lock_acquire_recursive>
 80099ce:	bf00      	nop
 80099d0:	20004300 	.word	0x20004300

080099d4 <__malloc_unlock>:
 80099d4:	4801      	ldr	r0, [pc, #4]	; (80099dc <__malloc_unlock+0x8>)
 80099d6:	f7ff b933 	b.w	8008c40 <__retarget_lock_release_recursive>
 80099da:	bf00      	nop
 80099dc:	20004300 	.word	0x20004300

080099e0 <_read_r>:
 80099e0:	b538      	push	{r3, r4, r5, lr}
 80099e2:	4d07      	ldr	r5, [pc, #28]	; (8009a00 <_read_r+0x20>)
 80099e4:	4604      	mov	r4, r0
 80099e6:	4608      	mov	r0, r1
 80099e8:	4611      	mov	r1, r2
 80099ea:	2200      	movs	r2, #0
 80099ec:	602a      	str	r2, [r5, #0]
 80099ee:	461a      	mov	r2, r3
 80099f0:	f7f7 ffc6 	bl	8001980 <_read>
 80099f4:	1c43      	adds	r3, r0, #1
 80099f6:	d102      	bne.n	80099fe <_read_r+0x1e>
 80099f8:	682b      	ldr	r3, [r5, #0]
 80099fa:	b103      	cbz	r3, 80099fe <_read_r+0x1e>
 80099fc:	6023      	str	r3, [r4, #0]
 80099fe:	bd38      	pop	{r3, r4, r5, pc}
 8009a00:	20004308 	.word	0x20004308

08009a04 <_raise_r>:
 8009a04:	291f      	cmp	r1, #31
 8009a06:	b538      	push	{r3, r4, r5, lr}
 8009a08:	4604      	mov	r4, r0
 8009a0a:	460d      	mov	r5, r1
 8009a0c:	d904      	bls.n	8009a18 <_raise_r+0x14>
 8009a0e:	2316      	movs	r3, #22
 8009a10:	6003      	str	r3, [r0, #0]
 8009a12:	f04f 30ff 	mov.w	r0, #4294967295
 8009a16:	bd38      	pop	{r3, r4, r5, pc}
 8009a18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009a1a:	b112      	cbz	r2, 8009a22 <_raise_r+0x1e>
 8009a1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a20:	b94b      	cbnz	r3, 8009a36 <_raise_r+0x32>
 8009a22:	4620      	mov	r0, r4
 8009a24:	f000 f830 	bl	8009a88 <_getpid_r>
 8009a28:	462a      	mov	r2, r5
 8009a2a:	4601      	mov	r1, r0
 8009a2c:	4620      	mov	r0, r4
 8009a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a32:	f000 b817 	b.w	8009a64 <_kill_r>
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d00a      	beq.n	8009a50 <_raise_r+0x4c>
 8009a3a:	1c59      	adds	r1, r3, #1
 8009a3c:	d103      	bne.n	8009a46 <_raise_r+0x42>
 8009a3e:	2316      	movs	r3, #22
 8009a40:	6003      	str	r3, [r0, #0]
 8009a42:	2001      	movs	r0, #1
 8009a44:	e7e7      	b.n	8009a16 <_raise_r+0x12>
 8009a46:	2400      	movs	r4, #0
 8009a48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009a4c:	4628      	mov	r0, r5
 8009a4e:	4798      	blx	r3
 8009a50:	2000      	movs	r0, #0
 8009a52:	e7e0      	b.n	8009a16 <_raise_r+0x12>

08009a54 <raise>:
 8009a54:	4b02      	ldr	r3, [pc, #8]	; (8009a60 <raise+0xc>)
 8009a56:	4601      	mov	r1, r0
 8009a58:	6818      	ldr	r0, [r3, #0]
 8009a5a:	f7ff bfd3 	b.w	8009a04 <_raise_r>
 8009a5e:	bf00      	nop
 8009a60:	20000010 	.word	0x20000010

08009a64 <_kill_r>:
 8009a64:	b538      	push	{r3, r4, r5, lr}
 8009a66:	4d07      	ldr	r5, [pc, #28]	; (8009a84 <_kill_r+0x20>)
 8009a68:	2300      	movs	r3, #0
 8009a6a:	4604      	mov	r4, r0
 8009a6c:	4608      	mov	r0, r1
 8009a6e:	4611      	mov	r1, r2
 8009a70:	602b      	str	r3, [r5, #0]
 8009a72:	f7f7 ff6b 	bl	800194c <_kill>
 8009a76:	1c43      	adds	r3, r0, #1
 8009a78:	d102      	bne.n	8009a80 <_kill_r+0x1c>
 8009a7a:	682b      	ldr	r3, [r5, #0]
 8009a7c:	b103      	cbz	r3, 8009a80 <_kill_r+0x1c>
 8009a7e:	6023      	str	r3, [r4, #0]
 8009a80:	bd38      	pop	{r3, r4, r5, pc}
 8009a82:	bf00      	nop
 8009a84:	20004308 	.word	0x20004308

08009a88 <_getpid_r>:
 8009a88:	f7f7 bf58 	b.w	800193c <_getpid>

08009a8c <__ascii_wctomb>:
 8009a8c:	b149      	cbz	r1, 8009aa2 <__ascii_wctomb+0x16>
 8009a8e:	2aff      	cmp	r2, #255	; 0xff
 8009a90:	bf85      	ittet	hi
 8009a92:	238a      	movhi	r3, #138	; 0x8a
 8009a94:	6003      	strhi	r3, [r0, #0]
 8009a96:	700a      	strbls	r2, [r1, #0]
 8009a98:	f04f 30ff 	movhi.w	r0, #4294967295
 8009a9c:	bf98      	it	ls
 8009a9e:	2001      	movls	r0, #1
 8009aa0:	4770      	bx	lr
 8009aa2:	4608      	mov	r0, r1
 8009aa4:	4770      	bx	lr
	...

08009aa8 <_init>:
 8009aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aaa:	bf00      	nop
 8009aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aae:	bc08      	pop	{r3}
 8009ab0:	469e      	mov	lr, r3
 8009ab2:	4770      	bx	lr

08009ab4 <_fini>:
 8009ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ab6:	bf00      	nop
 8009ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aba:	bc08      	pop	{r3}
 8009abc:	469e      	mov	lr, r3
 8009abe:	4770      	bx	lr
