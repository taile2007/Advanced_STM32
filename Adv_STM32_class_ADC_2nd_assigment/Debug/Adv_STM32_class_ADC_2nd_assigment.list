
Adv_STM32_class_ADC_2nd_assigment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  08009658  08009658  00019658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b04  08009b04  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009b04  08009b04  00019b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b0c  08009b0c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b0c  08009b0c  00019b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b10  08009b10  00019b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009b14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004118  200001e0  08009cf4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  200042f8  08009cf4  000242f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001770b  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000357f  00000000  00000000  0003791b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001290  00000000  00000000  0003aea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001148  00000000  00000000  0003c130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002505a  00000000  00000000  0003d278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000161ca  00000000  00000000  000622d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0b32  00000000  00000000  0007849c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00158fce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005db4  00000000  00000000  00159024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009640 	.word	0x08009640

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08009640 	.word	0x08009640

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <vApplicationGetIdleTaskMemory+0x2c>)
 8000eb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	4a06      	ldr	r2, [pc, #24]	; (8000ed0 <vApplicationGetIdleTaskMemory+0x30>)
 8000eb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2280      	movs	r2, #128	; 0x80
 8000ebc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	200001fc 	.word	0x200001fc
 8000ed0:	20000250 	.word	0x20000250

08000ed4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000edc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ee0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d013      	beq.n	8000f14 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000eec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ef0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000ef4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d00b      	beq.n	8000f14 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000efc:	e000      	b.n	8000f00 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000efe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f00:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d0f9      	beq.n	8000efe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f0a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	b2d2      	uxtb	r2, r2
 8000f12:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f14:	687b      	ldr	r3, [r7, #4]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b086      	sub	sp, #24
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	60f8      	str	r0, [r7, #12]
 8000f2a:	60b9      	str	r1, [r7, #8]
 8000f2c:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
	for (i = 0; i <len; i++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
 8000f36:	e009      	b.n	8000f4c <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	1c5a      	adds	r2, r3, #1
 8000f3c:	60ba      	str	r2, [r7, #8]
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ffc7 	bl	8000ed4 <ITM_SendChar>
	for (i = 0; i <len; i++)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	dbf1      	blt.n	8000f38 <_write+0x16>
	return len;
 8000f54:	687b      	ldr	r3, [r7, #4]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f66:	f000 fd33 	bl	80019d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f6a:	f000 f83f 	bl	8000fec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6e:	f000 f995 	bl	800129c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f72:	f000 f8a5 	bl	80010c0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000f76:	f000 f967 	bl	8001248 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000f7a:	f000 f8f3 	bl	8001164 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim2);
 8000f7e:	4813      	ldr	r0, [pc, #76]	; (8000fcc <main+0x6c>)
 8000f80:	f002 fa4e 	bl	8003420 <HAL_TIM_Base_Start>
  HAL_ADC_Start_IT(&hadc1);
 8000f84:	4812      	ldr	r0, [pc, #72]	; (8000fd0 <main+0x70>)
 8000f86:	f000 fda9 	bl	8001adc <HAL_ADC_Start_IT>


  /************************* Create Integer Queue ****************************/
  SimpleQueue = xQueueCreate(5, sizeof (int));
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2104      	movs	r1, #4
 8000f8e:	2005      	movs	r0, #5
 8000f90:	f003 ffec 	bl	8004f6c <xQueueGenericCreate>
 8000f94:	4603      	mov	r3, r0
 8000f96:	4a0f      	ldr	r2, [pc, #60]	; (8000fd4 <main+0x74>)
 8000f98:	6013      	str	r3, [r2, #0]
  if (SimpleQueue == 0)  // Queue not created
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <main+0x74>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d103      	bne.n	8000faa <main+0x4a>
  {
//	  char *str = "Unable to create Integer Queue\n\n";
//	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
	  printf("Unable to create Integer Queue\n\n");
 8000fa2:	480d      	ldr	r0, [pc, #52]	; (8000fd8 <main+0x78>)
 8000fa4:	f006 faea 	bl	800757c <puts>
 8000fa8:	e002      	b.n	8000fb0 <main+0x50>
  }
  else
  {
//	  char *str = "Integer Queue Created successfully\n\n";
//	  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
	  printf("Integer Queue Created successfully\n\n");
 8000faa:	480c      	ldr	r0, [pc, #48]	; (8000fdc <main+0x7c>)
 8000fac:	f006 fae6 	bl	800757c <puts>
  }

  /****************************** Task related******************************/
  //xTaskCreate(ADC_Queue_Task, "ADC_Queue",  128, NULL, 3, &ADC_Queue_Handler);
  xTaskCreate(Data_Processing_Task, "DSP", 128, NULL, 3, &Data_Processing_Handler);
 8000fb0:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <main+0x80>)
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2300      	movs	r3, #0
 8000fba:	2280      	movs	r2, #128	; 0x80
 8000fbc:	4909      	ldr	r1, [pc, #36]	; (8000fe4 <main+0x84>)
 8000fbe:	480a      	ldr	r0, [pc, #40]	; (8000fe8 <main+0x88>)
 8000fc0:	f004 fafd 	bl	80055be <xTaskCreate>


  vTaskStartScheduler();
 8000fc4:	f004 fc66 	bl	8005894 <vTaskStartScheduler>
  /* USER CODE END 2 */


  /* USER CODE BEGIN WHILE */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <main+0x68>
 8000fca:	bf00      	nop
 8000fcc:	20004208 	.word	0x20004208
 8000fd0:	200041c0 	.word	0x200041c0
 8000fd4:	200041bc 	.word	0x200041bc
 8000fd8:	08009658 	.word	0x08009658
 8000fdc:	08009678 	.word	0x08009678
 8000fe0:	200041b8 	.word	0x200041b8
 8000fe4:	0800969c 	.word	0x0800969c
 8000fe8:	08001341 	.word	0x08001341

08000fec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b094      	sub	sp, #80	; 0x50
 8000ff0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff2:	f107 0320 	add.w	r3, r7, #32
 8000ff6:	2230      	movs	r2, #48	; 0x30
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f005 fdc6 	bl	8006b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001010:	2300      	movs	r3, #0
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	4b28      	ldr	r3, [pc, #160]	; (80010b8 <SystemClock_Config+0xcc>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001018:	4a27      	ldr	r2, [pc, #156]	; (80010b8 <SystemClock_Config+0xcc>)
 800101a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800101e:	6413      	str	r3, [r2, #64]	; 0x40
 8001020:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <SystemClock_Config+0xcc>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800102c:	2300      	movs	r3, #0
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	4b22      	ldr	r3, [pc, #136]	; (80010bc <SystemClock_Config+0xd0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a21      	ldr	r2, [pc, #132]	; (80010bc <SystemClock_Config+0xd0>)
 8001036:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <SystemClock_Config+0xd0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001048:	2302      	movs	r3, #2
 800104a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800104c:	2301      	movs	r3, #1
 800104e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001050:	2310      	movs	r3, #16
 8001052:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001054:	2302      	movs	r3, #2
 8001056:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001058:	2300      	movs	r3, #0
 800105a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800105c:	2308      	movs	r3, #8
 800105e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001060:	2364      	movs	r3, #100	; 0x64
 8001062:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001064:	2302      	movs	r3, #2
 8001066:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001068:	2304      	movs	r3, #4
 800106a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106c:	f107 0320 	add.w	r3, r7, #32
 8001070:	4618      	mov	r0, r3
 8001072:	f001 fcdf 	bl	8002a34 <HAL_RCC_OscConfig>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800107c:	f000 fa6a 	bl	8001554 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001080:	230f      	movs	r3, #15
 8001082:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001084:	2302      	movs	r3, #2
 8001086:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800108c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001090:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001096:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	2103      	movs	r1, #3
 800109e:	4618      	mov	r0, r3
 80010a0:	f001 ff40 	bl	8002f24 <HAL_RCC_ClockConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010aa:	f000 fa53 	bl	8001554 <Error_Handler>
  }
}
 80010ae:	bf00      	nop
 80010b0:	3750      	adds	r7, #80	; 0x50
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40007000 	.word	0x40007000

080010c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c6:	463b      	mov	r3, r7
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010d2:	4b22      	ldr	r3, [pc, #136]	; (800115c <MX_ADC1_Init+0x9c>)
 80010d4:	4a22      	ldr	r2, [pc, #136]	; (8001160 <MX_ADC1_Init+0xa0>)
 80010d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010d8:	4b20      	ldr	r3, [pc, #128]	; (800115c <MX_ADC1_Init+0x9c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010de:	4b1f      	ldr	r3, [pc, #124]	; (800115c <MX_ADC1_Init+0x9c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80010e4:	4b1d      	ldr	r3, [pc, #116]	; (800115c <MX_ADC1_Init+0x9c>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80010ea:	4b1c      	ldr	r3, [pc, #112]	; (800115c <MX_ADC1_Init+0x9c>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010f0:	4b1a      	ldr	r3, [pc, #104]	; (800115c <MX_ADC1_Init+0x9c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010f8:	4b18      	ldr	r3, [pc, #96]	; (800115c <MX_ADC1_Init+0x9c>)
 80010fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001100:	4b16      	ldr	r3, [pc, #88]	; (800115c <MX_ADC1_Init+0x9c>)
 8001102:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001106:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001108:	4b14      	ldr	r3, [pc, #80]	; (800115c <MX_ADC1_Init+0x9c>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800110e:	4b13      	ldr	r3, [pc, #76]	; (800115c <MX_ADC1_Init+0x9c>)
 8001110:	2201      	movs	r2, #1
 8001112:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_ADC1_Init+0x9c>)
 8001116:	2200      	movs	r2, #0
 8001118:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800111c:	4b0f      	ldr	r3, [pc, #60]	; (800115c <MX_ADC1_Init+0x9c>)
 800111e:	2201      	movs	r2, #1
 8001120:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001122:	480e      	ldr	r0, [pc, #56]	; (800115c <MX_ADC1_Init+0x9c>)
 8001124:	f000 fc96 	bl	8001a54 <HAL_ADC_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800112e:	f000 fa11 	bl	8001554 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001132:	2310      	movs	r3, #16
 8001134:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001136:	2301      	movs	r3, #1
 8001138:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800113a:	2302      	movs	r3, #2
 800113c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113e:	463b      	mov	r3, r7
 8001140:	4619      	mov	r1, r3
 8001142:	4806      	ldr	r0, [pc, #24]	; (800115c <MX_ADC1_Init+0x9c>)
 8001144:	f000 ff0a 	bl	8001f5c <HAL_ADC_ConfigChannel>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800114e:	f000 fa01 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200041c0 	.word	0x200041c0
 8001160:	40012000 	.word	0x40012000

08001164 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08e      	sub	sp, #56	; 0x38
 8001168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800116a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001178:	f107 0320 	add.w	r3, r7, #32
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
 8001190:	615a      	str	r2, [r3, #20]
 8001192:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001194:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <MX_TIM2_Init+0xe0>)
 8001196:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800119a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50000;
 800119c:	4b29      	ldr	r3, [pc, #164]	; (8001244 <MX_TIM2_Init+0xe0>)
 800119e:	f24c 3250 	movw	r2, #50000	; 0xc350
 80011a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a4:	4b27      	ldr	r3, [pc, #156]	; (8001244 <MX_TIM2_Init+0xe0>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80011aa:	4b26      	ldr	r3, [pc, #152]	; (8001244 <MX_TIM2_Init+0xe0>)
 80011ac:	2264      	movs	r2, #100	; 0x64
 80011ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b0:	4b24      	ldr	r3, [pc, #144]	; (8001244 <MX_TIM2_Init+0xe0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b6:	4b23      	ldr	r3, [pc, #140]	; (8001244 <MX_TIM2_Init+0xe0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011bc:	4821      	ldr	r0, [pc, #132]	; (8001244 <MX_TIM2_Init+0xe0>)
 80011be:	f002 f8df 	bl	8003380 <HAL_TIM_Base_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80011c8:	f000 f9c4 	bl	8001554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011d6:	4619      	mov	r1, r3
 80011d8:	481a      	ldr	r0, [pc, #104]	; (8001244 <MX_TIM2_Init+0xe0>)
 80011da:	f002 fc19 	bl	8003a10 <HAL_TIM_ConfigClockSource>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80011e4:	f000 f9b6 	bl	8001554 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011e8:	4816      	ldr	r0, [pc, #88]	; (8001244 <MX_TIM2_Init+0xe0>)
 80011ea:	f002 f9f1 	bl	80035d0 <HAL_TIM_PWM_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80011f4:	f000 f9ae 	bl	8001554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011f8:	2320      	movs	r3, #32
 80011fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001200:	f107 0320 	add.w	r3, r7, #32
 8001204:	4619      	mov	r1, r3
 8001206:	480f      	ldr	r0, [pc, #60]	; (8001244 <MX_TIM2_Init+0xe0>)
 8001208:	f002 ffd8 	bl	80041bc <HAL_TIMEx_MasterConfigSynchronization>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001212:	f000 f99f 	bl	8001554 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001216:	2360      	movs	r3, #96	; 0x60
 8001218:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 8;
 800121a:	2308      	movs	r3, #8
 800121c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	2204      	movs	r2, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_TIM2_Init+0xe0>)
 800122e:	f002 fb31 	bl	8003894 <HAL_TIM_PWM_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001238:	f000 f98c 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	3738      	adds	r7, #56	; 0x38
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20004208 	.word	0x20004208

08001248 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800124c:	4b11      	ldr	r3, [pc, #68]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 800124e:	4a12      	ldr	r2, [pc, #72]	; (8001298 <MX_USART2_UART_Init+0x50>)
 8001250:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001252:	4b10      	ldr	r3, [pc, #64]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 8001254:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001258:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800126c:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 800126e:	220c      	movs	r2, #12
 8001270:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <MX_USART2_UART_Init+0x4c>)
 8001280:	f003 f82c 	bl	80042dc <HAL_UART_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800128a:	f000 f963 	bl	8001554 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20004250 	.word	0x20004250
 8001298:	40004400 	.word	0x40004400

0800129c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	4b20      	ldr	r3, [pc, #128]	; (8001338 <MX_GPIO_Init+0x9c>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a1f      	ldr	r2, [pc, #124]	; (8001338 <MX_GPIO_Init+0x9c>)
 80012bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <MX_GPIO_Init+0x9c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	4b19      	ldr	r3, [pc, #100]	; (8001338 <MX_GPIO_Init+0x9c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a18      	ldr	r2, [pc, #96]	; (8001338 <MX_GPIO_Init+0x9c>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <MX_GPIO_Init+0x9c>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	4b12      	ldr	r3, [pc, #72]	; (8001338 <MX_GPIO_Init+0x9c>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a11      	ldr	r2, [pc, #68]	; (8001338 <MX_GPIO_Init+0x9c>)
 80012f4:	f043 0308 	orr.w	r3, r3, #8
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <MX_GPIO_Init+0x9c>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0308 	and.w	r3, r3, #8
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001306:	2200      	movs	r2, #0
 8001308:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800130c:	480b      	ldr	r0, [pc, #44]	; (800133c <MX_GPIO_Init+0xa0>)
 800130e:	f001 fb5d 	bl	80029cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001316:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001318:	2301      	movs	r3, #1
 800131a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001320:	2300      	movs	r3, #0
 8001322:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001324:	f107 030c 	add.w	r3, r7, #12
 8001328:	4619      	mov	r1, r3
 800132a:	4804      	ldr	r0, [pc, #16]	; (800133c <MX_GPIO_Init+0xa0>)
 800132c:	f001 f9b2 	bl	8002694 <HAL_GPIO_Init>

}
 8001330:	bf00      	nop
 8001332:	3720      	adds	r7, #32
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40023800 	.word	0x40023800
 800133c:	40020c00 	.word	0x40020c00

08001340 <Data_Processing_Task>:
  // V25 = Voltage at 25°C, for STM32F407 = 0.76V
  // Avg_Slope = 2.5mV/°C
 */

void Data_Processing_Task (void* argument)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	int received = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	60bb      	str	r3, [r7, #8]
	uint32_t TickDelay = pdMS_TO_TICKS(100);
 800134c:	2364      	movs	r3, #100	; 0x64
 800134e:	60fb      	str	r3, [r7, #12]
	while (1)
	{
//		char str[100];
		if (xQueueReceive(SimpleQueue, &received, portMAX_DELAY) != pdTRUE)
 8001350:	4b4f      	ldr	r3, [pc, #316]	; (8001490 <Data_Processing_Task+0x150>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f107 0108 	add.w	r1, r7, #8
 8001358:	f04f 32ff 	mov.w	r2, #4294967295
 800135c:	4618      	mov	r0, r3
 800135e:	f003 fef9 	bl	8005154 <xQueueReceive>
 8001362:	4603      	mov	r3, r0
 8001364:	2b01      	cmp	r3, #1
 8001366:	d003      	beq.n	8001370 <Data_Processing_Task+0x30>
		{
//			HAL_UART_Transmit(&huart2, (uint8_t *)"Error in Receiving from Queue\n\n", 31, 1000);
			printf("Error in Receiving from Queue\n\n");
 8001368:	484a      	ldr	r0, [pc, #296]	; (8001494 <Data_Processing_Task+0x154>)
 800136a:	f006 f907 	bl	800757c <puts>
 800136e:	e00a      	b.n	8001386 <Data_Processing_Task+0x46>
		}
		else
		{
			sum = sum + received;
 8001370:	4b49      	ldr	r3, [pc, #292]	; (8001498 <Data_Processing_Task+0x158>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	4413      	add	r3, r2
 8001378:	4a47      	ldr	r2, [pc, #284]	; (8001498 <Data_Processing_Task+0x158>)
 800137a:	6013      	str	r3, [r2, #0]
			count++;
 800137c:	4b47      	ldr	r3, [pc, #284]	; (800149c <Data_Processing_Task+0x15c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	3301      	adds	r3, #1
 8001382:	4a46      	ldr	r2, [pc, #280]	; (800149c <Data_Processing_Task+0x15c>)
 8001384:	6013      	str	r3, [r2, #0]
		}
		if (count == 5)
 8001386:	4b45      	ldr	r3, [pc, #276]	; (800149c <Data_Processing_Task+0x15c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b05      	cmp	r3, #5
 800138c:	d174      	bne.n	8001478 <Data_Processing_Task+0x138>
		{
			sum = sum/5;
 800138e:	4b42      	ldr	r3, [pc, #264]	; (8001498 <Data_Processing_Task+0x158>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a43      	ldr	r2, [pc, #268]	; (80014a0 <Data_Processing_Task+0x160>)
 8001394:	fb82 1203 	smull	r1, r2, r2, r3
 8001398:	1052      	asrs	r2, r2, #1
 800139a:	17db      	asrs	r3, r3, #31
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	4a3e      	ldr	r2, [pc, #248]	; (8001498 <Data_Processing_Task+0x158>)
 80013a0:	6013      	str	r3, [r2, #0]
			sum *= 3300;
 80013a2:	4b3d      	ldr	r3, [pc, #244]	; (8001498 <Data_Processing_Task+0x158>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f640 42e4 	movw	r2, #3300	; 0xce4
 80013aa:	fb02 f303 	mul.w	r3, r2, r3
 80013ae:	4a3a      	ldr	r2, [pc, #232]	; (8001498 <Data_Processing_Task+0x158>)
 80013b0:	6013      	str	r3, [r2, #0]
			sum /= 0xfff; //Reading in mV (adc * 3300/4096)
 80013b2:	4b39      	ldr	r3, [pc, #228]	; (8001498 <Data_Processing_Task+0x158>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a3b      	ldr	r2, [pc, #236]	; (80014a4 <Data_Processing_Task+0x164>)
 80013b8:	fb82 1203 	smull	r1, r2, r2, r3
 80013bc:	441a      	add	r2, r3
 80013be:	12d2      	asrs	r2, r2, #11
 80013c0:	17db      	asrs	r3, r3, #31
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	4a34      	ldr	r2, [pc, #208]	; (8001498 <Data_Processing_Task+0x158>)
 80013c6:	6013      	str	r3, [r2, #0]
			sum /= 1000.0; //Reading in Volts
 80013c8:	4b33      	ldr	r3, [pc, #204]	; (8001498 <Data_Processing_Task+0x158>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f8a9 	bl	8000524 <__aeabi_i2d>
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	4b34      	ldr	r3, [pc, #208]	; (80014a8 <Data_Processing_Task+0x168>)
 80013d8:	f7ff fa38 	bl	800084c <__aeabi_ddiv>
 80013dc:	4602      	mov	r2, r0
 80013de:	460b      	mov	r3, r1
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	f7ff fbb8 	bl	8000b58 <__aeabi_d2iz>
 80013e8:	4603      	mov	r3, r0
 80013ea:	4a2b      	ldr	r2, [pc, #172]	; (8001498 <Data_Processing_Task+0x158>)
 80013ec:	6013      	str	r3, [r2, #0]
			sum -= 0.760; // Subtract the reference voltage at 25°C
 80013ee:	4b2a      	ldr	r3, [pc, #168]	; (8001498 <Data_Processing_Task+0x158>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f896 	bl	8000524 <__aeabi_i2d>
 80013f8:	a321      	add	r3, pc, #132	; (adr r3, 8001480 <Data_Processing_Task+0x140>)
 80013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fe:	f7fe ff43 	bl	8000288 <__aeabi_dsub>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	f7ff fba5 	bl	8000b58 <__aeabi_d2iz>
 800140e:	4603      	mov	r3, r0
 8001410:	4a21      	ldr	r2, [pc, #132]	; (8001498 <Data_Processing_Task+0x158>)
 8001412:	6013      	str	r3, [r2, #0]
			sum /= .0025; // Divide by slope 2.5mV
 8001414:	4b20      	ldr	r3, [pc, #128]	; (8001498 <Data_Processing_Task+0x158>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f883 	bl	8000524 <__aeabi_i2d>
 800141e:	a31a      	add	r3, pc, #104	; (adr r3, 8001488 <Data_Processing_Task+0x148>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7ff fa12 	bl	800084c <__aeabi_ddiv>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	f7ff fb92 	bl	8000b58 <__aeabi_d2iz>
 8001434:	4603      	mov	r3, r0
 8001436:	4a18      	ldr	r2, [pc, #96]	; (8001498 <Data_Processing_Task+0x158>)
 8001438:	6013      	str	r3, [r2, #0]
			sum += 25.0; // Add the 25°C
 800143a:	4b17      	ldr	r3, [pc, #92]	; (8001498 <Data_Processing_Task+0x158>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f870 	bl	8000524 <__aeabi_i2d>
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <Data_Processing_Task+0x16c>)
 800144a:	f7fe ff1f 	bl	800028c <__adddf3>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	f7ff fb7f 	bl	8000b58 <__aeabi_d2iz>
 800145a:	4603      	mov	r3, r0
 800145c:	4a0e      	ldr	r2, [pc, #56]	; (8001498 <Data_Processing_Task+0x158>)
 800145e:	6013      	str	r3, [r2, #0]
			printf("Temperature value: %d\n\n", sum);
 8001460:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <Data_Processing_Task+0x158>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4619      	mov	r1, r3
 8001466:	4812      	ldr	r0, [pc, #72]	; (80014b0 <Data_Processing_Task+0x170>)
 8001468:	f006 f802 	bl	8007470 <iprintf>
			count = 0;
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <Data_Processing_Task+0x15c>)
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]
			sum = 0;
 8001472:	4b09      	ldr	r3, [pc, #36]	; (8001498 <Data_Processing_Task+0x158>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
		}
//		sprintf(str, "ADC value: %d \n",sum);
//		HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);

		vTaskDelay(TickDelay);
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f004 f9d7 	bl	800582c <vTaskDelay>
		if (xQueueReceive(SimpleQueue, &received, portMAX_DELAY) != pdTRUE)
 800147e:	e767      	b.n	8001350 <Data_Processing_Task+0x10>
 8001480:	851eb852 	.word	0x851eb852
 8001484:	3fe851eb 	.word	0x3fe851eb
 8001488:	47ae147b 	.word	0x47ae147b
 800148c:	3f647ae1 	.word	0x3f647ae1
 8001490:	200041bc 	.word	0x200041bc
 8001494:	080096a0 	.word	0x080096a0
 8001498:	20000450 	.word	0x20000450
 800149c:	20000454 	.word	0x20000454
 80014a0:	66666667 	.word	0x66666667
 80014a4:	80080081 	.word	0x80080081
 80014a8:	408f4000 	.word	0x408f4000
 80014ac:	40390000 	.word	0x40390000
 80014b0:	080096c0 	.word	0x080096c0

080014b4 <HAL_ADC_ConvCpltCallback>:
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b09c      	sub	sp, #112	; 0x70
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	char str[100];
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */

  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80014c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014c4:	4814      	ldr	r0, [pc, #80]	; (8001518 <HAL_ADC_ConvCpltCallback+0x64>)
 80014c6:	f001 fa9a 	bl	80029fe <HAL_GPIO_TogglePin>
  adcValue = HAL_ADC_GetValue(&hadc1);
 80014ca:	4814      	ldr	r0, [pc, #80]	; (800151c <HAL_ADC_ConvCpltCallback+0x68>)
 80014cc:	f000 fd25 	bl	8001f1a <HAL_ADC_GetValue>
 80014d0:	4603      	mov	r3, r0
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_ADC_ConvCpltCallback+0x6c>)
 80014d6:	801a      	strh	r2, [r3, #0]

  if (xQueueSendToFrontFromISR(SimpleQueue, &adcValue, &xHigherPriorityTaskWoken) == pdPASS)
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <HAL_ADC_ConvCpltCallback+0x70>)
 80014da:	6818      	ldr	r0, [r3, #0]
 80014dc:	f107 0208 	add.w	r2, r7, #8
 80014e0:	2301      	movs	r3, #1
 80014e2:	490f      	ldr	r1, [pc, #60]	; (8001520 <HAL_ADC_ConvCpltCallback+0x6c>)
 80014e4:	f003 fd9b 	bl	800501e <xQueueGenericSendFromISR>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d105      	bne.n	80014fa <HAL_ADC_ConvCpltCallback+0x46>
  {
//			sprintf(str, "Successfully sent number %d to the queue\n\n", adcValue);
//			HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen (str), HAL_MAX_DELAY);
	printf("Successfully sent number %d to the queue\n\n", adcValue);
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <HAL_ADC_ConvCpltCallback+0x6c>)
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	4619      	mov	r1, r3
 80014f4:	480c      	ldr	r0, [pc, #48]	; (8001528 <HAL_ADC_ConvCpltCallback+0x74>)
 80014f6:	f005 ffbb 	bl	8007470 <iprintf>
  }
// Did sending to the queue unblock a higher priority task?
  portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d007      	beq.n	8001510 <HAL_ADC_ConvCpltCallback+0x5c>
 8001500:	4b0a      	ldr	r3, [pc, #40]	; (800152c <HAL_ADC_ConvCpltCallback+0x78>)
 8001502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	f3bf 8f4f 	dsb	sy
 800150c:	f3bf 8f6f 	isb	sy

}
 8001510:	bf00      	nop
 8001512:	3770      	adds	r7, #112	; 0x70
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40020c00 	.word	0x40020c00
 800151c:	200041c0 	.word	0x200041c0
 8001520:	20004294 	.word	0x20004294
 8001524:	200041bc 	.word	0x200041bc
 8001528:	080096d8 	.word	0x080096d8
 800152c:	e000ed04 	.word	0xe000ed04

08001530 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a04      	ldr	r2, [pc, #16]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d101      	bne.n	8001546 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001542:	f000 fa67 	bl	8001a14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40001000 	.word	0x40001000

08001554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001558:	b672      	cpsid	i
}
 800155a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800155c:	e7fe      	b.n	800155c <Error_Handler+0x8>
	...

08001560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_MspInit+0x54>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	4a11      	ldr	r2, [pc, #68]	; (80015b4 <HAL_MspInit+0x54>)
 8001570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001574:	6453      	str	r3, [r2, #68]	; 0x44
 8001576:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <HAL_MspInit+0x54>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	603b      	str	r3, [r7, #0]
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <HAL_MspInit+0x54>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <HAL_MspInit+0x54>)
 800158c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001590:	6413      	str	r3, [r2, #64]	; 0x40
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <HAL_MspInit+0x54>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	210f      	movs	r1, #15
 80015a2:	f06f 0001 	mvn.w	r0, #1
 80015a6:	f000 ffb9 	bl	800251c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800

080015b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <HAL_ADC_MspInit+0x48>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d115      	bne.n	80015f6 <HAL_ADC_MspInit+0x3e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <HAL_ADC_MspInit+0x4c>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	4a0c      	ldr	r2, [pc, #48]	; (8001604 <HAL_ADC_MspInit+0x4c>)
 80015d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d8:	6453      	str	r3, [r2, #68]	; 0x44
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <HAL_ADC_MspInit+0x4c>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2105      	movs	r1, #5
 80015ea:	2012      	movs	r0, #18
 80015ec:	f000 ff96 	bl	800251c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80015f0:	2012      	movs	r0, #18
 80015f2:	f000 ffaf 	bl	8002554 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015f6:	bf00      	nop
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40012000 	.word	0x40012000
 8001604:	40023800 	.word	0x40023800

08001608 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001618:	d10d      	bne.n	8001636 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <HAL_TIM_Base_MspInit+0x3c>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	4a08      	ldr	r2, [pc, #32]	; (8001644 <HAL_TIM_Base_MspInit+0x3c>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6413      	str	r3, [r2, #64]	; 0x40
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_TIM_Base_MspInit+0x3c>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f003 0301 	and.w	r3, r3, #1
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001636:	bf00      	nop
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800

08001648 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a1d      	ldr	r2, [pc, #116]	; (80016dc <HAL_UART_MspInit+0x94>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d133      	bne.n	80016d2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <HAL_UART_MspInit+0x98>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	4a1b      	ldr	r2, [pc, #108]	; (80016e0 <HAL_UART_MspInit+0x98>)
 8001674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001678:	6413      	str	r3, [r2, #64]	; 0x40
 800167a:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <HAL_UART_MspInit+0x98>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <HAL_UART_MspInit+0x98>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <HAL_UART_MspInit+0x98>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_UART_MspInit+0x98>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016a2:	230c      	movs	r3, #12
 80016a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016b2:	2307      	movs	r3, #7
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	4809      	ldr	r0, [pc, #36]	; (80016e4 <HAL_UART_MspInit+0x9c>)
 80016be:	f000 ffe9 	bl	8002694 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2105      	movs	r1, #5
 80016c6:	2026      	movs	r0, #38	; 0x26
 80016c8:	f000 ff28 	bl	800251c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016cc:	2026      	movs	r0, #38	; 0x26
 80016ce:	f000 ff41 	bl	8002554 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016d2:	bf00      	nop
 80016d4:	3728      	adds	r7, #40	; 0x28
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40004400 	.word	0x40004400
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40020000 	.word	0x40020000

080016e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08c      	sub	sp, #48	; 0x30
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	2036      	movs	r0, #54	; 0x36
 80016fe:	f000 ff0d 	bl	800251c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001702:	2036      	movs	r0, #54	; 0x36
 8001704:	f000 ff26 	bl	8002554 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001708:	2300      	movs	r3, #0
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	4b1f      	ldr	r3, [pc, #124]	; (800178c <HAL_InitTick+0xa4>)
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	4a1e      	ldr	r2, [pc, #120]	; (800178c <HAL_InitTick+0xa4>)
 8001712:	f043 0310 	orr.w	r3, r3, #16
 8001716:	6413      	str	r3, [r2, #64]	; 0x40
 8001718:	4b1c      	ldr	r3, [pc, #112]	; (800178c <HAL_InitTick+0xa4>)
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	f003 0310 	and.w	r3, r3, #16
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001724:	f107 0210 	add.w	r2, r7, #16
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f001 fdf4 	bl	800331c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001734:	f001 fdca 	bl	80032cc <HAL_RCC_GetPCLK1Freq>
 8001738:	4603      	mov	r3, r0
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800173e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001740:	4a13      	ldr	r2, [pc, #76]	; (8001790 <HAL_InitTick+0xa8>)
 8001742:	fba2 2303 	umull	r2, r3, r2, r3
 8001746:	0c9b      	lsrs	r3, r3, #18
 8001748:	3b01      	subs	r3, #1
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <HAL_InitTick+0xac>)
 800174e:	4a12      	ldr	r2, [pc, #72]	; (8001798 <HAL_InitTick+0xb0>)
 8001750:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <HAL_InitTick+0xac>)
 8001754:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001758:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800175a:	4a0e      	ldr	r2, [pc, #56]	; (8001794 <HAL_InitTick+0xac>)
 800175c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800175e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <HAL_InitTick+0xac>)
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001766:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <HAL_InitTick+0xac>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800176c:	4809      	ldr	r0, [pc, #36]	; (8001794 <HAL_InitTick+0xac>)
 800176e:	f001 fe07 	bl	8003380 <HAL_TIM_Base_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d104      	bne.n	8001782 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001778:	4806      	ldr	r0, [pc, #24]	; (8001794 <HAL_InitTick+0xac>)
 800177a:	f001 feb9 	bl	80034f0 <HAL_TIM_Base_Start_IT>
 800177e:	4603      	mov	r3, r0
 8001780:	e000      	b.n	8001784 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
}
 8001784:	4618      	mov	r0, r3
 8001786:	3730      	adds	r7, #48	; 0x30
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40023800 	.word	0x40023800
 8001790:	431bde83 	.word	0x431bde83
 8001794:	2000429c 	.word	0x2000429c
 8001798:	40001000 	.word	0x40001000

0800179c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <NMI_Handler+0x4>

080017a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <HardFault_Handler+0x4>

080017a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <MemManage_Handler+0x4>

080017ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <BusFault_Handler+0x4>

080017b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <UsageFault_Handler+0x4>

080017ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80017cc:	4802      	ldr	r0, [pc, #8]	; (80017d8 <ADC_IRQHandler+0x10>)
 80017ce:	f000 fa63 	bl	8001c98 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200041c0 	.word	0x200041c0

080017dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <USART2_IRQHandler+0x10>)
 80017e2:	f002 fdc9 	bl	8004378 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20004250 	.word	0x20004250

080017f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80017f4:	4802      	ldr	r0, [pc, #8]	; (8001800 <TIM6_DAC_IRQHandler+0x10>)
 80017f6:	f001 ff44 	bl	8003682 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	2000429c 	.word	0x2000429c

08001804 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
	return 1;
 8001808:	2301      	movs	r3, #1
}
 800180a:	4618      	mov	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <_kill>:

int _kill(int pid, int sig)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800181e:	f005 f97d 	bl	8006b1c <__errno>
 8001822:	4603      	mov	r3, r0
 8001824:	2216      	movs	r2, #22
 8001826:	601a      	str	r2, [r3, #0]
	return -1;
 8001828:	f04f 33ff 	mov.w	r3, #4294967295
}
 800182c:	4618      	mov	r0, r3
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <_exit>:

void _exit (int status)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800183c:	f04f 31ff 	mov.w	r1, #4294967295
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ffe7 	bl	8001814 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001846:	e7fe      	b.n	8001846 <_exit+0x12>

08001848 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	e00a      	b.n	8001870 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800185a:	f3af 8000 	nop.w
 800185e:	4601      	mov	r1, r0
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	1c5a      	adds	r2, r3, #1
 8001864:	60ba      	str	r2, [r7, #8]
 8001866:	b2ca      	uxtb	r2, r1
 8001868:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3301      	adds	r3, #1
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	429a      	cmp	r2, r3
 8001876:	dbf0      	blt.n	800185a <_read+0x12>
	}

return len;
 8001878:	687b      	ldr	r3, [r7, #4]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
	return -1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018aa:	605a      	str	r2, [r3, #4]
	return 0;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <_isatty>:

int _isatty(int file)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
	return 1;
 80018c2:	2301      	movs	r3, #1
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
	return 0;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3714      	adds	r7, #20
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f4:	4a14      	ldr	r2, [pc, #80]	; (8001948 <_sbrk+0x5c>)
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <_sbrk+0x60>)
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001900:	4b13      	ldr	r3, [pc, #76]	; (8001950 <_sbrk+0x64>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d102      	bne.n	800190e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <_sbrk+0x64>)
 800190a:	4a12      	ldr	r2, [pc, #72]	; (8001954 <_sbrk+0x68>)
 800190c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	429a      	cmp	r2, r3
 800191a:	d207      	bcs.n	800192c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800191c:	f005 f8fe 	bl	8006b1c <__errno>
 8001920:	4603      	mov	r3, r0
 8001922:	220c      	movs	r2, #12
 8001924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
 800192a:	e009      	b.n	8001940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	4a05      	ldr	r2, [pc, #20]	; (8001950 <_sbrk+0x64>)
 800193c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20020000 	.word	0x20020000
 800194c:	00004000 	.word	0x00004000
 8001950:	20000458 	.word	0x20000458
 8001954:	200042f8 	.word	0x200042f8

08001958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <SystemInit+0x20>)
 800195e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001962:	4a05      	ldr	r2, [pc, #20]	; (8001978 <SystemInit+0x20>)
 8001964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800197c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001980:	480d      	ldr	r0, [pc, #52]	; (80019b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001982:	490e      	ldr	r1, [pc, #56]	; (80019bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001984:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001988:	e002      	b.n	8001990 <LoopCopyDataInit>

0800198a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800198c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198e:	3304      	adds	r3, #4

08001990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001994:	d3f9      	bcc.n	800198a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001996:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001998:	4c0b      	ldr	r4, [pc, #44]	; (80019c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800199c:	e001      	b.n	80019a2 <LoopFillZerobss>

0800199e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a0:	3204      	adds	r2, #4

080019a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a4:	d3fb      	bcc.n	800199e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019a6:	f7ff ffd7 	bl	8001958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019aa:	f005 f8bd 	bl	8006b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ae:	f7ff fad7 	bl	8000f60 <main>
  bx  lr    
 80019b2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019bc:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80019c0:	08009b14 	.word	0x08009b14
  ldr r2, =_sbss
 80019c4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80019c8:	200042f8 	.word	0x200042f8

080019cc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019cc:	e7fe      	b.n	80019cc <CAN1_RX0_IRQHandler>
	...

080019d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019d4:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <HAL_Init+0x40>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0d      	ldr	r2, [pc, #52]	; (8001a10 <HAL_Init+0x40>)
 80019da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e0:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <HAL_Init+0x40>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <HAL_Init+0x40>)
 80019e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ec:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <HAL_Init+0x40>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a07      	ldr	r2, [pc, #28]	; (8001a10 <HAL_Init+0x40>)
 80019f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f8:	2003      	movs	r0, #3
 80019fa:	f000 fd84 	bl	8002506 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019fe:	2000      	movs	r0, #0
 8001a00:	f7ff fe72 	bl	80016e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a04:	f7ff fdac 	bl	8001560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023c00 	.word	0x40023c00

08001a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_IncTick+0x20>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_IncTick+0x24>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4413      	add	r3, r2
 8001a24:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <HAL_IncTick+0x24>)
 8001a26:	6013      	str	r3, [r2, #0]
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000008 	.word	0x20000008
 8001a38:	200042e4 	.word	0x200042e4

08001a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a40:	4b03      	ldr	r3, [pc, #12]	; (8001a50 <HAL_GetTick+0x14>)
 8001a42:	681b      	ldr	r3, [r3, #0]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	200042e4 	.word	0x200042e4

08001a54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b084      	sub	sp, #16
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e033      	b.n	8001ad2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d109      	bne.n	8001a86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff fda0 	bl	80015b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f003 0310 	and.w	r3, r3, #16
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d118      	bne.n	8001ac4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a9a:	f023 0302 	bic.w	r3, r3, #2
 8001a9e:	f043 0202 	orr.w	r2, r3, #2
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 fb7a 	bl	80021a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab6:	f023 0303 	bic.w	r3, r3, #3
 8001aba:	f043 0201 	orr.w	r2, r3, #1
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ac2:	e001      	b.n	8001ac8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d101      	bne.n	8001af6 <HAL_ADC_Start_IT+0x1a>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e0bd      	b.n	8001c72 <HAL_ADC_Start_IT+0x196>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d018      	beq.n	8001b3e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0201 	orr.w	r2, r2, #1
 8001b1a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b1c:	4b58      	ldr	r3, [pc, #352]	; (8001c80 <HAL_ADC_Start_IT+0x1a4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a58      	ldr	r2, [pc, #352]	; (8001c84 <HAL_ADC_Start_IT+0x1a8>)
 8001b22:	fba2 2303 	umull	r2, r3, r2, r3
 8001b26:	0c9a      	lsrs	r2, r3, #18
 8001b28:	4613      	mov	r3, r2
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b30:	e002      	b.n	8001b38 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f9      	bne.n	8001b32 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	f040 8085 	bne.w	8001c58 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b56:	f023 0301 	bic.w	r3, r3, #1
 8001b5a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d007      	beq.n	8001b80 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b78:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b8c:	d106      	bne.n	8001b9c <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	f023 0206 	bic.w	r2, r3, #6
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	645a      	str	r2, [r3, #68]	; 0x44
 8001b9a:	e002      	b.n	8001ba2 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001baa:	4b37      	ldr	r3, [pc, #220]	; (8001c88 <HAL_ADC_Start_IT+0x1ac>)
 8001bac:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001bb6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001bc6:	f043 0320 	orr.w	r3, r3, #32
 8001bca:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 031f 	and.w	r3, r3, #31
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d12a      	bne.n	8001c2e <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a2b      	ldr	r2, [pc, #172]	; (8001c8c <HAL_ADC_Start_IT+0x1b0>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d015      	beq.n	8001c0e <HAL_ADC_Start_IT+0x132>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a2a      	ldr	r2, [pc, #168]	; (8001c90 <HAL_ADC_Start_IT+0x1b4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d105      	bne.n	8001bf8 <HAL_ADC_Start_IT+0x11c>
 8001bec:	4b26      	ldr	r3, [pc, #152]	; (8001c88 <HAL_ADC_Start_IT+0x1ac>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 031f 	and.w	r3, r3, #31
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00a      	beq.n	8001c0e <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a25      	ldr	r2, [pc, #148]	; (8001c94 <HAL_ADC_Start_IT+0x1b8>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d136      	bne.n	8001c70 <HAL_ADC_Start_IT+0x194>
 8001c02:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <HAL_ADC_Start_IT+0x1ac>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0310 	and.w	r3, r3, #16
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d130      	bne.n	8001c70 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d129      	bne.n	8001c70 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	e020      	b.n	8001c70 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a16      	ldr	r2, [pc, #88]	; (8001c8c <HAL_ADC_Start_IT+0x1b0>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d11b      	bne.n	8001c70 <HAL_ADC_Start_IT+0x194>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d114      	bne.n	8001c70 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c54:	609a      	str	r2, [r3, #8]
 8001c56:	e00b      	b.n	8001c70 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	f043 0210 	orr.w	r2, r3, #16
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c68:	f043 0201 	orr.w	r2, r3, #1
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000000 	.word	0x20000000
 8001c84:	431bde83 	.word	0x431bde83
 8001c88:	40012300 	.word	0x40012300
 8001c8c:	40012000 	.word	0x40012000
 8001c90:	40012100 	.word	0x40012100
 8001c94:	40012200 	.word	0x40012200

08001c98 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	bf0c      	ite	eq
 8001cb6:	2301      	moveq	r3, #1
 8001cb8:	2300      	movne	r3, #0
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0320 	and.w	r3, r3, #32
 8001cc8:	2b20      	cmp	r3, #32
 8001cca:	bf0c      	ite	eq
 8001ccc:	2301      	moveq	r3, #1
 8001cce:	2300      	movne	r3, #0
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d049      	beq.n	8001d6e <HAL_ADC_IRQHandler+0xd6>
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d046      	beq.n	8001d6e <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	f003 0310 	and.w	r3, r3, #16
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d105      	bne.n	8001cf8 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d12b      	bne.n	8001d5e <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d127      	bne.n	8001d5e <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d006      	beq.n	8001d2a <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d119      	bne.n	8001d5e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0220 	bic.w	r2, r2, #32
 8001d38:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d105      	bne.n	8001d5e <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f043 0201 	orr.w	r2, r3, #1
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff fba8 	bl	80014b4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0212 	mvn.w	r2, #18
 8001d6c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b04      	cmp	r3, #4
 8001d7a:	bf0c      	ite	eq
 8001d7c:	2301      	moveq	r3, #1
 8001d7e:	2300      	movne	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8e:	2b80      	cmp	r3, #128	; 0x80
 8001d90:	bf0c      	ite	eq
 8001d92:	2301      	moveq	r3, #1
 8001d94:	2300      	movne	r3, #0
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d057      	beq.n	8001e50 <HAL_ADC_IRQHandler+0x1b8>
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d054      	beq.n	8001e50 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d105      	bne.n	8001dbe <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d139      	bne.n	8001e40 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d006      	beq.n	8001de8 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d12b      	bne.n	8001e40 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d124      	bne.n	8001e40 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d11d      	bne.n	8001e40 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d119      	bne.n	8001e40 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e1a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d105      	bne.n	8001e40 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	f043 0201 	orr.w	r2, r3, #1
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 faa9 	bl	8002398 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f06f 020c 	mvn.w	r2, #12
 8001e4e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	bf0c      	ite	eq
 8001e5e:	2301      	moveq	r3, #1
 8001e60:	2300      	movne	r3, #0
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e70:	2b40      	cmp	r3, #64	; 0x40
 8001e72:	bf0c      	ite	eq
 8001e74:	2301      	moveq	r3, #1
 8001e76:	2300      	movne	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d017      	beq.n	8001eb2 <HAL_ADC_IRQHandler+0x21a>
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d014      	beq.n	8001eb2 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d10d      	bne.n	8001eb2 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f846 	bl	8001f34 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f06f 0201 	mvn.w	r2, #1
 8001eb0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0320 	and.w	r3, r3, #32
 8001ebc:	2b20      	cmp	r3, #32
 8001ebe:	bf0c      	ite	eq
 8001ec0:	2301      	moveq	r3, #1
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ed2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ed6:	bf0c      	ite	eq
 8001ed8:	2301      	moveq	r3, #1
 8001eda:	2300      	movne	r3, #0
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d015      	beq.n	8001f12 <HAL_ADC_IRQHandler+0x27a>
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d012      	beq.n	8001f12 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef0:	f043 0202 	orr.w	r2, r3, #2
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0220 	mvn.w	r2, #32
 8001f00:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f820 	bl	8001f48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0220 	mvn.w	r2, #32
 8001f10:	601a      	str	r2, [r3, #0]
  }
}
 8001f12:	bf00      	nop
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d101      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x1c>
 8001f74:	2302      	movs	r3, #2
 8001f76:	e105      	b.n	8002184 <HAL_ADC_ConfigChannel+0x228>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b09      	cmp	r3, #9
 8001f86:	d925      	bls.n	8001fd4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68d9      	ldr	r1, [r3, #12]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	461a      	mov	r2, r3
 8001f96:	4613      	mov	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3b1e      	subs	r3, #30
 8001f9e:	2207      	movs	r2, #7
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43da      	mvns	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	400a      	ands	r2, r1
 8001fac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68d9      	ldr	r1, [r3, #12]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4403      	add	r3, r0
 8001fc6:	3b1e      	subs	r3, #30
 8001fc8:	409a      	lsls	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	60da      	str	r2, [r3, #12]
 8001fd2:	e022      	b.n	800201a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6919      	ldr	r1, [r3, #16]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	4413      	add	r3, r2
 8001fe8:	2207      	movs	r2, #7
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6919      	ldr	r1, [r3, #16]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	b29b      	uxth	r3, r3
 8002008:	4618      	mov	r0, r3
 800200a:	4603      	mov	r3, r0
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4403      	add	r3, r0
 8002010:	409a      	lsls	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b06      	cmp	r3, #6
 8002020:	d824      	bhi.n	800206c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	3b05      	subs	r3, #5
 8002034:	221f      	movs	r2, #31
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43da      	mvns	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	400a      	ands	r2, r1
 8002042:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	b29b      	uxth	r3, r3
 8002050:	4618      	mov	r0, r3
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	3b05      	subs	r3, #5
 800205e:	fa00 f203 	lsl.w	r2, r0, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	635a      	str	r2, [r3, #52]	; 0x34
 800206a:	e04c      	b.n	8002106 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b0c      	cmp	r3, #12
 8002072:	d824      	bhi.n	80020be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685a      	ldr	r2, [r3, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	3b23      	subs	r3, #35	; 0x23
 8002086:	221f      	movs	r2, #31
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43da      	mvns	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	400a      	ands	r2, r1
 8002094:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	4618      	mov	r0, r3
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	3b23      	subs	r3, #35	; 0x23
 80020b0:	fa00 f203 	lsl.w	r2, r0, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	631a      	str	r2, [r3, #48]	; 0x30
 80020bc:	e023      	b.n	8002106 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	3b41      	subs	r3, #65	; 0x41
 80020d0:	221f      	movs	r2, #31
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43da      	mvns	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	400a      	ands	r2, r1
 80020de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	4618      	mov	r0, r3
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	3b41      	subs	r3, #65	; 0x41
 80020fa:	fa00 f203 	lsl.w	r2, r0, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002106:	4b22      	ldr	r3, [pc, #136]	; (8002190 <HAL_ADC_ConfigChannel+0x234>)
 8002108:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a21      	ldr	r2, [pc, #132]	; (8002194 <HAL_ADC_ConfigChannel+0x238>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d109      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x1cc>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b12      	cmp	r3, #18
 800211a:	d105      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a19      	ldr	r2, [pc, #100]	; (8002194 <HAL_ADC_ConfigChannel+0x238>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d123      	bne.n	800217a <HAL_ADC_ConfigChannel+0x21e>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b10      	cmp	r3, #16
 8002138:	d003      	beq.n	8002142 <HAL_ADC_ConfigChannel+0x1e6>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2b11      	cmp	r3, #17
 8002140:	d11b      	bne.n	800217a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b10      	cmp	r3, #16
 8002154:	d111      	bne.n	800217a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002156:	4b10      	ldr	r3, [pc, #64]	; (8002198 <HAL_ADC_ConfigChannel+0x23c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a10      	ldr	r2, [pc, #64]	; (800219c <HAL_ADC_ConfigChannel+0x240>)
 800215c:	fba2 2303 	umull	r2, r3, r2, r3
 8002160:	0c9a      	lsrs	r2, r3, #18
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800216c:	e002      	b.n	8002174 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	3b01      	subs	r3, #1
 8002172:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1f9      	bne.n	800216e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	40012300 	.word	0x40012300
 8002194:	40012000 	.word	0x40012000
 8002198:	20000000 	.word	0x20000000
 800219c:	431bde83 	.word	0x431bde83

080021a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021a8:	4b79      	ldr	r3, [pc, #484]	; (8002390 <ADC_Init+0x1f0>)
 80021aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	431a      	orrs	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	6859      	ldr	r1, [r3, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	021a      	lsls	r2, r3, #8
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6859      	ldr	r1, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800221a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6899      	ldr	r1, [r3, #8]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002232:	4a58      	ldr	r2, [pc, #352]	; (8002394 <ADC_Init+0x1f4>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d022      	beq.n	800227e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002246:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6899      	ldr	r1, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002268:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6899      	ldr	r1, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	e00f      	b.n	800229e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800228c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800229c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0202 	bic.w	r2, r2, #2
 80022ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6899      	ldr	r1, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	7e1b      	ldrb	r3, [r3, #24]
 80022b8:	005a      	lsls	r2, r3, #1
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d01b      	beq.n	8002304 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6859      	ldr	r1, [r3, #4]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f6:	3b01      	subs	r3, #1
 80022f8:	035a      	lsls	r2, r3, #13
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	e007      	b.n	8002314 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002312:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002322:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	3b01      	subs	r3, #1
 8002330:	051a      	lsls	r2, r3, #20
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002348:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6899      	ldr	r1, [r3, #8]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002356:	025a      	lsls	r2, r3, #9
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800236e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6899      	ldr	r1, [r3, #8]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	029a      	lsls	r2, r3, #10
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	430a      	orrs	r2, r1
 8002382:	609a      	str	r2, [r3, #8]
}
 8002384:	bf00      	nop
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	40012300 	.word	0x40012300
 8002394:	0f000001 	.word	0x0f000001

08002398 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <__NVIC_SetPriorityGrouping+0x44>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c8:	4013      	ands	r3, r2
 80023ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023de:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <__NVIC_SetPriorityGrouping+0x44>)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	60d3      	str	r3, [r2, #12]
}
 80023e4:	bf00      	nop
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <__NVIC_GetPriorityGrouping+0x18>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	0a1b      	lsrs	r3, r3, #8
 80023fe:	f003 0307 	and.w	r3, r3, #7
}
 8002402:	4618      	mov	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	2b00      	cmp	r3, #0
 8002420:	db0b      	blt.n	800243a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	f003 021f 	and.w	r2, r3, #31
 8002428:	4907      	ldr	r1, [pc, #28]	; (8002448 <__NVIC_EnableIRQ+0x38>)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	2001      	movs	r0, #1
 8002432:	fa00 f202 	lsl.w	r2, r0, r2
 8002436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000e100 	.word	0xe000e100

0800244c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	6039      	str	r1, [r7, #0]
 8002456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245c:	2b00      	cmp	r3, #0
 800245e:	db0a      	blt.n	8002476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	b2da      	uxtb	r2, r3
 8002464:	490c      	ldr	r1, [pc, #48]	; (8002498 <__NVIC_SetPriority+0x4c>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	0112      	lsls	r2, r2, #4
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	440b      	add	r3, r1
 8002470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002474:	e00a      	b.n	800248c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	b2da      	uxtb	r2, r3
 800247a:	4908      	ldr	r1, [pc, #32]	; (800249c <__NVIC_SetPriority+0x50>)
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	3b04      	subs	r3, #4
 8002484:	0112      	lsls	r2, r2, #4
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	440b      	add	r3, r1
 800248a:	761a      	strb	r2, [r3, #24]
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	e000e100 	.word	0xe000e100
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	; 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f1c3 0307 	rsb	r3, r3, #7
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	bf28      	it	cs
 80024be:	2304      	movcs	r3, #4
 80024c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3304      	adds	r3, #4
 80024c6:	2b06      	cmp	r3, #6
 80024c8:	d902      	bls.n	80024d0 <NVIC_EncodePriority+0x30>
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3b03      	subs	r3, #3
 80024ce:	e000      	b.n	80024d2 <NVIC_EncodePriority+0x32>
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d4:	f04f 32ff 	mov.w	r2, #4294967295
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43da      	mvns	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	401a      	ands	r2, r3
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e8:	f04f 31ff 	mov.w	r1, #4294967295
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	fa01 f303 	lsl.w	r3, r1, r3
 80024f2:	43d9      	mvns	r1, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f8:	4313      	orrs	r3, r2
         );
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3724      	adds	r7, #36	; 0x24
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff ff4c 	bl	80023ac <__NVIC_SetPriorityGrouping>
}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
 8002528:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800252e:	f7ff ff61 	bl	80023f4 <__NVIC_GetPriorityGrouping>
 8002532:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	68b9      	ldr	r1, [r7, #8]
 8002538:	6978      	ldr	r0, [r7, #20]
 800253a:	f7ff ffb1 	bl	80024a0 <NVIC_EncodePriority>
 800253e:	4602      	mov	r2, r0
 8002540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002544:	4611      	mov	r1, r2
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff ff80 	bl	800244c <__NVIC_SetPriority>
}
 800254c:	bf00      	nop
 800254e:	3718      	adds	r7, #24
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff ff54 	bl	8002410 <__NVIC_EnableIRQ>
}
 8002568:	bf00      	nop
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800257e:	f7ff fa5d 	bl	8001a3c <HAL_GetTick>
 8002582:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d008      	beq.n	80025a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2280      	movs	r2, #128	; 0x80
 8002594:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e052      	b.n	8002648 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 0216 	bic.w	r2, r2, #22
 80025b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	695a      	ldr	r2, [r3, #20]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d103      	bne.n	80025d2 <HAL_DMA_Abort+0x62>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d007      	beq.n	80025e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0208 	bic.w	r2, r2, #8
 80025e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0201 	bic.w	r2, r2, #1
 80025f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025f2:	e013      	b.n	800261c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025f4:	f7ff fa22 	bl	8001a3c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b05      	cmp	r3, #5
 8002600:	d90c      	bls.n	800261c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2220      	movs	r2, #32
 8002606:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2203      	movs	r2, #3
 8002614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e015      	b.n	8002648 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1e4      	bne.n	80025f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262e:	223f      	movs	r2, #63	; 0x3f
 8002630:	409a      	lsls	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d004      	beq.n	800266e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2280      	movs	r2, #128	; 0x80
 8002668:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e00c      	b.n	8002688 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2205      	movs	r2, #5
 8002672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0201 	bic.w	r2, r2, #1
 8002684:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002694:	b480      	push	{r7}
 8002696:	b089      	sub	sp, #36	; 0x24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	e16b      	b.n	8002988 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026b0:	2201      	movs	r2, #1
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	4013      	ands	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	f040 815a 	bne.w	8002982 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d005      	beq.n	80026e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d130      	bne.n	8002748 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	2203      	movs	r2, #3
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800271c:	2201      	movs	r2, #1
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	f003 0201 	and.w	r2, r3, #1
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 0303 	and.w	r3, r3, #3
 8002750:	2b03      	cmp	r3, #3
 8002752:	d017      	beq.n	8002784 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	2203      	movs	r2, #3
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d123      	bne.n	80027d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	08da      	lsrs	r2, r3, #3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3208      	adds	r2, #8
 8002798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800279c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	220f      	movs	r2, #15
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	08da      	lsrs	r2, r3, #3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3208      	adds	r2, #8
 80027d2:	69b9      	ldr	r1, [r7, #24]
 80027d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	2203      	movs	r2, #3
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0203 	and.w	r2, r3, #3
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 80b4 	beq.w	8002982 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	4b60      	ldr	r3, [pc, #384]	; (80029a0 <HAL_GPIO_Init+0x30c>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	4a5f      	ldr	r2, [pc, #380]	; (80029a0 <HAL_GPIO_Init+0x30c>)
 8002824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002828:	6453      	str	r3, [r2, #68]	; 0x44
 800282a:	4b5d      	ldr	r3, [pc, #372]	; (80029a0 <HAL_GPIO_Init+0x30c>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002836:	4a5b      	ldr	r2, [pc, #364]	; (80029a4 <HAL_GPIO_Init+0x310>)
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	089b      	lsrs	r3, r3, #2
 800283c:	3302      	adds	r3, #2
 800283e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	220f      	movs	r2, #15
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4013      	ands	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a52      	ldr	r2, [pc, #328]	; (80029a8 <HAL_GPIO_Init+0x314>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d02b      	beq.n	80028ba <HAL_GPIO_Init+0x226>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a51      	ldr	r2, [pc, #324]	; (80029ac <HAL_GPIO_Init+0x318>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d025      	beq.n	80028b6 <HAL_GPIO_Init+0x222>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a50      	ldr	r2, [pc, #320]	; (80029b0 <HAL_GPIO_Init+0x31c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d01f      	beq.n	80028b2 <HAL_GPIO_Init+0x21e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a4f      	ldr	r2, [pc, #316]	; (80029b4 <HAL_GPIO_Init+0x320>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d019      	beq.n	80028ae <HAL_GPIO_Init+0x21a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a4e      	ldr	r2, [pc, #312]	; (80029b8 <HAL_GPIO_Init+0x324>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d013      	beq.n	80028aa <HAL_GPIO_Init+0x216>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a4d      	ldr	r2, [pc, #308]	; (80029bc <HAL_GPIO_Init+0x328>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d00d      	beq.n	80028a6 <HAL_GPIO_Init+0x212>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a4c      	ldr	r2, [pc, #304]	; (80029c0 <HAL_GPIO_Init+0x32c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d007      	beq.n	80028a2 <HAL_GPIO_Init+0x20e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a4b      	ldr	r2, [pc, #300]	; (80029c4 <HAL_GPIO_Init+0x330>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d101      	bne.n	800289e <HAL_GPIO_Init+0x20a>
 800289a:	2307      	movs	r3, #7
 800289c:	e00e      	b.n	80028bc <HAL_GPIO_Init+0x228>
 800289e:	2308      	movs	r3, #8
 80028a0:	e00c      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028a2:	2306      	movs	r3, #6
 80028a4:	e00a      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028a6:	2305      	movs	r3, #5
 80028a8:	e008      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028aa:	2304      	movs	r3, #4
 80028ac:	e006      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028ae:	2303      	movs	r3, #3
 80028b0:	e004      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e002      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028ba:	2300      	movs	r3, #0
 80028bc:	69fa      	ldr	r2, [r7, #28]
 80028be:	f002 0203 	and.w	r2, r2, #3
 80028c2:	0092      	lsls	r2, r2, #2
 80028c4:	4093      	lsls	r3, r2
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028cc:	4935      	ldr	r1, [pc, #212]	; (80029a4 <HAL_GPIO_Init+0x310>)
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	089b      	lsrs	r3, r3, #2
 80028d2:	3302      	adds	r3, #2
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028da:	4b3b      	ldr	r3, [pc, #236]	; (80029c8 <HAL_GPIO_Init+0x334>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	43db      	mvns	r3, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4013      	ands	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028fe:	4a32      	ldr	r2, [pc, #200]	; (80029c8 <HAL_GPIO_Init+0x334>)
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002904:	4b30      	ldr	r3, [pc, #192]	; (80029c8 <HAL_GPIO_Init+0x334>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002928:	4a27      	ldr	r2, [pc, #156]	; (80029c8 <HAL_GPIO_Init+0x334>)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800292e:	4b26      	ldr	r3, [pc, #152]	; (80029c8 <HAL_GPIO_Init+0x334>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	43db      	mvns	r3, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4013      	ands	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002952:	4a1d      	ldr	r2, [pc, #116]	; (80029c8 <HAL_GPIO_Init+0x334>)
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002958:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <HAL_GPIO_Init+0x334>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800297c:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <HAL_GPIO_Init+0x334>)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3301      	adds	r3, #1
 8002986:	61fb      	str	r3, [r7, #28]
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	2b0f      	cmp	r3, #15
 800298c:	f67f ae90 	bls.w	80026b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002990:	bf00      	nop
 8002992:	bf00      	nop
 8002994:	3724      	adds	r7, #36	; 0x24
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40013800 	.word	0x40013800
 80029a8:	40020000 	.word	0x40020000
 80029ac:	40020400 	.word	0x40020400
 80029b0:	40020800 	.word	0x40020800
 80029b4:	40020c00 	.word	0x40020c00
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40021400 	.word	0x40021400
 80029c0:	40021800 	.word	0x40021800
 80029c4:	40021c00 	.word	0x40021c00
 80029c8:	40013c00 	.word	0x40013c00

080029cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	807b      	strh	r3, [r7, #2]
 80029d8:	4613      	mov	r3, r2
 80029da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029dc:	787b      	ldrb	r3, [r7, #1]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029e2:	887a      	ldrh	r2, [r7, #2]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029e8:	e003      	b.n	80029f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029ea:	887b      	ldrh	r3, [r7, #2]
 80029ec:	041a      	lsls	r2, r3, #16
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	619a      	str	r2, [r3, #24]
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b085      	sub	sp, #20
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	460b      	mov	r3, r1
 8002a08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a10:	887a      	ldrh	r2, [r7, #2]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4013      	ands	r3, r2
 8002a16:	041a      	lsls	r2, r3, #16
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	43d9      	mvns	r1, r3
 8002a1c:	887b      	ldrh	r3, [r7, #2]
 8002a1e:	400b      	ands	r3, r1
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	619a      	str	r2, [r3, #24]
}
 8002a26:	bf00      	nop
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e264      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d075      	beq.n	8002b3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a52:	4ba3      	ldr	r3, [pc, #652]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d00c      	beq.n	8002a78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a5e:	4ba0      	ldr	r3, [pc, #640]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d112      	bne.n	8002a90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a6a:	4b9d      	ldr	r3, [pc, #628]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a76:	d10b      	bne.n	8002a90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a78:	4b99      	ldr	r3, [pc, #612]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d05b      	beq.n	8002b3c <HAL_RCC_OscConfig+0x108>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d157      	bne.n	8002b3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e23f      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a98:	d106      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x74>
 8002a9a:	4b91      	ldr	r3, [pc, #580]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a90      	ldr	r2, [pc, #576]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	e01d      	b.n	8002ae4 <HAL_RCC_OscConfig+0xb0>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCC_OscConfig+0x98>
 8002ab2:	4b8b      	ldr	r3, [pc, #556]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a8a      	ldr	r2, [pc, #552]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	4b88      	ldr	r3, [pc, #544]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a87      	ldr	r2, [pc, #540]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	e00b      	b.n	8002ae4 <HAL_RCC_OscConfig+0xb0>
 8002acc:	4b84      	ldr	r3, [pc, #528]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a83      	ldr	r2, [pc, #524]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ad6:	6013      	str	r3, [r2, #0]
 8002ad8:	4b81      	ldr	r3, [pc, #516]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a80      	ldr	r2, [pc, #512]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d013      	beq.n	8002b14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7fe ffa6 	bl	8001a3c <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af4:	f7fe ffa2 	bl	8001a3c <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b64      	cmp	r3, #100	; 0x64
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e204      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	4b76      	ldr	r3, [pc, #472]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0xc0>
 8002b12:	e014      	b.n	8002b3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b14:	f7fe ff92 	bl	8001a3c <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b1c:	f7fe ff8e 	bl	8001a3c <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b64      	cmp	r3, #100	; 0x64
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e1f0      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2e:	4b6c      	ldr	r3, [pc, #432]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0xe8>
 8002b3a:	e000      	b.n	8002b3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d063      	beq.n	8002c12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b4a:	4b65      	ldr	r3, [pc, #404]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00b      	beq.n	8002b6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b56:	4b62      	ldr	r3, [pc, #392]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d11c      	bne.n	8002b9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b62:	4b5f      	ldr	r3, [pc, #380]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d116      	bne.n	8002b9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6e:	4b5c      	ldr	r3, [pc, #368]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d005      	beq.n	8002b86 <HAL_RCC_OscConfig+0x152>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d001      	beq.n	8002b86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e1c4      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b86:	4b56      	ldr	r3, [pc, #344]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4952      	ldr	r1, [pc, #328]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9a:	e03a      	b.n	8002c12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d020      	beq.n	8002be6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba4:	4b4f      	ldr	r3, [pc, #316]	; (8002ce4 <HAL_RCC_OscConfig+0x2b0>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002baa:	f7fe ff47 	bl	8001a3c <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb2:	f7fe ff43 	bl	8001a3c <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e1a5      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc4:	4b46      	ldr	r3, [pc, #280]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f0      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd0:	4b43      	ldr	r3, [pc, #268]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	4940      	ldr	r1, [pc, #256]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	600b      	str	r3, [r1, #0]
 8002be4:	e015      	b.n	8002c12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be6:	4b3f      	ldr	r3, [pc, #252]	; (8002ce4 <HAL_RCC_OscConfig+0x2b0>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bec:	f7fe ff26 	bl	8001a3c <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bf4:	f7fe ff22 	bl	8001a3c <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e184      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c06:	4b36      	ldr	r3, [pc, #216]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d030      	beq.n	8002c80 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d016      	beq.n	8002c54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c26:	4b30      	ldr	r3, [pc, #192]	; (8002ce8 <HAL_RCC_OscConfig+0x2b4>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2c:	f7fe ff06 	bl	8001a3c <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c34:	f7fe ff02 	bl	8001a3c <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e164      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c46:	4b26      	ldr	r3, [pc, #152]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x200>
 8002c52:	e015      	b.n	8002c80 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c54:	4b24      	ldr	r3, [pc, #144]	; (8002ce8 <HAL_RCC_OscConfig+0x2b4>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5a:	f7fe feef 	bl	8001a3c <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c62:	f7fe feeb 	bl	8001a3c <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e14d      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c74:	4b1a      	ldr	r3, [pc, #104]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1f0      	bne.n	8002c62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 80a0 	beq.w	8002dce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c92:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10f      	bne.n	8002cbe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	4a0e      	ldr	r2, [pc, #56]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cac:	6413      	str	r3, [r2, #64]	; 0x40
 8002cae:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <HAL_RCC_OscConfig+0x2ac>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cbe:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <HAL_RCC_OscConfig+0x2b8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d121      	bne.n	8002d0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cca:	4b08      	ldr	r3, [pc, #32]	; (8002cec <HAL_RCC_OscConfig+0x2b8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a07      	ldr	r2, [pc, #28]	; (8002cec <HAL_RCC_OscConfig+0x2b8>)
 8002cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cd6:	f7fe feb1 	bl	8001a3c <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cdc:	e011      	b.n	8002d02 <HAL_RCC_OscConfig+0x2ce>
 8002cde:	bf00      	nop
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	42470000 	.word	0x42470000
 8002ce8:	42470e80 	.word	0x42470e80
 8002cec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf0:	f7fe fea4 	bl	8001a3c <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e106      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d02:	4b85      	ldr	r3, [pc, #532]	; (8002f18 <HAL_RCC_OscConfig+0x4e4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d0f0      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d106      	bne.n	8002d24 <HAL_RCC_OscConfig+0x2f0>
 8002d16:	4b81      	ldr	r3, [pc, #516]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1a:	4a80      	ldr	r2, [pc, #512]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002d1c:	f043 0301 	orr.w	r3, r3, #1
 8002d20:	6713      	str	r3, [r2, #112]	; 0x70
 8002d22:	e01c      	b.n	8002d5e <HAL_RCC_OscConfig+0x32a>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2b05      	cmp	r3, #5
 8002d2a:	d10c      	bne.n	8002d46 <HAL_RCC_OscConfig+0x312>
 8002d2c:	4b7b      	ldr	r3, [pc, #492]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d30:	4a7a      	ldr	r2, [pc, #488]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002d32:	f043 0304 	orr.w	r3, r3, #4
 8002d36:	6713      	str	r3, [r2, #112]	; 0x70
 8002d38:	4b78      	ldr	r3, [pc, #480]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3c:	4a77      	ldr	r2, [pc, #476]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	6713      	str	r3, [r2, #112]	; 0x70
 8002d44:	e00b      	b.n	8002d5e <HAL_RCC_OscConfig+0x32a>
 8002d46:	4b75      	ldr	r3, [pc, #468]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	4a74      	ldr	r2, [pc, #464]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002d4c:	f023 0301 	bic.w	r3, r3, #1
 8002d50:	6713      	str	r3, [r2, #112]	; 0x70
 8002d52:	4b72      	ldr	r3, [pc, #456]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d56:	4a71      	ldr	r2, [pc, #452]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002d58:	f023 0304 	bic.w	r3, r3, #4
 8002d5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d015      	beq.n	8002d92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d66:	f7fe fe69 	bl	8001a3c <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6c:	e00a      	b.n	8002d84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d6e:	f7fe fe65 	bl	8001a3c <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e0c5      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d84:	4b65      	ldr	r3, [pc, #404]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0ee      	beq.n	8002d6e <HAL_RCC_OscConfig+0x33a>
 8002d90:	e014      	b.n	8002dbc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d92:	f7fe fe53 	bl	8001a3c <HAL_GetTick>
 8002d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d98:	e00a      	b.n	8002db0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d9a:	f7fe fe4f 	bl	8001a3c <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e0af      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db0:	4b5a      	ldr	r3, [pc, #360]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1ee      	bne.n	8002d9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dbc:	7dfb      	ldrb	r3, [r7, #23]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d105      	bne.n	8002dce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc2:	4b56      	ldr	r3, [pc, #344]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	4a55      	ldr	r2, [pc, #340]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002dc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 809b 	beq.w	8002f0e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dd8:	4b50      	ldr	r3, [pc, #320]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 030c 	and.w	r3, r3, #12
 8002de0:	2b08      	cmp	r3, #8
 8002de2:	d05c      	beq.n	8002e9e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d141      	bne.n	8002e70 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dec:	4b4c      	ldr	r3, [pc, #304]	; (8002f20 <HAL_RCC_OscConfig+0x4ec>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df2:	f7fe fe23 	bl	8001a3c <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dfa:	f7fe fe1f 	bl	8001a3c <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e081      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e0c:	4b43      	ldr	r3, [pc, #268]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1f0      	bne.n	8002dfa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69da      	ldr	r2, [r3, #28]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	431a      	orrs	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	019b      	lsls	r3, r3, #6
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2e:	085b      	lsrs	r3, r3, #1
 8002e30:	3b01      	subs	r3, #1
 8002e32:	041b      	lsls	r3, r3, #16
 8002e34:	431a      	orrs	r2, r3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3a:	061b      	lsls	r3, r3, #24
 8002e3c:	4937      	ldr	r1, [pc, #220]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e42:	4b37      	ldr	r3, [pc, #220]	; (8002f20 <HAL_RCC_OscConfig+0x4ec>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e48:	f7fe fdf8 	bl	8001a3c <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e50:	f7fe fdf4 	bl	8001a3c <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e056      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e62:	4b2e      	ldr	r3, [pc, #184]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCC_OscConfig+0x41c>
 8002e6e:	e04e      	b.n	8002f0e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e70:	4b2b      	ldr	r3, [pc, #172]	; (8002f20 <HAL_RCC_OscConfig+0x4ec>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e76:	f7fe fde1 	bl	8001a3c <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e7e:	f7fe fddd 	bl	8001a3c <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e03f      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e90:	4b22      	ldr	r3, [pc, #136]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1f0      	bne.n	8002e7e <HAL_RCC_OscConfig+0x44a>
 8002e9c:	e037      	b.n	8002f0e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e032      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002eaa:	4b1c      	ldr	r3, [pc, #112]	; (8002f1c <HAL_RCC_OscConfig+0x4e8>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d028      	beq.n	8002f0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d121      	bne.n	8002f0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d11a      	bne.n	8002f0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002eda:	4013      	ands	r3, r2
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ee0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d111      	bne.n	8002f0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef0:	085b      	lsrs	r3, r3, #1
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d107      	bne.n	8002f0a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f04:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d001      	beq.n	8002f0e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40007000 	.word	0x40007000
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	42470060 	.word	0x42470060

08002f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0cc      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f38:	4b68      	ldr	r3, [pc, #416]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d90c      	bls.n	8002f60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f46:	4b65      	ldr	r3, [pc, #404]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4e:	4b63      	ldr	r3, [pc, #396]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d001      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0b8      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d020      	beq.n	8002fae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f78:	4b59      	ldr	r3, [pc, #356]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	4a58      	ldr	r2, [pc, #352]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0308 	and.w	r3, r3, #8
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f90:	4b53      	ldr	r3, [pc, #332]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	4a52      	ldr	r2, [pc, #328]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f9c:	4b50      	ldr	r3, [pc, #320]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	494d      	ldr	r1, [pc, #308]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d044      	beq.n	8003044 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d107      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	4b47      	ldr	r3, [pc, #284]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d119      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e07f      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d003      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d107      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe2:	4b3f      	ldr	r3, [pc, #252]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d109      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e06f      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff2:	4b3b      	ldr	r3, [pc, #236]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e067      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003002:	4b37      	ldr	r3, [pc, #220]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f023 0203 	bic.w	r2, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	4934      	ldr	r1, [pc, #208]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	4313      	orrs	r3, r2
 8003012:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003014:	f7fe fd12 	bl	8001a3c <HAL_GetTick>
 8003018:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301a:	e00a      	b.n	8003032 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800301c:	f7fe fd0e 	bl	8001a3c <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f241 3288 	movw	r2, #5000	; 0x1388
 800302a:	4293      	cmp	r3, r2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e04f      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003032:	4b2b      	ldr	r3, [pc, #172]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 020c 	and.w	r2, r3, #12
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	429a      	cmp	r2, r3
 8003042:	d1eb      	bne.n	800301c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003044:	4b25      	ldr	r3, [pc, #148]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d20c      	bcs.n	800306c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003052:	4b22      	ldr	r3, [pc, #136]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800305a:	4b20      	ldr	r3, [pc, #128]	; (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d001      	beq.n	800306c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e032      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d008      	beq.n	800308a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003078:	4b19      	ldr	r3, [pc, #100]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	4916      	ldr	r1, [pc, #88]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003096:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	490e      	ldr	r1, [pc, #56]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030aa:	f000 f821 	bl	80030f0 <HAL_RCC_GetSysClockFreq>
 80030ae:	4602      	mov	r2, r0
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	490a      	ldr	r1, [pc, #40]	; (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 80030bc:	5ccb      	ldrb	r3, [r1, r3]
 80030be:	fa22 f303 	lsr.w	r3, r2, r3
 80030c2:	4a09      	ldr	r2, [pc, #36]	; (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030c6:	4b09      	ldr	r3, [pc, #36]	; (80030ec <HAL_RCC_ClockConfig+0x1c8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fe fb0c 	bl	80016e8 <HAL_InitTick>

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40023c00 	.word	0x40023c00
 80030e0:	40023800 	.word	0x40023800
 80030e4:	0800970c 	.word	0x0800970c
 80030e8:	20000000 	.word	0x20000000
 80030ec:	20000004 	.word	0x20000004

080030f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030f4:	b084      	sub	sp, #16
 80030f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	607b      	str	r3, [r7, #4]
 80030fc:	2300      	movs	r3, #0
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	2300      	movs	r3, #0
 8003102:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003108:	4b67      	ldr	r3, [pc, #412]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 030c 	and.w	r3, r3, #12
 8003110:	2b08      	cmp	r3, #8
 8003112:	d00d      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0x40>
 8003114:	2b08      	cmp	r3, #8
 8003116:	f200 80bd 	bhi.w	8003294 <HAL_RCC_GetSysClockFreq+0x1a4>
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0x34>
 800311e:	2b04      	cmp	r3, #4
 8003120:	d003      	beq.n	800312a <HAL_RCC_GetSysClockFreq+0x3a>
 8003122:	e0b7      	b.n	8003294 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003124:	4b61      	ldr	r3, [pc, #388]	; (80032ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003126:	60bb      	str	r3, [r7, #8]
       break;
 8003128:	e0b7      	b.n	800329a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800312a:	4b61      	ldr	r3, [pc, #388]	; (80032b0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800312c:	60bb      	str	r3, [r7, #8]
      break;
 800312e:	e0b4      	b.n	800329a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003130:	4b5d      	ldr	r3, [pc, #372]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003138:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800313a:	4b5b      	ldr	r3, [pc, #364]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d04d      	beq.n	80031e2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003146:	4b58      	ldr	r3, [pc, #352]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	099b      	lsrs	r3, r3, #6
 800314c:	461a      	mov	r2, r3
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003156:	f04f 0100 	mov.w	r1, #0
 800315a:	ea02 0800 	and.w	r8, r2, r0
 800315e:	ea03 0901 	and.w	r9, r3, r1
 8003162:	4640      	mov	r0, r8
 8003164:	4649      	mov	r1, r9
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	f04f 0300 	mov.w	r3, #0
 800316e:	014b      	lsls	r3, r1, #5
 8003170:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003174:	0142      	lsls	r2, r0, #5
 8003176:	4610      	mov	r0, r2
 8003178:	4619      	mov	r1, r3
 800317a:	ebb0 0008 	subs.w	r0, r0, r8
 800317e:	eb61 0109 	sbc.w	r1, r1, r9
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	f04f 0300 	mov.w	r3, #0
 800318a:	018b      	lsls	r3, r1, #6
 800318c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003190:	0182      	lsls	r2, r0, #6
 8003192:	1a12      	subs	r2, r2, r0
 8003194:	eb63 0301 	sbc.w	r3, r3, r1
 8003198:	f04f 0000 	mov.w	r0, #0
 800319c:	f04f 0100 	mov.w	r1, #0
 80031a0:	00d9      	lsls	r1, r3, #3
 80031a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031a6:	00d0      	lsls	r0, r2, #3
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	eb12 0208 	adds.w	r2, r2, r8
 80031b0:	eb43 0309 	adc.w	r3, r3, r9
 80031b4:	f04f 0000 	mov.w	r0, #0
 80031b8:	f04f 0100 	mov.w	r1, #0
 80031bc:	0259      	lsls	r1, r3, #9
 80031be:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80031c2:	0250      	lsls	r0, r2, #9
 80031c4:	4602      	mov	r2, r0
 80031c6:	460b      	mov	r3, r1
 80031c8:	4610      	mov	r0, r2
 80031ca:	4619      	mov	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	461a      	mov	r2, r3
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	f7fd fce8 	bl	8000ba8 <__aeabi_uldivmod>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4613      	mov	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	e04a      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e2:	4b31      	ldr	r3, [pc, #196]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	099b      	lsrs	r3, r3, #6
 80031e8:	461a      	mov	r2, r3
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80031f2:	f04f 0100 	mov.w	r1, #0
 80031f6:	ea02 0400 	and.w	r4, r2, r0
 80031fa:	ea03 0501 	and.w	r5, r3, r1
 80031fe:	4620      	mov	r0, r4
 8003200:	4629      	mov	r1, r5
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	014b      	lsls	r3, r1, #5
 800320c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003210:	0142      	lsls	r2, r0, #5
 8003212:	4610      	mov	r0, r2
 8003214:	4619      	mov	r1, r3
 8003216:	1b00      	subs	r0, r0, r4
 8003218:	eb61 0105 	sbc.w	r1, r1, r5
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	f04f 0300 	mov.w	r3, #0
 8003224:	018b      	lsls	r3, r1, #6
 8003226:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800322a:	0182      	lsls	r2, r0, #6
 800322c:	1a12      	subs	r2, r2, r0
 800322e:	eb63 0301 	sbc.w	r3, r3, r1
 8003232:	f04f 0000 	mov.w	r0, #0
 8003236:	f04f 0100 	mov.w	r1, #0
 800323a:	00d9      	lsls	r1, r3, #3
 800323c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003240:	00d0      	lsls	r0, r2, #3
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	1912      	adds	r2, r2, r4
 8003248:	eb45 0303 	adc.w	r3, r5, r3
 800324c:	f04f 0000 	mov.w	r0, #0
 8003250:	f04f 0100 	mov.w	r1, #0
 8003254:	0299      	lsls	r1, r3, #10
 8003256:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800325a:	0290      	lsls	r0, r2, #10
 800325c:	4602      	mov	r2, r0
 800325e:	460b      	mov	r3, r1
 8003260:	4610      	mov	r0, r2
 8003262:	4619      	mov	r1, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	461a      	mov	r2, r3
 8003268:	f04f 0300 	mov.w	r3, #0
 800326c:	f7fd fc9c 	bl	8000ba8 <__aeabi_uldivmod>
 8003270:	4602      	mov	r2, r0
 8003272:	460b      	mov	r3, r1
 8003274:	4613      	mov	r3, r2
 8003276:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003278:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	0c1b      	lsrs	r3, r3, #16
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	3301      	adds	r3, #1
 8003284:	005b      	lsls	r3, r3, #1
 8003286:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003290:	60bb      	str	r3, [r7, #8]
      break;
 8003292:	e002      	b.n	800329a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003294:	4b05      	ldr	r3, [pc, #20]	; (80032ac <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003296:	60bb      	str	r3, [r7, #8]
      break;
 8003298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800329a:	68bb      	ldr	r3, [r7, #8]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032a6:	bf00      	nop
 80032a8:	40023800 	.word	0x40023800
 80032ac:	00f42400 	.word	0x00f42400
 80032b0:	007a1200 	.word	0x007a1200

080032b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032b8:	4b03      	ldr	r3, [pc, #12]	; (80032c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80032ba:	681b      	ldr	r3, [r3, #0]
}
 80032bc:	4618      	mov	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	20000000 	.word	0x20000000

080032cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032d0:	f7ff fff0 	bl	80032b4 <HAL_RCC_GetHCLKFreq>
 80032d4:	4602      	mov	r2, r0
 80032d6:	4b05      	ldr	r3, [pc, #20]	; (80032ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	0a9b      	lsrs	r3, r3, #10
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	4903      	ldr	r1, [pc, #12]	; (80032f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032e2:	5ccb      	ldrb	r3, [r1, r3]
 80032e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40023800 	.word	0x40023800
 80032f0:	0800971c 	.word	0x0800971c

080032f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032f8:	f7ff ffdc 	bl	80032b4 <HAL_RCC_GetHCLKFreq>
 80032fc:	4602      	mov	r2, r0
 80032fe:	4b05      	ldr	r3, [pc, #20]	; (8003314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	0b5b      	lsrs	r3, r3, #13
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	4903      	ldr	r1, [pc, #12]	; (8003318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800330a:	5ccb      	ldrb	r3, [r1, r3]
 800330c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003310:	4618      	mov	r0, r3
 8003312:	bd80      	pop	{r7, pc}
 8003314:	40023800 	.word	0x40023800
 8003318:	0800971c 	.word	0x0800971c

0800331c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	220f      	movs	r2, #15
 800332a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800332c:	4b12      	ldr	r3, [pc, #72]	; (8003378 <HAL_RCC_GetClockConfig+0x5c>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 0203 	and.w	r2, r3, #3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003338:	4b0f      	ldr	r3, [pc, #60]	; (8003378 <HAL_RCC_GetClockConfig+0x5c>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003344:	4b0c      	ldr	r3, [pc, #48]	; (8003378 <HAL_RCC_GetClockConfig+0x5c>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003350:	4b09      	ldr	r3, [pc, #36]	; (8003378 <HAL_RCC_GetClockConfig+0x5c>)
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	08db      	lsrs	r3, r3, #3
 8003356:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800335e:	4b07      	ldr	r3, [pc, #28]	; (800337c <HAL_RCC_GetClockConfig+0x60>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0207 	and.w	r2, r3, #7
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	601a      	str	r2, [r3, #0]
}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40023800 	.word	0x40023800
 800337c:	40023c00 	.word	0x40023c00

08003380 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e041      	b.n	8003416 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d106      	bne.n	80033ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7fe f92e 	bl	8001608 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3304      	adds	r3, #4
 80033bc:	4619      	mov	r1, r3
 80033be:	4610      	mov	r0, r2
 80033c0:	f000 fc12 	bl	8003be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2201      	movs	r2, #1
 80033e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b01      	cmp	r3, #1
 8003432:	d001      	beq.n	8003438 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e046      	b.n	80034c6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a23      	ldr	r2, [pc, #140]	; (80034d4 <HAL_TIM_Base_Start+0xb4>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d022      	beq.n	8003490 <HAL_TIM_Base_Start+0x70>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003452:	d01d      	beq.n	8003490 <HAL_TIM_Base_Start+0x70>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a1f      	ldr	r2, [pc, #124]	; (80034d8 <HAL_TIM_Base_Start+0xb8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d018      	beq.n	8003490 <HAL_TIM_Base_Start+0x70>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a1e      	ldr	r2, [pc, #120]	; (80034dc <HAL_TIM_Base_Start+0xbc>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d013      	beq.n	8003490 <HAL_TIM_Base_Start+0x70>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1c      	ldr	r2, [pc, #112]	; (80034e0 <HAL_TIM_Base_Start+0xc0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00e      	beq.n	8003490 <HAL_TIM_Base_Start+0x70>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a1b      	ldr	r2, [pc, #108]	; (80034e4 <HAL_TIM_Base_Start+0xc4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d009      	beq.n	8003490 <HAL_TIM_Base_Start+0x70>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a19      	ldr	r2, [pc, #100]	; (80034e8 <HAL_TIM_Base_Start+0xc8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d004      	beq.n	8003490 <HAL_TIM_Base_Start+0x70>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a18      	ldr	r2, [pc, #96]	; (80034ec <HAL_TIM_Base_Start+0xcc>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d111      	bne.n	80034b4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 0307 	and.w	r3, r3, #7
 800349a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b06      	cmp	r3, #6
 80034a0:	d010      	beq.n	80034c4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0201 	orr.w	r2, r2, #1
 80034b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034b2:	e007      	b.n	80034c4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0201 	orr.w	r2, r2, #1
 80034c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40010000 	.word	0x40010000
 80034d8:	40000400 	.word	0x40000400
 80034dc:	40000800 	.word	0x40000800
 80034e0:	40000c00 	.word	0x40000c00
 80034e4:	40010400 	.word	0x40010400
 80034e8:	40014000 	.word	0x40014000
 80034ec:	40001800 	.word	0x40001800

080034f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b01      	cmp	r3, #1
 8003502:	d001      	beq.n	8003508 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e04e      	b.n	80035a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f042 0201 	orr.w	r2, r2, #1
 800351e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a23      	ldr	r2, [pc, #140]	; (80035b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d022      	beq.n	8003570 <HAL_TIM_Base_Start_IT+0x80>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003532:	d01d      	beq.n	8003570 <HAL_TIM_Base_Start_IT+0x80>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a1f      	ldr	r2, [pc, #124]	; (80035b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d018      	beq.n	8003570 <HAL_TIM_Base_Start_IT+0x80>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a1e      	ldr	r2, [pc, #120]	; (80035bc <HAL_TIM_Base_Start_IT+0xcc>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d013      	beq.n	8003570 <HAL_TIM_Base_Start_IT+0x80>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a1c      	ldr	r2, [pc, #112]	; (80035c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d00e      	beq.n	8003570 <HAL_TIM_Base_Start_IT+0x80>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a1b      	ldr	r2, [pc, #108]	; (80035c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d009      	beq.n	8003570 <HAL_TIM_Base_Start_IT+0x80>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a19      	ldr	r2, [pc, #100]	; (80035c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d004      	beq.n	8003570 <HAL_TIM_Base_Start_IT+0x80>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a18      	ldr	r2, [pc, #96]	; (80035cc <HAL_TIM_Base_Start_IT+0xdc>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d111      	bne.n	8003594 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2b06      	cmp	r3, #6
 8003580:	d010      	beq.n	80035a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f042 0201 	orr.w	r2, r2, #1
 8003590:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003592:	e007      	b.n	80035a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f042 0201 	orr.w	r2, r2, #1
 80035a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	40010000 	.word	0x40010000
 80035b8:	40000400 	.word	0x40000400
 80035bc:	40000800 	.word	0x40000800
 80035c0:	40000c00 	.word	0x40000c00
 80035c4:	40010400 	.word	0x40010400
 80035c8:	40014000 	.word	0x40014000
 80035cc:	40001800 	.word	0x40001800

080035d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e041      	b.n	8003666 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d106      	bne.n	80035fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f839 	bl	800366e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2202      	movs	r2, #2
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3304      	adds	r3, #4
 800360c:	4619      	mov	r1, r3
 800360e:	4610      	mov	r0, r2
 8003610:	f000 faea 	bl	8003be8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b02      	cmp	r3, #2
 8003696:	d122      	bne.n	80036de <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d11b      	bne.n	80036de <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f06f 0202 	mvn.w	r2, #2
 80036ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	f003 0303 	and.w	r3, r3, #3
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d003      	beq.n	80036cc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 fa71 	bl	8003bac <HAL_TIM_IC_CaptureCallback>
 80036ca:	e005      	b.n	80036d8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 fa63 	bl	8003b98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fa74 	bl	8003bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b04      	cmp	r3, #4
 80036ea:	d122      	bne.n	8003732 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	2b04      	cmp	r3, #4
 80036f8:	d11b      	bne.n	8003732 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f06f 0204 	mvn.w	r2, #4
 8003702:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2202      	movs	r2, #2
 8003708:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 fa47 	bl	8003bac <HAL_TIM_IC_CaptureCallback>
 800371e:	e005      	b.n	800372c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 fa39 	bl	8003b98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fa4a 	bl	8003bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	2b08      	cmp	r3, #8
 800373e:	d122      	bne.n	8003786 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f003 0308 	and.w	r3, r3, #8
 800374a:	2b08      	cmp	r3, #8
 800374c:	d11b      	bne.n	8003786 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f06f 0208 	mvn.w	r2, #8
 8003756:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2204      	movs	r2, #4
 800375c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	f003 0303 	and.w	r3, r3, #3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 fa1d 	bl	8003bac <HAL_TIM_IC_CaptureCallback>
 8003772:	e005      	b.n	8003780 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 fa0f 	bl	8003b98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 fa20 	bl	8003bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	2b10      	cmp	r3, #16
 8003792:	d122      	bne.n	80037da <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f003 0310 	and.w	r3, r3, #16
 800379e:	2b10      	cmp	r3, #16
 80037a0:	d11b      	bne.n	80037da <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f06f 0210 	mvn.w	r2, #16
 80037aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2208      	movs	r2, #8
 80037b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f9f3 	bl	8003bac <HAL_TIM_IC_CaptureCallback>
 80037c6:	e005      	b.n	80037d4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f9e5 	bl	8003b98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 f9f6 	bl	8003bc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d10e      	bne.n	8003806 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d107      	bne.n	8003806 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f06f 0201 	mvn.w	r2, #1
 80037fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7fd fe95 	bl	8001530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003810:	2b80      	cmp	r3, #128	; 0x80
 8003812:	d10e      	bne.n	8003832 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381e:	2b80      	cmp	r3, #128	; 0x80
 8003820:	d107      	bne.n	8003832 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800382a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fd4b 	bl	80042c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383c:	2b40      	cmp	r3, #64	; 0x40
 800383e:	d10e      	bne.n	800385e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384a:	2b40      	cmp	r3, #64	; 0x40
 800384c:	d107      	bne.n	800385e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f9bb 	bl	8003bd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	f003 0320 	and.w	r3, r3, #32
 8003868:	2b20      	cmp	r3, #32
 800386a:	d10e      	bne.n	800388a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f003 0320 	and.w	r3, r3, #32
 8003876:	2b20      	cmp	r3, #32
 8003878:	d107      	bne.n	800388a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f06f 0220 	mvn.w	r2, #32
 8003882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 fd15 	bl	80042b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800388a:	bf00      	nop
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
	...

08003894 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	60f8      	str	r0, [r7, #12]
 800389c:	60b9      	str	r1, [r7, #8]
 800389e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 80038aa:	2302      	movs	r3, #2
 80038ac:	e0ac      	b.n	8003a08 <HAL_TIM_PWM_ConfigChannel+0x174>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2b0c      	cmp	r3, #12
 80038ba:	f200 809f 	bhi.w	80039fc <HAL_TIM_PWM_ConfigChannel+0x168>
 80038be:	a201      	add	r2, pc, #4	; (adr r2, 80038c4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80038c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c4:	080038f9 	.word	0x080038f9
 80038c8:	080039fd 	.word	0x080039fd
 80038cc:	080039fd 	.word	0x080039fd
 80038d0:	080039fd 	.word	0x080039fd
 80038d4:	08003939 	.word	0x08003939
 80038d8:	080039fd 	.word	0x080039fd
 80038dc:	080039fd 	.word	0x080039fd
 80038e0:	080039fd 	.word	0x080039fd
 80038e4:	0800397b 	.word	0x0800397b
 80038e8:	080039fd 	.word	0x080039fd
 80038ec:	080039fd 	.word	0x080039fd
 80038f0:	080039fd 	.word	0x080039fd
 80038f4:	080039bb 	.word	0x080039bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68b9      	ldr	r1, [r7, #8]
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 fa12 	bl	8003d28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699a      	ldr	r2, [r3, #24]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0208 	orr.w	r2, r2, #8
 8003912:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699a      	ldr	r2, [r3, #24]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0204 	bic.w	r2, r2, #4
 8003922:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6999      	ldr	r1, [r3, #24]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	691a      	ldr	r2, [r3, #16]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	430a      	orrs	r2, r1
 8003934:	619a      	str	r2, [r3, #24]
      break;
 8003936:	e062      	b.n	80039fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68b9      	ldr	r1, [r7, #8]
 800393e:	4618      	mov	r0, r3
 8003940:	f000 fa62 	bl	8003e08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699a      	ldr	r2, [r3, #24]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003952:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6999      	ldr	r1, [r3, #24]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	021a      	lsls	r2, r3, #8
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	619a      	str	r2, [r3, #24]
      break;
 8003978:	e041      	b.n	80039fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68b9      	ldr	r1, [r7, #8]
 8003980:	4618      	mov	r0, r3
 8003982:	f000 fab7 	bl	8003ef4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69da      	ldr	r2, [r3, #28]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0208 	orr.w	r2, r2, #8
 8003994:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69da      	ldr	r2, [r3, #28]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0204 	bic.w	r2, r2, #4
 80039a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	69d9      	ldr	r1, [r3, #28]
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	61da      	str	r2, [r3, #28]
      break;
 80039b8:	e021      	b.n	80039fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68b9      	ldr	r1, [r7, #8]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fb0b 	bl	8003fdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	69da      	ldr	r2, [r3, #28]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69da      	ldr	r2, [r3, #28]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69d9      	ldr	r1, [r3, #28]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	021a      	lsls	r2, r3, #8
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	61da      	str	r2, [r3, #28]
      break;
 80039fa:	e000      	b.n	80039fe <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80039fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d101      	bne.n	8003a28 <HAL_TIM_ConfigClockSource+0x18>
 8003a24:	2302      	movs	r3, #2
 8003a26:	e0b3      	b.n	8003b90 <HAL_TIM_ConfigClockSource+0x180>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a4e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a60:	d03e      	beq.n	8003ae0 <HAL_TIM_ConfigClockSource+0xd0>
 8003a62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a66:	f200 8087 	bhi.w	8003b78 <HAL_TIM_ConfigClockSource+0x168>
 8003a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a6e:	f000 8085 	beq.w	8003b7c <HAL_TIM_ConfigClockSource+0x16c>
 8003a72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a76:	d87f      	bhi.n	8003b78 <HAL_TIM_ConfigClockSource+0x168>
 8003a78:	2b70      	cmp	r3, #112	; 0x70
 8003a7a:	d01a      	beq.n	8003ab2 <HAL_TIM_ConfigClockSource+0xa2>
 8003a7c:	2b70      	cmp	r3, #112	; 0x70
 8003a7e:	d87b      	bhi.n	8003b78 <HAL_TIM_ConfigClockSource+0x168>
 8003a80:	2b60      	cmp	r3, #96	; 0x60
 8003a82:	d050      	beq.n	8003b26 <HAL_TIM_ConfigClockSource+0x116>
 8003a84:	2b60      	cmp	r3, #96	; 0x60
 8003a86:	d877      	bhi.n	8003b78 <HAL_TIM_ConfigClockSource+0x168>
 8003a88:	2b50      	cmp	r3, #80	; 0x50
 8003a8a:	d03c      	beq.n	8003b06 <HAL_TIM_ConfigClockSource+0xf6>
 8003a8c:	2b50      	cmp	r3, #80	; 0x50
 8003a8e:	d873      	bhi.n	8003b78 <HAL_TIM_ConfigClockSource+0x168>
 8003a90:	2b40      	cmp	r3, #64	; 0x40
 8003a92:	d058      	beq.n	8003b46 <HAL_TIM_ConfigClockSource+0x136>
 8003a94:	2b40      	cmp	r3, #64	; 0x40
 8003a96:	d86f      	bhi.n	8003b78 <HAL_TIM_ConfigClockSource+0x168>
 8003a98:	2b30      	cmp	r3, #48	; 0x30
 8003a9a:	d064      	beq.n	8003b66 <HAL_TIM_ConfigClockSource+0x156>
 8003a9c:	2b30      	cmp	r3, #48	; 0x30
 8003a9e:	d86b      	bhi.n	8003b78 <HAL_TIM_ConfigClockSource+0x168>
 8003aa0:	2b20      	cmp	r3, #32
 8003aa2:	d060      	beq.n	8003b66 <HAL_TIM_ConfigClockSource+0x156>
 8003aa4:	2b20      	cmp	r3, #32
 8003aa6:	d867      	bhi.n	8003b78 <HAL_TIM_ConfigClockSource+0x168>
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d05c      	beq.n	8003b66 <HAL_TIM_ConfigClockSource+0x156>
 8003aac:	2b10      	cmp	r3, #16
 8003aae:	d05a      	beq.n	8003b66 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003ab0:	e062      	b.n	8003b78 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	6899      	ldr	r1, [r3, #8]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f000 fb5b 	bl	800417c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ad4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	609a      	str	r2, [r3, #8]
      break;
 8003ade:	e04e      	b.n	8003b7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6818      	ldr	r0, [r3, #0]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	6899      	ldr	r1, [r3, #8]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f000 fb44 	bl	800417c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	689a      	ldr	r2, [r3, #8]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b02:	609a      	str	r2, [r3, #8]
      break;
 8003b04:	e03b      	b.n	8003b7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6818      	ldr	r0, [r3, #0]
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	6859      	ldr	r1, [r3, #4]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	461a      	mov	r2, r3
 8003b14:	f000 fab8 	bl	8004088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2150      	movs	r1, #80	; 0x50
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 fb11 	bl	8004146 <TIM_ITRx_SetConfig>
      break;
 8003b24:	e02b      	b.n	8003b7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6818      	ldr	r0, [r3, #0]
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	6859      	ldr	r1, [r3, #4]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	461a      	mov	r2, r3
 8003b34:	f000 fad7 	bl	80040e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2160      	movs	r1, #96	; 0x60
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fb01 	bl	8004146 <TIM_ITRx_SetConfig>
      break;
 8003b44:	e01b      	b.n	8003b7e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	6859      	ldr	r1, [r3, #4]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	461a      	mov	r2, r3
 8003b54:	f000 fa98 	bl	8004088 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2140      	movs	r1, #64	; 0x40
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 faf1 	bl	8004146 <TIM_ITRx_SetConfig>
      break;
 8003b64:	e00b      	b.n	8003b7e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4610      	mov	r0, r2
 8003b72:	f000 fae8 	bl	8004146 <TIM_ITRx_SetConfig>
        break;
 8003b76:	e002      	b.n	8003b7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003b78:	bf00      	nop
 8003b7a:	e000      	b.n	8003b7e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003b7c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a40      	ldr	r2, [pc, #256]	; (8003cfc <TIM_Base_SetConfig+0x114>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d013      	beq.n	8003c28 <TIM_Base_SetConfig+0x40>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c06:	d00f      	beq.n	8003c28 <TIM_Base_SetConfig+0x40>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a3d      	ldr	r2, [pc, #244]	; (8003d00 <TIM_Base_SetConfig+0x118>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00b      	beq.n	8003c28 <TIM_Base_SetConfig+0x40>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a3c      	ldr	r2, [pc, #240]	; (8003d04 <TIM_Base_SetConfig+0x11c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d007      	beq.n	8003c28 <TIM_Base_SetConfig+0x40>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a3b      	ldr	r2, [pc, #236]	; (8003d08 <TIM_Base_SetConfig+0x120>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d003      	beq.n	8003c28 <TIM_Base_SetConfig+0x40>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a3a      	ldr	r2, [pc, #232]	; (8003d0c <TIM_Base_SetConfig+0x124>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d108      	bne.n	8003c3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	68fa      	ldr	r2, [r7, #12]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a2f      	ldr	r2, [pc, #188]	; (8003cfc <TIM_Base_SetConfig+0x114>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d02b      	beq.n	8003c9a <TIM_Base_SetConfig+0xb2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c48:	d027      	beq.n	8003c9a <TIM_Base_SetConfig+0xb2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a2c      	ldr	r2, [pc, #176]	; (8003d00 <TIM_Base_SetConfig+0x118>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d023      	beq.n	8003c9a <TIM_Base_SetConfig+0xb2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a2b      	ldr	r2, [pc, #172]	; (8003d04 <TIM_Base_SetConfig+0x11c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d01f      	beq.n	8003c9a <TIM_Base_SetConfig+0xb2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a2a      	ldr	r2, [pc, #168]	; (8003d08 <TIM_Base_SetConfig+0x120>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d01b      	beq.n	8003c9a <TIM_Base_SetConfig+0xb2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a29      	ldr	r2, [pc, #164]	; (8003d0c <TIM_Base_SetConfig+0x124>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d017      	beq.n	8003c9a <TIM_Base_SetConfig+0xb2>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a28      	ldr	r2, [pc, #160]	; (8003d10 <TIM_Base_SetConfig+0x128>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d013      	beq.n	8003c9a <TIM_Base_SetConfig+0xb2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a27      	ldr	r2, [pc, #156]	; (8003d14 <TIM_Base_SetConfig+0x12c>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d00f      	beq.n	8003c9a <TIM_Base_SetConfig+0xb2>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a26      	ldr	r2, [pc, #152]	; (8003d18 <TIM_Base_SetConfig+0x130>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d00b      	beq.n	8003c9a <TIM_Base_SetConfig+0xb2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a25      	ldr	r2, [pc, #148]	; (8003d1c <TIM_Base_SetConfig+0x134>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d007      	beq.n	8003c9a <TIM_Base_SetConfig+0xb2>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a24      	ldr	r2, [pc, #144]	; (8003d20 <TIM_Base_SetConfig+0x138>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d003      	beq.n	8003c9a <TIM_Base_SetConfig+0xb2>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a23      	ldr	r2, [pc, #140]	; (8003d24 <TIM_Base_SetConfig+0x13c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d108      	bne.n	8003cac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	695b      	ldr	r3, [r3, #20]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a0a      	ldr	r2, [pc, #40]	; (8003cfc <TIM_Base_SetConfig+0x114>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d003      	beq.n	8003ce0 <TIM_Base_SetConfig+0xf8>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a0c      	ldr	r2, [pc, #48]	; (8003d0c <TIM_Base_SetConfig+0x124>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d103      	bne.n	8003ce8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	615a      	str	r2, [r3, #20]
}
 8003cee:	bf00      	nop
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40010000 	.word	0x40010000
 8003d00:	40000400 	.word	0x40000400
 8003d04:	40000800 	.word	0x40000800
 8003d08:	40000c00 	.word	0x40000c00
 8003d0c:	40010400 	.word	0x40010400
 8003d10:	40014000 	.word	0x40014000
 8003d14:	40014400 	.word	0x40014400
 8003d18:	40014800 	.word	0x40014800
 8003d1c:	40001800 	.word	0x40001800
 8003d20:	40001c00 	.word	0x40001c00
 8003d24:	40002000 	.word	0x40002000

08003d28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	f023 0201 	bic.w	r2, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	699b      	ldr	r3, [r3, #24]
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f023 0303 	bic.w	r3, r3, #3
 8003d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f023 0302 	bic.w	r3, r3, #2
 8003d70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a20      	ldr	r2, [pc, #128]	; (8003e00 <TIM_OC1_SetConfig+0xd8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d003      	beq.n	8003d8c <TIM_OC1_SetConfig+0x64>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a1f      	ldr	r2, [pc, #124]	; (8003e04 <TIM_OC1_SetConfig+0xdc>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d10c      	bne.n	8003da6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f023 0308 	bic.w	r3, r3, #8
 8003d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f023 0304 	bic.w	r3, r3, #4
 8003da4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a15      	ldr	r2, [pc, #84]	; (8003e00 <TIM_OC1_SetConfig+0xd8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d003      	beq.n	8003db6 <TIM_OC1_SetConfig+0x8e>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a14      	ldr	r2, [pc, #80]	; (8003e04 <TIM_OC1_SetConfig+0xdc>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d111      	bne.n	8003dda <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	621a      	str	r2, [r3, #32]
}
 8003df4:	bf00      	nop
 8003df6:	371c      	adds	r7, #28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	40010000 	.word	0x40010000
 8003e04:	40010400 	.word	0x40010400

08003e08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	f023 0210 	bic.w	r2, r3, #16
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	021b      	lsls	r3, r3, #8
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f023 0320 	bic.w	r3, r3, #32
 8003e52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a22      	ldr	r2, [pc, #136]	; (8003eec <TIM_OC2_SetConfig+0xe4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d003      	beq.n	8003e70 <TIM_OC2_SetConfig+0x68>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a21      	ldr	r2, [pc, #132]	; (8003ef0 <TIM_OC2_SetConfig+0xe8>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d10d      	bne.n	8003e8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	011b      	lsls	r3, r3, #4
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a17      	ldr	r2, [pc, #92]	; (8003eec <TIM_OC2_SetConfig+0xe4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d003      	beq.n	8003e9c <TIM_OC2_SetConfig+0x94>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a16      	ldr	r2, [pc, #88]	; (8003ef0 <TIM_OC2_SetConfig+0xe8>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d113      	bne.n	8003ec4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ea2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685a      	ldr	r2, [r3, #4]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	621a      	str	r2, [r3, #32]
}
 8003ede:	bf00      	nop
 8003ee0:	371c      	adds	r7, #28
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	40010000 	.word	0x40010000
 8003ef0:	40010400 	.word	0x40010400

08003ef4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a1b      	ldr	r3, [r3, #32]
 8003f0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f023 0303 	bic.w	r3, r3, #3
 8003f2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	021b      	lsls	r3, r3, #8
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a21      	ldr	r2, [pc, #132]	; (8003fd4 <TIM_OC3_SetConfig+0xe0>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d003      	beq.n	8003f5a <TIM_OC3_SetConfig+0x66>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a20      	ldr	r2, [pc, #128]	; (8003fd8 <TIM_OC3_SetConfig+0xe4>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d10d      	bne.n	8003f76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	021b      	lsls	r3, r3, #8
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a16      	ldr	r2, [pc, #88]	; (8003fd4 <TIM_OC3_SetConfig+0xe0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d003      	beq.n	8003f86 <TIM_OC3_SetConfig+0x92>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a15      	ldr	r2, [pc, #84]	; (8003fd8 <TIM_OC3_SetConfig+0xe4>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d113      	bne.n	8003fae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	695b      	ldr	r3, [r3, #20]
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	693a      	ldr	r2, [r7, #16]
 8003fb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	621a      	str	r2, [r3, #32]
}
 8003fc8:	bf00      	nop
 8003fca:	371c      	adds	r7, #28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	40010000 	.word	0x40010000
 8003fd8:	40010400 	.word	0x40010400

08003fdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800400a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	021b      	lsls	r3, r3, #8
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	4313      	orrs	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004026:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	031b      	lsls	r3, r3, #12
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	4313      	orrs	r3, r2
 8004032:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a12      	ldr	r2, [pc, #72]	; (8004080 <TIM_OC4_SetConfig+0xa4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d003      	beq.n	8004044 <TIM_OC4_SetConfig+0x68>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a11      	ldr	r2, [pc, #68]	; (8004084 <TIM_OC4_SetConfig+0xa8>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d109      	bne.n	8004058 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800404a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	019b      	lsls	r3, r3, #6
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	621a      	str	r2, [r3, #32]
}
 8004072:	bf00      	nop
 8004074:	371c      	adds	r7, #28
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	40010000 	.word	0x40010000
 8004084:	40010400 	.word	0x40010400

08004088 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	f023 0201 	bic.w	r2, r3, #1
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f023 030a 	bic.w	r3, r3, #10
 80040c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	621a      	str	r2, [r3, #32]
}
 80040da:	bf00      	nop
 80040dc:	371c      	adds	r7, #28
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b087      	sub	sp, #28
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	60f8      	str	r0, [r7, #12]
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	f023 0210 	bic.w	r2, r3, #16
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a1b      	ldr	r3, [r3, #32]
 8004108:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004110:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	031b      	lsls	r3, r3, #12
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4313      	orrs	r3, r2
 800411a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004122:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	621a      	str	r2, [r3, #32]
}
 800413a:	bf00      	nop
 800413c:	371c      	adds	r7, #28
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004146:	b480      	push	{r7}
 8004148:	b085      	sub	sp, #20
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800415e:	683a      	ldr	r2, [r7, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4313      	orrs	r3, r2
 8004164:	f043 0307 	orr.w	r3, r3, #7
 8004168:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	609a      	str	r2, [r3, #8]
}
 8004170:	bf00      	nop
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	607a      	str	r2, [r7, #4]
 8004188:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004196:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	021a      	lsls	r2, r3, #8
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	431a      	orrs	r2, r3
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	609a      	str	r2, [r3, #8]
}
 80041b0:	bf00      	nop
 80041b2:	371c      	adds	r7, #28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d101      	bne.n	80041d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e05a      	b.n	800428a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a21      	ldr	r2, [pc, #132]	; (8004298 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d022      	beq.n	800425e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004220:	d01d      	beq.n	800425e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a1d      	ldr	r2, [pc, #116]	; (800429c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d018      	beq.n	800425e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a1b      	ldr	r2, [pc, #108]	; (80042a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d013      	beq.n	800425e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a1a      	ldr	r2, [pc, #104]	; (80042a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d00e      	beq.n	800425e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a18      	ldr	r2, [pc, #96]	; (80042a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d009      	beq.n	800425e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a17      	ldr	r2, [pc, #92]	; (80042ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d004      	beq.n	800425e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a15      	ldr	r2, [pc, #84]	; (80042b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d10c      	bne.n	8004278 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004264:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	4313      	orrs	r3, r2
 800426e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3714      	adds	r7, #20
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40010000 	.word	0x40010000
 800429c:	40000400 	.word	0x40000400
 80042a0:	40000800 	.word	0x40000800
 80042a4:	40000c00 	.word	0x40000c00
 80042a8:	40010400 	.word	0x40010400
 80042ac:	40014000 	.word	0x40014000
 80042b0:	40001800 	.word	0x40001800

080042b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e03f      	b.n	800436e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d106      	bne.n	8004308 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7fd f9a0 	bl	8001648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2224      	movs	r2, #36	; 0x24
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68da      	ldr	r2, [r3, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800431e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 fb3f 	bl	80049a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	691a      	ldr	r2, [r3, #16]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004334:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004344:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004354:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b08a      	sub	sp, #40	; 0x28
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004398:	2300      	movs	r3, #0
 800439a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800439c:	2300      	movs	r3, #0
 800439e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	f003 030f 	and.w	r3, r3, #15
 80043a6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10d      	bne.n	80043ca <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	f003 0320 	and.w	r3, r3, #32
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d008      	beq.n	80043ca <HAL_UART_IRQHandler+0x52>
 80043b8:	6a3b      	ldr	r3, [r7, #32]
 80043ba:	f003 0320 	and.w	r3, r3, #32
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d003      	beq.n	80043ca <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fa57 	bl	8004876 <UART_Receive_IT>
      return;
 80043c8:	e17c      	b.n	80046c4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 80b1 	beq.w	8004534 <HAL_UART_IRQHandler+0x1bc>
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d105      	bne.n	80043e8 <HAL_UART_IRQHandler+0x70>
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 80a6 	beq.w	8004534 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <HAL_UART_IRQHandler+0x90>
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	f043 0201 	orr.w	r2, r3, #1
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	f003 0304 	and.w	r3, r3, #4
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <HAL_UART_IRQHandler+0xb0>
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	d005      	beq.n	8004428 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	f043 0202 	orr.w	r2, r3, #2
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <HAL_UART_IRQHandler+0xd0>
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004440:	f043 0204 	orr.w	r2, r3, #4
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	f003 0308 	and.w	r3, r3, #8
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00f      	beq.n	8004472 <HAL_UART_IRQHandler+0xfa>
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	f003 0320 	and.w	r3, r3, #32
 8004458:	2b00      	cmp	r3, #0
 800445a:	d104      	bne.n	8004466 <HAL_UART_IRQHandler+0xee>
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	f003 0301 	and.w	r3, r3, #1
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	f043 0208 	orr.w	r2, r3, #8
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 811f 	beq.w	80046ba <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	f003 0320 	and.w	r3, r3, #32
 8004482:	2b00      	cmp	r3, #0
 8004484:	d007      	beq.n	8004496 <HAL_UART_IRQHandler+0x11e>
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 f9f0 	bl	8004876 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044a0:	2b40      	cmp	r3, #64	; 0x40
 80044a2:	bf0c      	ite	eq
 80044a4:	2301      	moveq	r3, #1
 80044a6:	2300      	movne	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d102      	bne.n	80044be <HAL_UART_IRQHandler+0x146>
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d031      	beq.n	8004522 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f930 	bl	8004724 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ce:	2b40      	cmp	r3, #64	; 0x40
 80044d0:	d123      	bne.n	800451a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	695a      	ldr	r2, [r3, #20]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044e0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d013      	beq.n	8004512 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	4a77      	ldr	r2, [pc, #476]	; (80046cc <HAL_UART_IRQHandler+0x354>)
 80044f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7fe f8aa 	bl	8002650 <HAL_DMA_Abort_IT>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d016      	beq.n	8004530 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800450c:	4610      	mov	r0, r2
 800450e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004510:	e00e      	b.n	8004530 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f8f0 	bl	80046f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004518:	e00a      	b.n	8004530 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f8ec 	bl	80046f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004520:	e006      	b.n	8004530 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f8e8 	bl	80046f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800452e:	e0c4      	b.n	80046ba <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004530:	bf00      	nop
    return;
 8004532:	e0c2      	b.n	80046ba <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004538:	2b01      	cmp	r3, #1
 800453a:	f040 80a2 	bne.w	8004682 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800453e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004540:	f003 0310 	and.w	r3, r3, #16
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 809c 	beq.w	8004682 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	f003 0310 	and.w	r3, r3, #16
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 8096 	beq.w	8004682 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004556:	2300      	movs	r3, #0
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	60fb      	str	r3, [r7, #12]
 800456a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004576:	2b40      	cmp	r3, #64	; 0x40
 8004578:	d14f      	bne.n	800461a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004584:	8a3b      	ldrh	r3, [r7, #16]
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 8099 	beq.w	80046be <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004590:	8a3a      	ldrh	r2, [r7, #16]
 8004592:	429a      	cmp	r2, r3
 8004594:	f080 8093 	bcs.w	80046be <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	8a3a      	ldrh	r2, [r7, #16]
 800459c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045a8:	d02b      	beq.n	8004602 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68da      	ldr	r2, [r3, #12]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045b8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695a      	ldr	r2, [r3, #20]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f022 0201 	bic.w	r2, r2, #1
 80045c8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695a      	ldr	r2, [r3, #20]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045d8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 0210 	bic.w	r2, r2, #16
 80045f6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fd ffb7 	bl	8002570 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800460a:	b29b      	uxth	r3, r3
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	b29b      	uxth	r3, r3
 8004610:	4619      	mov	r1, r3
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f87a 	bl	800470c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004618:	e051      	b.n	80046be <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004622:	b29b      	uxth	r3, r3
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800462c:	b29b      	uxth	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d047      	beq.n	80046c2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004632:	8a7b      	ldrh	r3, [r7, #18]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d044      	beq.n	80046c2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68da      	ldr	r2, [r3, #12]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004646:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695a      	ldr	r2, [r3, #20]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 0201 	bic.w	r2, r2, #1
 8004656:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2220      	movs	r2, #32
 800465c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0210 	bic.w	r2, r2, #16
 8004674:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004676:	8a7b      	ldrh	r3, [r7, #18]
 8004678:	4619      	mov	r1, r3
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f846 	bl	800470c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004680:	e01f      	b.n	80046c2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004688:	2b00      	cmp	r3, #0
 800468a:	d008      	beq.n	800469e <HAL_UART_IRQHandler+0x326>
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f885 	bl	80047a6 <UART_Transmit_IT>
    return;
 800469c:	e012      	b.n	80046c4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800469e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00d      	beq.n	80046c4 <HAL_UART_IRQHandler+0x34c>
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d008      	beq.n	80046c4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f8c7 	bl	8004846 <UART_EndTransmit_IT>
    return;
 80046b8:	e004      	b.n	80046c4 <HAL_UART_IRQHandler+0x34c>
    return;
 80046ba:	bf00      	nop
 80046bc:	e002      	b.n	80046c4 <HAL_UART_IRQHandler+0x34c>
      return;
 80046be:	bf00      	nop
 80046c0:	e000      	b.n	80046c4 <HAL_UART_IRQHandler+0x34c>
      return;
 80046c2:	bf00      	nop
  }
}
 80046c4:	3728      	adds	r7, #40	; 0x28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	0800477f 	.word	0x0800477f

080046d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	460b      	mov	r3, r1
 8004716:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800473a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695a      	ldr	r2, [r3, #20]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0201 	bic.w	r2, r2, #1
 800474a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	2b01      	cmp	r3, #1
 8004752:	d107      	bne.n	8004764 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f022 0210 	bic.w	r2, r2, #16
 8004762:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2220      	movs	r2, #32
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2200      	movs	r2, #0
 8004790:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f7ff ffad 	bl	80046f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800479e:	bf00      	nop
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b085      	sub	sp, #20
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b21      	cmp	r3, #33	; 0x21
 80047b8:	d13e      	bne.n	8004838 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c2:	d114      	bne.n	80047ee <UART_Transmit_IT+0x48>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d110      	bne.n	80047ee <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	461a      	mov	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	1c9a      	adds	r2, r3, #2
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	621a      	str	r2, [r3, #32]
 80047ec:	e008      	b.n	8004800 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	1c59      	adds	r1, r3, #1
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6211      	str	r1, [r2, #32]
 80047f8:	781a      	ldrb	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004804:	b29b      	uxth	r3, r3
 8004806:	3b01      	subs	r3, #1
 8004808:	b29b      	uxth	r3, r3
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	4619      	mov	r1, r3
 800480e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10f      	bne.n	8004834 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004822:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68da      	ldr	r2, [r3, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004832:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004834:	2300      	movs	r3, #0
 8004836:	e000      	b.n	800483a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004838:	2302      	movs	r3, #2
  }
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b082      	sub	sp, #8
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68da      	ldr	r2, [r3, #12]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800485c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2220      	movs	r2, #32
 8004862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7ff ff32 	bl	80046d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b084      	sub	sp, #16
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b22      	cmp	r3, #34	; 0x22
 8004888:	f040 8087 	bne.w	800499a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004894:	d117      	bne.n	80048c6 <UART_Receive_IT+0x50>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d113      	bne.n	80048c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800489e:	2300      	movs	r3, #0
 80048a0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048be:	1c9a      	adds	r2, r3, #2
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	629a      	str	r2, [r3, #40]	; 0x28
 80048c4:	e026      	b.n	8004914 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ca:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048d8:	d007      	beq.n	80048ea <UART_Receive_IT+0x74>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10a      	bne.n	80048f8 <UART_Receive_IT+0x82>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d106      	bne.n	80048f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	701a      	strb	r2, [r3, #0]
 80048f6:	e008      	b.n	800490a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004904:	b2da      	uxtb	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004918:	b29b      	uxth	r3, r3
 800491a:	3b01      	subs	r3, #1
 800491c:	b29b      	uxth	r3, r3
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	4619      	mov	r1, r3
 8004922:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004924:	2b00      	cmp	r3, #0
 8004926:	d136      	bne.n	8004996 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0220 	bic.w	r2, r2, #32
 8004936:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004946:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695a      	ldr	r2, [r3, #20]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 0201 	bic.w	r2, r2, #1
 8004956:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2220      	movs	r2, #32
 800495c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004964:	2b01      	cmp	r3, #1
 8004966:	d10e      	bne.n	8004986 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0210 	bic.w	r2, r2, #16
 8004976:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800497c:	4619      	mov	r1, r3
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7ff fec4 	bl	800470c <HAL_UARTEx_RxEventCallback>
 8004984:	e002      	b.n	800498c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7ff feac 	bl	80046e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	e002      	b.n	800499c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	e000      	b.n	800499c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800499a:	2302      	movs	r3, #2
  }
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a8:	b09f      	sub	sp, #124	; 0x7c
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ba:	68d9      	ldr	r1, [r3, #12]
 80049bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	ea40 0301 	orr.w	r3, r0, r1
 80049c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c8:	689a      	ldr	r2, [r3, #8]
 80049ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	431a      	orrs	r2, r3
 80049d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	431a      	orrs	r2, r3
 80049d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d8:	69db      	ldr	r3, [r3, #28]
 80049da:	4313      	orrs	r3, r2
 80049dc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80049de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049e8:	f021 010c 	bic.w	r1, r1, #12
 80049ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049f2:	430b      	orrs	r3, r1
 80049f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a02:	6999      	ldr	r1, [r3, #24]
 8004a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	ea40 0301 	orr.w	r3, r0, r1
 8004a0c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	4bc5      	ldr	r3, [pc, #788]	; (8004d28 <UART_SetConfig+0x384>)
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d004      	beq.n	8004a22 <UART_SetConfig+0x7e>
 8004a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	4bc3      	ldr	r3, [pc, #780]	; (8004d2c <UART_SetConfig+0x388>)
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d103      	bne.n	8004a2a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a22:	f7fe fc67 	bl	80032f4 <HAL_RCC_GetPCLK2Freq>
 8004a26:	6778      	str	r0, [r7, #116]	; 0x74
 8004a28:	e002      	b.n	8004a30 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a2a:	f7fe fc4f 	bl	80032cc <HAL_RCC_GetPCLK1Freq>
 8004a2e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a32:	69db      	ldr	r3, [r3, #28]
 8004a34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a38:	f040 80b6 	bne.w	8004ba8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a3e:	461c      	mov	r4, r3
 8004a40:	f04f 0500 	mov.w	r5, #0
 8004a44:	4622      	mov	r2, r4
 8004a46:	462b      	mov	r3, r5
 8004a48:	1891      	adds	r1, r2, r2
 8004a4a:	6439      	str	r1, [r7, #64]	; 0x40
 8004a4c:	415b      	adcs	r3, r3
 8004a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8004a50:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a54:	1912      	adds	r2, r2, r4
 8004a56:	eb45 0303 	adc.w	r3, r5, r3
 8004a5a:	f04f 0000 	mov.w	r0, #0
 8004a5e:	f04f 0100 	mov.w	r1, #0
 8004a62:	00d9      	lsls	r1, r3, #3
 8004a64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a68:	00d0      	lsls	r0, r2, #3
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	1911      	adds	r1, r2, r4
 8004a70:	6639      	str	r1, [r7, #96]	; 0x60
 8004a72:	416b      	adcs	r3, r5
 8004a74:	667b      	str	r3, [r7, #100]	; 0x64
 8004a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f04f 0300 	mov.w	r3, #0
 8004a80:	1891      	adds	r1, r2, r2
 8004a82:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a84:	415b      	adcs	r3, r3
 8004a86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a8c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004a90:	f7fc f88a 	bl	8000ba8 <__aeabi_uldivmod>
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	4ba5      	ldr	r3, [pc, #660]	; (8004d30 <UART_SetConfig+0x38c>)
 8004a9a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a9e:	095b      	lsrs	r3, r3, #5
 8004aa0:	011e      	lsls	r6, r3, #4
 8004aa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aa4:	461c      	mov	r4, r3
 8004aa6:	f04f 0500 	mov.w	r5, #0
 8004aaa:	4622      	mov	r2, r4
 8004aac:	462b      	mov	r3, r5
 8004aae:	1891      	adds	r1, r2, r2
 8004ab0:	6339      	str	r1, [r7, #48]	; 0x30
 8004ab2:	415b      	adcs	r3, r3
 8004ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ab6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004aba:	1912      	adds	r2, r2, r4
 8004abc:	eb45 0303 	adc.w	r3, r5, r3
 8004ac0:	f04f 0000 	mov.w	r0, #0
 8004ac4:	f04f 0100 	mov.w	r1, #0
 8004ac8:	00d9      	lsls	r1, r3, #3
 8004aca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ace:	00d0      	lsls	r0, r2, #3
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	1911      	adds	r1, r2, r4
 8004ad6:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ad8:	416b      	adcs	r3, r5
 8004ada:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	1891      	adds	r1, r2, r2
 8004ae8:	62b9      	str	r1, [r7, #40]	; 0x28
 8004aea:	415b      	adcs	r3, r3
 8004aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004af2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004af6:	f7fc f857 	bl	8000ba8 <__aeabi_uldivmod>
 8004afa:	4602      	mov	r2, r0
 8004afc:	460b      	mov	r3, r1
 8004afe:	4b8c      	ldr	r3, [pc, #560]	; (8004d30 <UART_SetConfig+0x38c>)
 8004b00:	fba3 1302 	umull	r1, r3, r3, r2
 8004b04:	095b      	lsrs	r3, r3, #5
 8004b06:	2164      	movs	r1, #100	; 0x64
 8004b08:	fb01 f303 	mul.w	r3, r1, r3
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	00db      	lsls	r3, r3, #3
 8004b10:	3332      	adds	r3, #50	; 0x32
 8004b12:	4a87      	ldr	r2, [pc, #540]	; (8004d30 <UART_SetConfig+0x38c>)
 8004b14:	fba2 2303 	umull	r2, r3, r2, r3
 8004b18:	095b      	lsrs	r3, r3, #5
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b20:	441e      	add	r6, r3
 8004b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b24:	4618      	mov	r0, r3
 8004b26:	f04f 0100 	mov.w	r1, #0
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	1894      	adds	r4, r2, r2
 8004b30:	623c      	str	r4, [r7, #32]
 8004b32:	415b      	adcs	r3, r3
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
 8004b36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b3a:	1812      	adds	r2, r2, r0
 8004b3c:	eb41 0303 	adc.w	r3, r1, r3
 8004b40:	f04f 0400 	mov.w	r4, #0
 8004b44:	f04f 0500 	mov.w	r5, #0
 8004b48:	00dd      	lsls	r5, r3, #3
 8004b4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b4e:	00d4      	lsls	r4, r2, #3
 8004b50:	4622      	mov	r2, r4
 8004b52:	462b      	mov	r3, r5
 8004b54:	1814      	adds	r4, r2, r0
 8004b56:	653c      	str	r4, [r7, #80]	; 0x50
 8004b58:	414b      	adcs	r3, r1
 8004b5a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	461a      	mov	r2, r3
 8004b62:	f04f 0300 	mov.w	r3, #0
 8004b66:	1891      	adds	r1, r2, r2
 8004b68:	61b9      	str	r1, [r7, #24]
 8004b6a:	415b      	adcs	r3, r3
 8004b6c:	61fb      	str	r3, [r7, #28]
 8004b6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b72:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004b76:	f7fc f817 	bl	8000ba8 <__aeabi_uldivmod>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4b6c      	ldr	r3, [pc, #432]	; (8004d30 <UART_SetConfig+0x38c>)
 8004b80:	fba3 1302 	umull	r1, r3, r3, r2
 8004b84:	095b      	lsrs	r3, r3, #5
 8004b86:	2164      	movs	r1, #100	; 0x64
 8004b88:	fb01 f303 	mul.w	r3, r1, r3
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	3332      	adds	r3, #50	; 0x32
 8004b92:	4a67      	ldr	r2, [pc, #412]	; (8004d30 <UART_SetConfig+0x38c>)
 8004b94:	fba2 2303 	umull	r2, r3, r2, r3
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	f003 0207 	and.w	r2, r3, #7
 8004b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4432      	add	r2, r6
 8004ba4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ba6:	e0b9      	b.n	8004d1c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004baa:	461c      	mov	r4, r3
 8004bac:	f04f 0500 	mov.w	r5, #0
 8004bb0:	4622      	mov	r2, r4
 8004bb2:	462b      	mov	r3, r5
 8004bb4:	1891      	adds	r1, r2, r2
 8004bb6:	6139      	str	r1, [r7, #16]
 8004bb8:	415b      	adcs	r3, r3
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004bc0:	1912      	adds	r2, r2, r4
 8004bc2:	eb45 0303 	adc.w	r3, r5, r3
 8004bc6:	f04f 0000 	mov.w	r0, #0
 8004bca:	f04f 0100 	mov.w	r1, #0
 8004bce:	00d9      	lsls	r1, r3, #3
 8004bd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bd4:	00d0      	lsls	r0, r2, #3
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	eb12 0804 	adds.w	r8, r2, r4
 8004bde:	eb43 0905 	adc.w	r9, r3, r5
 8004be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f04f 0100 	mov.w	r1, #0
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	f04f 0300 	mov.w	r3, #0
 8004bf4:	008b      	lsls	r3, r1, #2
 8004bf6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004bfa:	0082      	lsls	r2, r0, #2
 8004bfc:	4640      	mov	r0, r8
 8004bfe:	4649      	mov	r1, r9
 8004c00:	f7fb ffd2 	bl	8000ba8 <__aeabi_uldivmod>
 8004c04:	4602      	mov	r2, r0
 8004c06:	460b      	mov	r3, r1
 8004c08:	4b49      	ldr	r3, [pc, #292]	; (8004d30 <UART_SetConfig+0x38c>)
 8004c0a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c0e:	095b      	lsrs	r3, r3, #5
 8004c10:	011e      	lsls	r6, r3, #4
 8004c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c14:	4618      	mov	r0, r3
 8004c16:	f04f 0100 	mov.w	r1, #0
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	1894      	adds	r4, r2, r2
 8004c20:	60bc      	str	r4, [r7, #8]
 8004c22:	415b      	adcs	r3, r3
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c2a:	1812      	adds	r2, r2, r0
 8004c2c:	eb41 0303 	adc.w	r3, r1, r3
 8004c30:	f04f 0400 	mov.w	r4, #0
 8004c34:	f04f 0500 	mov.w	r5, #0
 8004c38:	00dd      	lsls	r5, r3, #3
 8004c3a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c3e:	00d4      	lsls	r4, r2, #3
 8004c40:	4622      	mov	r2, r4
 8004c42:	462b      	mov	r3, r5
 8004c44:	1814      	adds	r4, r2, r0
 8004c46:	64bc      	str	r4, [r7, #72]	; 0x48
 8004c48:	414b      	adcs	r3, r1
 8004c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f04f 0100 	mov.w	r1, #0
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	f04f 0300 	mov.w	r3, #0
 8004c5e:	008b      	lsls	r3, r1, #2
 8004c60:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c64:	0082      	lsls	r2, r0, #2
 8004c66:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004c6a:	f7fb ff9d 	bl	8000ba8 <__aeabi_uldivmod>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4b2f      	ldr	r3, [pc, #188]	; (8004d30 <UART_SetConfig+0x38c>)
 8004c74:	fba3 1302 	umull	r1, r3, r3, r2
 8004c78:	095b      	lsrs	r3, r3, #5
 8004c7a:	2164      	movs	r1, #100	; 0x64
 8004c7c:	fb01 f303 	mul.w	r3, r1, r3
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	3332      	adds	r3, #50	; 0x32
 8004c86:	4a2a      	ldr	r2, [pc, #168]	; (8004d30 <UART_SetConfig+0x38c>)
 8004c88:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8c:	095b      	lsrs	r3, r3, #5
 8004c8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c92:	441e      	add	r6, r3
 8004c94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c96:	4618      	mov	r0, r3
 8004c98:	f04f 0100 	mov.w	r1, #0
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	1894      	adds	r4, r2, r2
 8004ca2:	603c      	str	r4, [r7, #0]
 8004ca4:	415b      	adcs	r3, r3
 8004ca6:	607b      	str	r3, [r7, #4]
 8004ca8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cac:	1812      	adds	r2, r2, r0
 8004cae:	eb41 0303 	adc.w	r3, r1, r3
 8004cb2:	f04f 0400 	mov.w	r4, #0
 8004cb6:	f04f 0500 	mov.w	r5, #0
 8004cba:	00dd      	lsls	r5, r3, #3
 8004cbc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004cc0:	00d4      	lsls	r4, r2, #3
 8004cc2:	4622      	mov	r2, r4
 8004cc4:	462b      	mov	r3, r5
 8004cc6:	eb12 0a00 	adds.w	sl, r2, r0
 8004cca:	eb43 0b01 	adc.w	fp, r3, r1
 8004cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f04f 0100 	mov.w	r1, #0
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	008b      	lsls	r3, r1, #2
 8004ce2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004ce6:	0082      	lsls	r2, r0, #2
 8004ce8:	4650      	mov	r0, sl
 8004cea:	4659      	mov	r1, fp
 8004cec:	f7fb ff5c 	bl	8000ba8 <__aeabi_uldivmod>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	4b0e      	ldr	r3, [pc, #56]	; (8004d30 <UART_SetConfig+0x38c>)
 8004cf6:	fba3 1302 	umull	r1, r3, r3, r2
 8004cfa:	095b      	lsrs	r3, r3, #5
 8004cfc:	2164      	movs	r1, #100	; 0x64
 8004cfe:	fb01 f303 	mul.w	r3, r1, r3
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	3332      	adds	r3, #50	; 0x32
 8004d08:	4a09      	ldr	r2, [pc, #36]	; (8004d30 <UART_SetConfig+0x38c>)
 8004d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0e:	095b      	lsrs	r3, r3, #5
 8004d10:	f003 020f 	and.w	r2, r3, #15
 8004d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4432      	add	r2, r6
 8004d1a:	609a      	str	r2, [r3, #8]
}
 8004d1c:	bf00      	nop
 8004d1e:	377c      	adds	r7, #124	; 0x7c
 8004d20:	46bd      	mov	sp, r7
 8004d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d26:	bf00      	nop
 8004d28:	40011000 	.word	0x40011000
 8004d2c:	40011400 	.word	0x40011400
 8004d30:	51eb851f 	.word	0x51eb851f

08004d34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f103 0208 	add.w	r2, r3, #8
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f04f 32ff 	mov.w	r2, #4294967295
 8004d4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f103 0208 	add.w	r2, r3, #8
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f103 0208 	add.w	r2, r3, #8
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b085      	sub	sp, #20
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
 8004d96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	1c5a      	adds	r2, r3, #1
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	601a      	str	r2, [r3, #0]
}
 8004dca:	bf00      	nop
 8004dcc:	3714      	adds	r7, #20
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr

08004dd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	b085      	sub	sp, #20
 8004dda:	af00      	add	r7, sp, #0
 8004ddc:	6078      	str	r0, [r7, #4]
 8004dde:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dec:	d103      	bne.n	8004df6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	e00c      	b.n	8004e10 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	3308      	adds	r3, #8
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	e002      	b.n	8004e04 <vListInsert+0x2e>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d2f6      	bcs.n	8004dfe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	601a      	str	r2, [r3, #0]
}
 8004e3c:	bf00      	nop
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	6892      	ldr	r2, [r2, #8]
 8004e5e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6852      	ldr	r2, [r2, #4]
 8004e68:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d103      	bne.n	8004e7c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	1e5a      	subs	r2, r3, #1
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10a      	bne.n	8004ec6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb4:	f383 8811 	msr	BASEPRI, r3
 8004eb8:	f3bf 8f6f 	isb	sy
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004ec2:	bf00      	nop
 8004ec4:	e7fe      	b.n	8004ec4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004ec6:	f001 fb1d 	bl	8006504 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed2:	68f9      	ldr	r1, [r7, #12]
 8004ed4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ed6:	fb01 f303 	mul.w	r3, r1, r3
 8004eda:	441a      	add	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	68f9      	ldr	r1, [r7, #12]
 8004efa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004efc:	fb01 f303 	mul.w	r3, r1, r3
 8004f00:	441a      	add	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	22ff      	movs	r2, #255	; 0xff
 8004f0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	22ff      	movs	r2, #255	; 0xff
 8004f12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d114      	bne.n	8004f46 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d01a      	beq.n	8004f5a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	3310      	adds	r3, #16
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 fef5 	bl	8005d18 <xTaskRemoveFromEventList>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d012      	beq.n	8004f5a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004f34:	4b0c      	ldr	r3, [pc, #48]	; (8004f68 <xQueueGenericReset+0xcc>)
 8004f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	f3bf 8f6f 	isb	sy
 8004f44:	e009      	b.n	8004f5a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	3310      	adds	r3, #16
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff fef2 	bl	8004d34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	3324      	adds	r3, #36	; 0x24
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7ff feed 	bl	8004d34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004f5a:	f001 fb03 	bl	8006564 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004f5e:	2301      	movs	r3, #1
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	e000ed04 	.word	0xe000ed04

08004f6c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b08a      	sub	sp, #40	; 0x28
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	4613      	mov	r3, r2
 8004f78:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10a      	bne.n	8004f96 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	613b      	str	r3, [r7, #16]
}
 8004f92:	bf00      	nop
 8004f94:	e7fe      	b.n	8004f94 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	fb02 f303 	mul.w	r3, r2, r3
 8004f9e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	3348      	adds	r3, #72	; 0x48
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f001 fbcf 	bl	8006748 <pvPortMalloc>
 8004faa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d011      	beq.n	8004fd6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	3348      	adds	r3, #72	; 0x48
 8004fba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fc4:	79fa      	ldrb	r2, [r7, #7]
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	68b9      	ldr	r1, [r7, #8]
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 f805 	bl	8004fe0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004fd6:	69bb      	ldr	r3, [r7, #24]
	}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3720      	adds	r7, #32
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
 8004fec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d103      	bne.n	8004ffc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	e002      	b.n	8005002 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800500e:	2101      	movs	r1, #1
 8005010:	69b8      	ldr	r0, [r7, #24]
 8005012:	f7ff ff43 	bl	8004e9c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005016:	bf00      	nop
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <xQueueGenericSendFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800501e:	b580      	push	{r7, lr}
 8005020:	b090      	sub	sp, #64	; 0x40
 8005022:	af00      	add	r7, sp, #0
 8005024:	60f8      	str	r0, [r7, #12]
 8005026:	60b9      	str	r1, [r7, #8]
 8005028:	607a      	str	r2, [r7, #4]
 800502a:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005032:	2b00      	cmp	r3, #0
 8005034:	d10a      	bne.n	800504c <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005048:	bf00      	nop
 800504a:	e7fe      	b.n	800504a <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d103      	bne.n	800505a <xQueueGenericSendFromISR+0x3c>
 8005052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <xQueueGenericSendFromISR+0x40>
 800505a:	2301      	movs	r3, #1
 800505c:	e000      	b.n	8005060 <xQueueGenericSendFromISR+0x42>
 800505e:	2300      	movs	r3, #0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10a      	bne.n	800507a <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005068:	f383 8811 	msr	BASEPRI, r3
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f3bf 8f4f 	dsb	sy
 8005074:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005076:	bf00      	nop
 8005078:	e7fe      	b.n	8005078 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b02      	cmp	r3, #2
 800507e:	d103      	bne.n	8005088 <xQueueGenericSendFromISR+0x6a>
 8005080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005084:	2b01      	cmp	r3, #1
 8005086:	d101      	bne.n	800508c <xQueueGenericSendFromISR+0x6e>
 8005088:	2301      	movs	r3, #1
 800508a:	e000      	b.n	800508e <xQueueGenericSendFromISR+0x70>
 800508c:	2300      	movs	r3, #0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d10a      	bne.n	80050a8 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005096:	f383 8811 	msr	BASEPRI, r3
 800509a:	f3bf 8f6f 	isb	sy
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	623b      	str	r3, [r7, #32]
}
 80050a4:	bf00      	nop
 80050a6:	e7fe      	b.n	80050a6 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050a8:	f001 fb0e 	bl	80066c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80050ac:	f3ef 8211 	mrs	r2, BASEPRI
 80050b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	61fa      	str	r2, [r7, #28]
 80050c2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80050c4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050c6:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d302      	bcc.n	80050da <xQueueGenericSendFromISR+0xbc>
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d12f      	bne.n	800513a <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80050da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e8:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	68b9      	ldr	r1, [r7, #8]
 80050ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80050f0:	f000 f910 	bl	8005314 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80050f4:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80050f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050fc:	d112      	bne.n	8005124 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	2b00      	cmp	r3, #0
 8005104:	d016      	beq.n	8005134 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005108:	3324      	adds	r3, #36	; 0x24
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fe04 	bl	8005d18 <xTaskRemoveFromEventList>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00e      	beq.n	8005134 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00b      	beq.n	8005134 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	e007      	b.n	8005134 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005124:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005128:	3301      	adds	r3, #1
 800512a:	b2db      	uxtb	r3, r3
 800512c:	b25a      	sxtb	r2, r3
 800512e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005134:	2301      	movs	r3, #1
 8005136:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005138:	e001      	b.n	800513e <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800513a:	2300      	movs	r3, #0
 800513c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800513e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005140:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005148:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800514a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800514c:	4618      	mov	r0, r3
 800514e:	3740      	adds	r7, #64	; 0x40
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b08c      	sub	sp, #48	; 0x30
 8005158:	af00      	add	r7, sp, #0
 800515a:	60f8      	str	r0, [r7, #12]
 800515c:	60b9      	str	r1, [r7, #8]
 800515e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005160:	2300      	movs	r3, #0
 8005162:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10a      	bne.n	8005184 <xQueueReceive+0x30>
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	623b      	str	r3, [r7, #32]
}
 8005180:	bf00      	nop
 8005182:	e7fe      	b.n	8005182 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d103      	bne.n	8005192 <xQueueReceive+0x3e>
 800518a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <xQueueReceive+0x42>
 8005192:	2301      	movs	r3, #1
 8005194:	e000      	b.n	8005198 <xQueueReceive+0x44>
 8005196:	2300      	movs	r3, #0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10a      	bne.n	80051b2 <xQueueReceive+0x5e>
	__asm volatile
 800519c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a0:	f383 8811 	msr	BASEPRI, r3
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	f3bf 8f4f 	dsb	sy
 80051ac:	61fb      	str	r3, [r7, #28]
}
 80051ae:	bf00      	nop
 80051b0:	e7fe      	b.n	80051b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051b2:	f000 ff6d 	bl	8006090 <xTaskGetSchedulerState>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d102      	bne.n	80051c2 <xQueueReceive+0x6e>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <xQueueReceive+0x72>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e000      	b.n	80051c8 <xQueueReceive+0x74>
 80051c6:	2300      	movs	r3, #0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10a      	bne.n	80051e2 <xQueueReceive+0x8e>
	__asm volatile
 80051cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	61bb      	str	r3, [r7, #24]
}
 80051de:	bf00      	nop
 80051e0:	e7fe      	b.n	80051e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051e2:	f001 f98f 	bl	8006504 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d01f      	beq.n	8005232 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80051f2:	68b9      	ldr	r1, [r7, #8]
 80051f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051f6:	f000 f8f7 	bl	80053e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	1e5a      	subs	r2, r3, #1
 80051fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005200:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00f      	beq.n	800522a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800520a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520c:	3310      	adds	r3, #16
 800520e:	4618      	mov	r0, r3
 8005210:	f000 fd82 	bl	8005d18 <xTaskRemoveFromEventList>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d007      	beq.n	800522a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800521a:	4b3d      	ldr	r3, [pc, #244]	; (8005310 <xQueueReceive+0x1bc>)
 800521c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800522a:	f001 f99b 	bl	8006564 <vPortExitCritical>
				return pdPASS;
 800522e:	2301      	movs	r3, #1
 8005230:	e069      	b.n	8005306 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d103      	bne.n	8005240 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005238:	f001 f994 	bl	8006564 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800523c:	2300      	movs	r3, #0
 800523e:	e062      	b.n	8005306 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005242:	2b00      	cmp	r3, #0
 8005244:	d106      	bne.n	8005254 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005246:	f107 0310 	add.w	r3, r7, #16
 800524a:	4618      	mov	r0, r3
 800524c:	f000 fdc6 	bl	8005ddc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005250:	2301      	movs	r3, #1
 8005252:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005254:	f001 f986 	bl	8006564 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005258:	f000 fb7c 	bl	8005954 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800525c:	f001 f952 	bl	8006504 <vPortEnterCritical>
 8005260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005262:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005266:	b25b      	sxtb	r3, r3
 8005268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526c:	d103      	bne.n	8005276 <xQueueReceive+0x122>
 800526e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005278:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800527c:	b25b      	sxtb	r3, r3
 800527e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005282:	d103      	bne.n	800528c <xQueueReceive+0x138>
 8005284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800528c:	f001 f96a 	bl	8006564 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005290:	1d3a      	adds	r2, r7, #4
 8005292:	f107 0310 	add.w	r3, r7, #16
 8005296:	4611      	mov	r1, r2
 8005298:	4618      	mov	r0, r3
 800529a:	f000 fdb5 	bl	8005e08 <xTaskCheckForTimeOut>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d123      	bne.n	80052ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052a6:	f000 f917 	bl	80054d8 <prvIsQueueEmpty>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d017      	beq.n	80052e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80052b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b2:	3324      	adds	r3, #36	; 0x24
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	4611      	mov	r1, r2
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 fd09 	bl	8005cd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80052be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052c0:	f000 f8b8 	bl	8005434 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80052c4:	f000 fb54 	bl	8005970 <xTaskResumeAll>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d189      	bne.n	80051e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80052ce:	4b10      	ldr	r3, [pc, #64]	; (8005310 <xQueueReceive+0x1bc>)
 80052d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	f3bf 8f6f 	isb	sy
 80052de:	e780      	b.n	80051e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80052e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052e2:	f000 f8a7 	bl	8005434 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052e6:	f000 fb43 	bl	8005970 <xTaskResumeAll>
 80052ea:	e77a      	b.n	80051e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80052ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052ee:	f000 f8a1 	bl	8005434 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052f2:	f000 fb3d 	bl	8005970 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052f8:	f000 f8ee 	bl	80054d8 <prvIsQueueEmpty>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f43f af6f 	beq.w	80051e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005304:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005306:	4618      	mov	r0, r3
 8005308:	3730      	adds	r7, #48	; 0x30
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	e000ed04 	.word	0xe000ed04

08005314 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b086      	sub	sp, #24
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005320:	2300      	movs	r3, #0
 8005322:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005328:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	d10d      	bne.n	800534e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d14d      	bne.n	80053d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fec4 	bl	80060cc <xTaskPriorityDisinherit>
 8005344:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	609a      	str	r2, [r3, #8]
 800534c:	e043      	b.n	80053d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d119      	bne.n	8005388 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6858      	ldr	r0, [r3, #4]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535c:	461a      	mov	r2, r3
 800535e:	68b9      	ldr	r1, [r7, #8]
 8005360:	f001 fc06 	bl	8006b70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536c:	441a      	add	r2, r3
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	429a      	cmp	r2, r3
 800537c:	d32b      	bcc.n	80053d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	605a      	str	r2, [r3, #4]
 8005386:	e026      	b.n	80053d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	68d8      	ldr	r0, [r3, #12]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005390:	461a      	mov	r2, r3
 8005392:	68b9      	ldr	r1, [r7, #8]
 8005394:	f001 fbec 	bl	8006b70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	68da      	ldr	r2, [r3, #12]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a0:	425b      	negs	r3, r3
 80053a2:	441a      	add	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	68da      	ldr	r2, [r3, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d207      	bcs.n	80053c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053bc:	425b      	negs	r3, r3
 80053be:	441a      	add	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d105      	bne.n	80053d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	3b01      	subs	r3, #1
 80053d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80053de:	697b      	ldr	r3, [r7, #20]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3718      	adds	r7, #24
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d018      	beq.n	800542c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	441a      	add	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	429a      	cmp	r2, r3
 8005412:	d303      	bcc.n	800541c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68d9      	ldr	r1, [r3, #12]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005424:	461a      	mov	r2, r3
 8005426:	6838      	ldr	r0, [r7, #0]
 8005428:	f001 fba2 	bl	8006b70 <memcpy>
	}
}
 800542c:	bf00      	nop
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800543c:	f001 f862 	bl	8006504 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005446:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005448:	e011      	b.n	800546e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800544e:	2b00      	cmp	r3, #0
 8005450:	d012      	beq.n	8005478 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	3324      	adds	r3, #36	; 0x24
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fc5e 	bl	8005d18 <xTaskRemoveFromEventList>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d001      	beq.n	8005466 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005462:	f000 fd33 	bl	8005ecc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005466:	7bfb      	ldrb	r3, [r7, #15]
 8005468:	3b01      	subs	r3, #1
 800546a:	b2db      	uxtb	r3, r3
 800546c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800546e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005472:	2b00      	cmp	r3, #0
 8005474:	dce9      	bgt.n	800544a <prvUnlockQueue+0x16>
 8005476:	e000      	b.n	800547a <prvUnlockQueue+0x46>
					break;
 8005478:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	22ff      	movs	r2, #255	; 0xff
 800547e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005482:	f001 f86f 	bl	8006564 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005486:	f001 f83d 	bl	8006504 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005490:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005492:	e011      	b.n	80054b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d012      	beq.n	80054c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	3310      	adds	r3, #16
 80054a0:	4618      	mov	r0, r3
 80054a2:	f000 fc39 	bl	8005d18 <xTaskRemoveFromEventList>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d001      	beq.n	80054b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80054ac:	f000 fd0e 	bl	8005ecc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80054b0:	7bbb      	ldrb	r3, [r7, #14]
 80054b2:	3b01      	subs	r3, #1
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80054b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	dce9      	bgt.n	8005494 <prvUnlockQueue+0x60>
 80054c0:	e000      	b.n	80054c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80054c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	22ff      	movs	r2, #255	; 0xff
 80054c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80054cc:	f001 f84a 	bl	8006564 <vPortExitCritical>
}
 80054d0:	bf00      	nop
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054e0:	f001 f810 	bl	8006504 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d102      	bne.n	80054f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80054ec:	2301      	movs	r3, #1
 80054ee:	60fb      	str	r3, [r7, #12]
 80054f0:	e001      	b.n	80054f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80054f2:	2300      	movs	r3, #0
 80054f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054f6:	f001 f835 	bl	8006564 <vPortExitCritical>

	return xReturn;
 80054fa:	68fb      	ldr	r3, [r7, #12]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005504:	b580      	push	{r7, lr}
 8005506:	b08e      	sub	sp, #56	; 0x38
 8005508:	af04      	add	r7, sp, #16
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10a      	bne.n	800552e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551c:	f383 8811 	msr	BASEPRI, r3
 8005520:	f3bf 8f6f 	isb	sy
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	623b      	str	r3, [r7, #32]
}
 800552a:	bf00      	nop
 800552c:	e7fe      	b.n	800552c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800552e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10a      	bne.n	800554a <xTaskCreateStatic+0x46>
	__asm volatile
 8005534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	61fb      	str	r3, [r7, #28]
}
 8005546:	bf00      	nop
 8005548:	e7fe      	b.n	8005548 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800554a:	2354      	movs	r3, #84	; 0x54
 800554c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	2b54      	cmp	r3, #84	; 0x54
 8005552:	d00a      	beq.n	800556a <xTaskCreateStatic+0x66>
	__asm volatile
 8005554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	61bb      	str	r3, [r7, #24]
}
 8005566:	bf00      	nop
 8005568:	e7fe      	b.n	8005568 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800556a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800556c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556e:	2b00      	cmp	r3, #0
 8005570:	d01e      	beq.n	80055b0 <xTaskCreateStatic+0xac>
 8005572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005574:	2b00      	cmp	r3, #0
 8005576:	d01b      	beq.n	80055b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800557a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005580:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	2202      	movs	r2, #2
 8005586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800558a:	2300      	movs	r3, #0
 800558c:	9303      	str	r3, [sp, #12]
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	9302      	str	r3, [sp, #8]
 8005592:	f107 0314 	add.w	r3, r7, #20
 8005596:	9301      	str	r3, [sp, #4]
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	68b9      	ldr	r1, [r7, #8]
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f000 f850 	bl	8005648 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055aa:	f000 f8d5 	bl	8005758 <prvAddNewTaskToReadyList>
 80055ae:	e001      	b.n	80055b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80055b0:	2300      	movs	r3, #0
 80055b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80055b4:	697b      	ldr	r3, [r7, #20]
	}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3728      	adds	r7, #40	; 0x28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b08c      	sub	sp, #48	; 0x30
 80055c2:	af04      	add	r7, sp, #16
 80055c4:	60f8      	str	r0, [r7, #12]
 80055c6:	60b9      	str	r1, [r7, #8]
 80055c8:	603b      	str	r3, [r7, #0]
 80055ca:	4613      	mov	r3, r2
 80055cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80055ce:	88fb      	ldrh	r3, [r7, #6]
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4618      	mov	r0, r3
 80055d4:	f001 f8b8 	bl	8006748 <pvPortMalloc>
 80055d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00e      	beq.n	80055fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80055e0:	2054      	movs	r0, #84	; 0x54
 80055e2:	f001 f8b1 	bl	8006748 <pvPortMalloc>
 80055e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	631a      	str	r2, [r3, #48]	; 0x30
 80055f4:	e005      	b.n	8005602 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80055f6:	6978      	ldr	r0, [r7, #20]
 80055f8:	f001 f972 	bl	80068e0 <vPortFree>
 80055fc:	e001      	b.n	8005602 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80055fe:	2300      	movs	r3, #0
 8005600:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d017      	beq.n	8005638 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005610:	88fa      	ldrh	r2, [r7, #6]
 8005612:	2300      	movs	r3, #0
 8005614:	9303      	str	r3, [sp, #12]
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	9302      	str	r3, [sp, #8]
 800561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561c:	9301      	str	r3, [sp, #4]
 800561e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68b9      	ldr	r1, [r7, #8]
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 f80e 	bl	8005648 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800562c:	69f8      	ldr	r0, [r7, #28]
 800562e:	f000 f893 	bl	8005758 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005632:	2301      	movs	r3, #1
 8005634:	61bb      	str	r3, [r7, #24]
 8005636:	e002      	b.n	800563e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005638:	f04f 33ff 	mov.w	r3, #4294967295
 800563c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800563e:	69bb      	ldr	r3, [r7, #24]
	}
 8005640:	4618      	mov	r0, r3
 8005642:	3720      	adds	r7, #32
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b088      	sub	sp, #32
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005660:	3b01      	subs	r3, #1
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	f023 0307 	bic.w	r3, r3, #7
 800566e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00a      	beq.n	8005690 <prvInitialiseNewTask+0x48>
	__asm volatile
 800567a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567e:	f383 8811 	msr	BASEPRI, r3
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	f3bf 8f4f 	dsb	sy
 800568a:	617b      	str	r3, [r7, #20]
}
 800568c:	bf00      	nop
 800568e:	e7fe      	b.n	800568e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d01f      	beq.n	80056d6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005696:	2300      	movs	r3, #0
 8005698:	61fb      	str	r3, [r7, #28]
 800569a:	e012      	b.n	80056c2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	4413      	add	r3, r2
 80056a2:	7819      	ldrb	r1, [r3, #0]
 80056a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	4413      	add	r3, r2
 80056aa:	3334      	adds	r3, #52	; 0x34
 80056ac:	460a      	mov	r2, r1
 80056ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	4413      	add	r3, r2
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d006      	beq.n	80056ca <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	3301      	adds	r3, #1
 80056c0:	61fb      	str	r3, [r7, #28]
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	2b0f      	cmp	r3, #15
 80056c6:	d9e9      	bls.n	800569c <prvInitialiseNewTask+0x54>
 80056c8:	e000      	b.n	80056cc <prvInitialiseNewTask+0x84>
			{
				break;
 80056ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ce:	2200      	movs	r2, #0
 80056d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056d4:	e003      	b.n	80056de <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80056de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e0:	2b06      	cmp	r3, #6
 80056e2:	d901      	bls.n	80056e8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80056e4:	2306      	movs	r3, #6
 80056e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80056e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80056ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056f2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80056f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f6:	2200      	movs	r2, #0
 80056f8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fc:	3304      	adds	r3, #4
 80056fe:	4618      	mov	r0, r3
 8005700:	f7ff fb38 	bl	8004d74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005706:	3318      	adds	r3, #24
 8005708:	4618      	mov	r0, r3
 800570a:	f7ff fb33 	bl	8004d74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005712:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005716:	f1c3 0207 	rsb	r2, r3, #7
 800571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800571e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005722:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005726:	2200      	movs	r2, #0
 8005728:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005732:	683a      	ldr	r2, [r7, #0]
 8005734:	68f9      	ldr	r1, [r7, #12]
 8005736:	69b8      	ldr	r0, [r7, #24]
 8005738:	f000 fdb4 	bl	80062a4 <pxPortInitialiseStack>
 800573c:	4602      	mov	r2, r0
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005744:	2b00      	cmp	r3, #0
 8005746:	d002      	beq.n	800574e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800574c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800574e:	bf00      	nop
 8005750:	3720      	adds	r7, #32
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
	...

08005758 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005760:	f000 fed0 	bl	8006504 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005764:	4b2a      	ldr	r3, [pc, #168]	; (8005810 <prvAddNewTaskToReadyList+0xb8>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3301      	adds	r3, #1
 800576a:	4a29      	ldr	r2, [pc, #164]	; (8005810 <prvAddNewTaskToReadyList+0xb8>)
 800576c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800576e:	4b29      	ldr	r3, [pc, #164]	; (8005814 <prvAddNewTaskToReadyList+0xbc>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d109      	bne.n	800578a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005776:	4a27      	ldr	r2, [pc, #156]	; (8005814 <prvAddNewTaskToReadyList+0xbc>)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800577c:	4b24      	ldr	r3, [pc, #144]	; (8005810 <prvAddNewTaskToReadyList+0xb8>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d110      	bne.n	80057a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005784:	f000 fbc6 	bl	8005f14 <prvInitialiseTaskLists>
 8005788:	e00d      	b.n	80057a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800578a:	4b23      	ldr	r3, [pc, #140]	; (8005818 <prvAddNewTaskToReadyList+0xc0>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d109      	bne.n	80057a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005792:	4b20      	ldr	r3, [pc, #128]	; (8005814 <prvAddNewTaskToReadyList+0xbc>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579c:	429a      	cmp	r2, r3
 800579e:	d802      	bhi.n	80057a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80057a0:	4a1c      	ldr	r2, [pc, #112]	; (8005814 <prvAddNewTaskToReadyList+0xbc>)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80057a6:	4b1d      	ldr	r3, [pc, #116]	; (800581c <prvAddNewTaskToReadyList+0xc4>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	3301      	adds	r3, #1
 80057ac:	4a1b      	ldr	r2, [pc, #108]	; (800581c <prvAddNewTaskToReadyList+0xc4>)
 80057ae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b4:	2201      	movs	r2, #1
 80057b6:	409a      	lsls	r2, r3
 80057b8:	4b19      	ldr	r3, [pc, #100]	; (8005820 <prvAddNewTaskToReadyList+0xc8>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4313      	orrs	r3, r2
 80057be:	4a18      	ldr	r2, [pc, #96]	; (8005820 <prvAddNewTaskToReadyList+0xc8>)
 80057c0:	6013      	str	r3, [r2, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c6:	4613      	mov	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4a15      	ldr	r2, [pc, #84]	; (8005824 <prvAddNewTaskToReadyList+0xcc>)
 80057d0:	441a      	add	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	3304      	adds	r3, #4
 80057d6:	4619      	mov	r1, r3
 80057d8:	4610      	mov	r0, r2
 80057da:	f7ff fad8 	bl	8004d8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80057de:	f000 fec1 	bl	8006564 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80057e2:	4b0d      	ldr	r3, [pc, #52]	; (8005818 <prvAddNewTaskToReadyList+0xc0>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00e      	beq.n	8005808 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80057ea:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <prvAddNewTaskToReadyList+0xbc>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d207      	bcs.n	8005808 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80057f8:	4b0b      	ldr	r3, [pc, #44]	; (8005828 <prvAddNewTaskToReadyList+0xd0>)
 80057fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057fe:	601a      	str	r2, [r3, #0]
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005808:	bf00      	nop
 800580a:	3708      	adds	r7, #8
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	2000055c 	.word	0x2000055c
 8005814:	2000045c 	.word	0x2000045c
 8005818:	20000568 	.word	0x20000568
 800581c:	20000578 	.word	0x20000578
 8005820:	20000564 	.word	0x20000564
 8005824:	20000460 	.word	0x20000460
 8005828:	e000ed04 	.word	0xe000ed04

0800582c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005834:	2300      	movs	r3, #0
 8005836:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d017      	beq.n	800586e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800583e:	4b13      	ldr	r3, [pc, #76]	; (800588c <vTaskDelay+0x60>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <vTaskDelay+0x30>
	__asm volatile
 8005846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584a:	f383 8811 	msr	BASEPRI, r3
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f3bf 8f4f 	dsb	sy
 8005856:	60bb      	str	r3, [r7, #8]
}
 8005858:	bf00      	nop
 800585a:	e7fe      	b.n	800585a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800585c:	f000 f87a 	bl	8005954 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005860:	2100      	movs	r1, #0
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 fcb8 	bl	80061d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005868:	f000 f882 	bl	8005970 <xTaskResumeAll>
 800586c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d107      	bne.n	8005884 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005874:	4b06      	ldr	r3, [pc, #24]	; (8005890 <vTaskDelay+0x64>)
 8005876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800587a:	601a      	str	r2, [r3, #0]
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005884:	bf00      	nop
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	20000584 	.word	0x20000584
 8005890:	e000ed04 	.word	0xe000ed04

08005894 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b08a      	sub	sp, #40	; 0x28
 8005898:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800589a:	2300      	movs	r3, #0
 800589c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800589e:	2300      	movs	r3, #0
 80058a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80058a2:	463a      	mov	r2, r7
 80058a4:	1d39      	adds	r1, r7, #4
 80058a6:	f107 0308 	add.w	r3, r7, #8
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7fb faf8 	bl	8000ea0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80058b0:	6839      	ldr	r1, [r7, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	9202      	str	r2, [sp, #8]
 80058b8:	9301      	str	r3, [sp, #4]
 80058ba:	2300      	movs	r3, #0
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	2300      	movs	r3, #0
 80058c0:	460a      	mov	r2, r1
 80058c2:	491e      	ldr	r1, [pc, #120]	; (800593c <vTaskStartScheduler+0xa8>)
 80058c4:	481e      	ldr	r0, [pc, #120]	; (8005940 <vTaskStartScheduler+0xac>)
 80058c6:	f7ff fe1d 	bl	8005504 <xTaskCreateStatic>
 80058ca:	4603      	mov	r3, r0
 80058cc:	4a1d      	ldr	r2, [pc, #116]	; (8005944 <vTaskStartScheduler+0xb0>)
 80058ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80058d0:	4b1c      	ldr	r3, [pc, #112]	; (8005944 <vTaskStartScheduler+0xb0>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80058d8:	2301      	movs	r3, #1
 80058da:	617b      	str	r3, [r7, #20]
 80058dc:	e001      	b.n	80058e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80058de:	2300      	movs	r3, #0
 80058e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d116      	bne.n	8005916 <vTaskStartScheduler+0x82>
	__asm volatile
 80058e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	613b      	str	r3, [r7, #16]
}
 80058fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80058fc:	4b12      	ldr	r3, [pc, #72]	; (8005948 <vTaskStartScheduler+0xb4>)
 80058fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005902:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005904:	4b11      	ldr	r3, [pc, #68]	; (800594c <vTaskStartScheduler+0xb8>)
 8005906:	2201      	movs	r2, #1
 8005908:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800590a:	4b11      	ldr	r3, [pc, #68]	; (8005950 <vTaskStartScheduler+0xbc>)
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005910:	f000 fd56 	bl	80063c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005914:	e00e      	b.n	8005934 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591c:	d10a      	bne.n	8005934 <vTaskStartScheduler+0xa0>
	__asm volatile
 800591e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005922:	f383 8811 	msr	BASEPRI, r3
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	60fb      	str	r3, [r7, #12]
}
 8005930:	bf00      	nop
 8005932:	e7fe      	b.n	8005932 <vTaskStartScheduler+0x9e>
}
 8005934:	bf00      	nop
 8005936:	3718      	adds	r7, #24
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	08009704 	.word	0x08009704
 8005940:	08005ee5 	.word	0x08005ee5
 8005944:	20000580 	.word	0x20000580
 8005948:	2000057c 	.word	0x2000057c
 800594c:	20000568 	.word	0x20000568
 8005950:	20000560 	.word	0x20000560

08005954 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005958:	4b04      	ldr	r3, [pc, #16]	; (800596c <vTaskSuspendAll+0x18>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	3301      	adds	r3, #1
 800595e:	4a03      	ldr	r2, [pc, #12]	; (800596c <vTaskSuspendAll+0x18>)
 8005960:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005962:	bf00      	nop
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	20000584 	.word	0x20000584

08005970 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005976:	2300      	movs	r3, #0
 8005978:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800597a:	2300      	movs	r3, #0
 800597c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800597e:	4b41      	ldr	r3, [pc, #260]	; (8005a84 <xTaskResumeAll+0x114>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10a      	bne.n	800599c <xTaskResumeAll+0x2c>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	603b      	str	r3, [r7, #0]
}
 8005998:	bf00      	nop
 800599a:	e7fe      	b.n	800599a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800599c:	f000 fdb2 	bl	8006504 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80059a0:	4b38      	ldr	r3, [pc, #224]	; (8005a84 <xTaskResumeAll+0x114>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	3b01      	subs	r3, #1
 80059a6:	4a37      	ldr	r2, [pc, #220]	; (8005a84 <xTaskResumeAll+0x114>)
 80059a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059aa:	4b36      	ldr	r3, [pc, #216]	; (8005a84 <xTaskResumeAll+0x114>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d161      	bne.n	8005a76 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80059b2:	4b35      	ldr	r3, [pc, #212]	; (8005a88 <xTaskResumeAll+0x118>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d05d      	beq.n	8005a76 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059ba:	e02e      	b.n	8005a1a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059bc:	4b33      	ldr	r3, [pc, #204]	; (8005a8c <xTaskResumeAll+0x11c>)
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	3318      	adds	r3, #24
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7ff fa3d 	bl	8004e48 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	3304      	adds	r3, #4
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7ff fa38 	bl	8004e48 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059dc:	2201      	movs	r2, #1
 80059de:	409a      	lsls	r2, r3
 80059e0:	4b2b      	ldr	r3, [pc, #172]	; (8005a90 <xTaskResumeAll+0x120>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	4a2a      	ldr	r2, [pc, #168]	; (8005a90 <xTaskResumeAll+0x120>)
 80059e8:	6013      	str	r3, [r2, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ee:	4613      	mov	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4a27      	ldr	r2, [pc, #156]	; (8005a94 <xTaskResumeAll+0x124>)
 80059f8:	441a      	add	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	3304      	adds	r3, #4
 80059fe:	4619      	mov	r1, r3
 8005a00:	4610      	mov	r0, r2
 8005a02:	f7ff f9c4 	bl	8004d8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a0a:	4b23      	ldr	r3, [pc, #140]	; (8005a98 <xTaskResumeAll+0x128>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d302      	bcc.n	8005a1a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005a14:	4b21      	ldr	r3, [pc, #132]	; (8005a9c <xTaskResumeAll+0x12c>)
 8005a16:	2201      	movs	r2, #1
 8005a18:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a1a:	4b1c      	ldr	r3, [pc, #112]	; (8005a8c <xTaskResumeAll+0x11c>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1cc      	bne.n	80059bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d001      	beq.n	8005a2c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a28:	f000 fb12 	bl	8006050 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a2c:	4b1c      	ldr	r3, [pc, #112]	; (8005aa0 <xTaskResumeAll+0x130>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d010      	beq.n	8005a5a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a38:	f000 f836 	bl	8005aa8 <xTaskIncrementTick>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d002      	beq.n	8005a48 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005a42:	4b16      	ldr	r3, [pc, #88]	; (8005a9c <xTaskResumeAll+0x12c>)
 8005a44:	2201      	movs	r2, #1
 8005a46:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1f1      	bne.n	8005a38 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005a54:	4b12      	ldr	r3, [pc, #72]	; (8005aa0 <xTaskResumeAll+0x130>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a5a:	4b10      	ldr	r3, [pc, #64]	; (8005a9c <xTaskResumeAll+0x12c>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d009      	beq.n	8005a76 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a62:	2301      	movs	r3, #1
 8005a64:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a66:	4b0f      	ldr	r3, [pc, #60]	; (8005aa4 <xTaskResumeAll+0x134>)
 8005a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a6c:	601a      	str	r2, [r3, #0]
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a76:	f000 fd75 	bl	8006564 <vPortExitCritical>

	return xAlreadyYielded;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	20000584 	.word	0x20000584
 8005a88:	2000055c 	.word	0x2000055c
 8005a8c:	2000051c 	.word	0x2000051c
 8005a90:	20000564 	.word	0x20000564
 8005a94:	20000460 	.word	0x20000460
 8005a98:	2000045c 	.word	0x2000045c
 8005a9c:	20000570 	.word	0x20000570
 8005aa0:	2000056c 	.word	0x2000056c
 8005aa4:	e000ed04 	.word	0xe000ed04

08005aa8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ab2:	4b4e      	ldr	r3, [pc, #312]	; (8005bec <xTaskIncrementTick+0x144>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f040 808e 	bne.w	8005bd8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005abc:	4b4c      	ldr	r3, [pc, #304]	; (8005bf0 <xTaskIncrementTick+0x148>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ac4:	4a4a      	ldr	r2, [pc, #296]	; (8005bf0 <xTaskIncrementTick+0x148>)
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d120      	bne.n	8005b12 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005ad0:	4b48      	ldr	r3, [pc, #288]	; (8005bf4 <xTaskIncrementTick+0x14c>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00a      	beq.n	8005af0 <xTaskIncrementTick+0x48>
	__asm volatile
 8005ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ade:	f383 8811 	msr	BASEPRI, r3
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	603b      	str	r3, [r7, #0]
}
 8005aec:	bf00      	nop
 8005aee:	e7fe      	b.n	8005aee <xTaskIncrementTick+0x46>
 8005af0:	4b40      	ldr	r3, [pc, #256]	; (8005bf4 <xTaskIncrementTick+0x14c>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	60fb      	str	r3, [r7, #12]
 8005af6:	4b40      	ldr	r3, [pc, #256]	; (8005bf8 <xTaskIncrementTick+0x150>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a3e      	ldr	r2, [pc, #248]	; (8005bf4 <xTaskIncrementTick+0x14c>)
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	4a3e      	ldr	r2, [pc, #248]	; (8005bf8 <xTaskIncrementTick+0x150>)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	6013      	str	r3, [r2, #0]
 8005b04:	4b3d      	ldr	r3, [pc, #244]	; (8005bfc <xTaskIncrementTick+0x154>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	3301      	adds	r3, #1
 8005b0a:	4a3c      	ldr	r2, [pc, #240]	; (8005bfc <xTaskIncrementTick+0x154>)
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	f000 fa9f 	bl	8006050 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b12:	4b3b      	ldr	r3, [pc, #236]	; (8005c00 <xTaskIncrementTick+0x158>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d348      	bcc.n	8005bae <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b1c:	4b35      	ldr	r3, [pc, #212]	; (8005bf4 <xTaskIncrementTick+0x14c>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d104      	bne.n	8005b30 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b26:	4b36      	ldr	r3, [pc, #216]	; (8005c00 <xTaskIncrementTick+0x158>)
 8005b28:	f04f 32ff 	mov.w	r2, #4294967295
 8005b2c:	601a      	str	r2, [r3, #0]
					break;
 8005b2e:	e03e      	b.n	8005bae <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b30:	4b30      	ldr	r3, [pc, #192]	; (8005bf4 <xTaskIncrementTick+0x14c>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d203      	bcs.n	8005b50 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b48:	4a2d      	ldr	r2, [pc, #180]	; (8005c00 <xTaskIncrementTick+0x158>)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b4e:	e02e      	b.n	8005bae <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	3304      	adds	r3, #4
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7ff f977 	bl	8004e48 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d004      	beq.n	8005b6c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	3318      	adds	r3, #24
 8005b66:	4618      	mov	r0, r3
 8005b68:	f7ff f96e 	bl	8004e48 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	2201      	movs	r2, #1
 8005b72:	409a      	lsls	r2, r3
 8005b74:	4b23      	ldr	r3, [pc, #140]	; (8005c04 <xTaskIncrementTick+0x15c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	4a22      	ldr	r2, [pc, #136]	; (8005c04 <xTaskIncrementTick+0x15c>)
 8005b7c:	6013      	str	r3, [r2, #0]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b82:	4613      	mov	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	4413      	add	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4a1f      	ldr	r2, [pc, #124]	; (8005c08 <xTaskIncrementTick+0x160>)
 8005b8c:	441a      	add	r2, r3
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	3304      	adds	r3, #4
 8005b92:	4619      	mov	r1, r3
 8005b94:	4610      	mov	r0, r2
 8005b96:	f7ff f8fa 	bl	8004d8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b9e:	4b1b      	ldr	r3, [pc, #108]	; (8005c0c <xTaskIncrementTick+0x164>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d3b9      	bcc.n	8005b1c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bac:	e7b6      	b.n	8005b1c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005bae:	4b17      	ldr	r3, [pc, #92]	; (8005c0c <xTaskIncrementTick+0x164>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb4:	4914      	ldr	r1, [pc, #80]	; (8005c08 <xTaskIncrementTick+0x160>)
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	440b      	add	r3, r1
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d901      	bls.n	8005bca <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005bca:	4b11      	ldr	r3, [pc, #68]	; (8005c10 <xTaskIncrementTick+0x168>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d007      	beq.n	8005be2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	617b      	str	r3, [r7, #20]
 8005bd6:	e004      	b.n	8005be2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005bd8:	4b0e      	ldr	r3, [pc, #56]	; (8005c14 <xTaskIncrementTick+0x16c>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	4a0d      	ldr	r2, [pc, #52]	; (8005c14 <xTaskIncrementTick+0x16c>)
 8005be0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005be2:	697b      	ldr	r3, [r7, #20]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3718      	adds	r7, #24
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	20000584 	.word	0x20000584
 8005bf0:	20000560 	.word	0x20000560
 8005bf4:	20000514 	.word	0x20000514
 8005bf8:	20000518 	.word	0x20000518
 8005bfc:	20000574 	.word	0x20000574
 8005c00:	2000057c 	.word	0x2000057c
 8005c04:	20000564 	.word	0x20000564
 8005c08:	20000460 	.word	0x20000460
 8005c0c:	2000045c 	.word	0x2000045c
 8005c10:	20000570 	.word	0x20000570
 8005c14:	2000056c 	.word	0x2000056c

08005c18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c1e:	4b27      	ldr	r3, [pc, #156]	; (8005cbc <vTaskSwitchContext+0xa4>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d003      	beq.n	8005c2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c26:	4b26      	ldr	r3, [pc, #152]	; (8005cc0 <vTaskSwitchContext+0xa8>)
 8005c28:	2201      	movs	r2, #1
 8005c2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c2c:	e03f      	b.n	8005cae <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005c2e:	4b24      	ldr	r3, [pc, #144]	; (8005cc0 <vTaskSwitchContext+0xa8>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c34:	4b23      	ldr	r3, [pc, #140]	; (8005cc4 <vTaskSwitchContext+0xac>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	fab3 f383 	clz	r3, r3
 8005c40:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005c42:	7afb      	ldrb	r3, [r7, #11]
 8005c44:	f1c3 031f 	rsb	r3, r3, #31
 8005c48:	617b      	str	r3, [r7, #20]
 8005c4a:	491f      	ldr	r1, [pc, #124]	; (8005cc8 <vTaskSwitchContext+0xb0>)
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	440b      	add	r3, r1
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10a      	bne.n	8005c74 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	607b      	str	r3, [r7, #4]
}
 8005c70:	bf00      	nop
 8005c72:	e7fe      	b.n	8005c72 <vTaskSwitchContext+0x5a>
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	4613      	mov	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4a12      	ldr	r2, [pc, #72]	; (8005cc8 <vTaskSwitchContext+0xb0>)
 8005c80:	4413      	add	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	685a      	ldr	r2, [r3, #4]
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	605a      	str	r2, [r3, #4]
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	3308      	adds	r3, #8
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d104      	bne.n	8005ca4 <vTaskSwitchContext+0x8c>
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	605a      	str	r2, [r3, #4]
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	4a08      	ldr	r2, [pc, #32]	; (8005ccc <vTaskSwitchContext+0xb4>)
 8005cac:	6013      	str	r3, [r2, #0]
}
 8005cae:	bf00      	nop
 8005cb0:	371c      	adds	r7, #28
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
 8005cba:	bf00      	nop
 8005cbc:	20000584 	.word	0x20000584
 8005cc0:	20000570 	.word	0x20000570
 8005cc4:	20000564 	.word	0x20000564
 8005cc8:	20000460 	.word	0x20000460
 8005ccc:	2000045c 	.word	0x2000045c

08005cd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10a      	bne.n	8005cf6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	60fb      	str	r3, [r7, #12]
}
 8005cf2:	bf00      	nop
 8005cf4:	e7fe      	b.n	8005cf4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005cf6:	4b07      	ldr	r3, [pc, #28]	; (8005d14 <vTaskPlaceOnEventList+0x44>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	3318      	adds	r3, #24
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7ff f869 	bl	8004dd6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d04:	2101      	movs	r1, #1
 8005d06:	6838      	ldr	r0, [r7, #0]
 8005d08:	f000 fa66 	bl	80061d8 <prvAddCurrentTaskToDelayedList>
}
 8005d0c:	bf00      	nop
 8005d0e:	3710      	adds	r7, #16
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	2000045c 	.word	0x2000045c

08005d18 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10a      	bne.n	8005d44 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d32:	f383 8811 	msr	BASEPRI, r3
 8005d36:	f3bf 8f6f 	isb	sy
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	60fb      	str	r3, [r7, #12]
}
 8005d40:	bf00      	nop
 8005d42:	e7fe      	b.n	8005d42 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	3318      	adds	r3, #24
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7ff f87d 	bl	8004e48 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d4e:	4b1d      	ldr	r3, [pc, #116]	; (8005dc4 <xTaskRemoveFromEventList+0xac>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d11c      	bne.n	8005d90 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	3304      	adds	r3, #4
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7ff f874 	bl	8004e48 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d64:	2201      	movs	r2, #1
 8005d66:	409a      	lsls	r2, r3
 8005d68:	4b17      	ldr	r3, [pc, #92]	; (8005dc8 <xTaskRemoveFromEventList+0xb0>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	4a16      	ldr	r2, [pc, #88]	; (8005dc8 <xTaskRemoveFromEventList+0xb0>)
 8005d70:	6013      	str	r3, [r2, #0]
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d76:	4613      	mov	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4a13      	ldr	r2, [pc, #76]	; (8005dcc <xTaskRemoveFromEventList+0xb4>)
 8005d80:	441a      	add	r2, r3
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	3304      	adds	r3, #4
 8005d86:	4619      	mov	r1, r3
 8005d88:	4610      	mov	r0, r2
 8005d8a:	f7ff f800 	bl	8004d8e <vListInsertEnd>
 8005d8e:	e005      	b.n	8005d9c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	3318      	adds	r3, #24
 8005d94:	4619      	mov	r1, r3
 8005d96:	480e      	ldr	r0, [pc, #56]	; (8005dd0 <xTaskRemoveFromEventList+0xb8>)
 8005d98:	f7fe fff9 	bl	8004d8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005da0:	4b0c      	ldr	r3, [pc, #48]	; (8005dd4 <xTaskRemoveFromEventList+0xbc>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d905      	bls.n	8005db6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005daa:	2301      	movs	r3, #1
 8005dac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005dae:	4b0a      	ldr	r3, [pc, #40]	; (8005dd8 <xTaskRemoveFromEventList+0xc0>)
 8005db0:	2201      	movs	r2, #1
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	e001      	b.n	8005dba <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005db6:	2300      	movs	r3, #0
 8005db8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005dba:	697b      	ldr	r3, [r7, #20]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3718      	adds	r7, #24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	20000584 	.word	0x20000584
 8005dc8:	20000564 	.word	0x20000564
 8005dcc:	20000460 	.word	0x20000460
 8005dd0:	2000051c 	.word	0x2000051c
 8005dd4:	2000045c 	.word	0x2000045c
 8005dd8:	20000570 	.word	0x20000570

08005ddc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005de4:	4b06      	ldr	r3, [pc, #24]	; (8005e00 <vTaskInternalSetTimeOutState+0x24>)
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005dec:	4b05      	ldr	r3, [pc, #20]	; (8005e04 <vTaskInternalSetTimeOutState+0x28>)
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	605a      	str	r2, [r3, #4]
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	20000574 	.word	0x20000574
 8005e04:	20000560 	.word	0x20000560

08005e08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10a      	bne.n	8005e2e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	613b      	str	r3, [r7, #16]
}
 8005e2a:	bf00      	nop
 8005e2c:	e7fe      	b.n	8005e2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10a      	bne.n	8005e4a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e38:	f383 8811 	msr	BASEPRI, r3
 8005e3c:	f3bf 8f6f 	isb	sy
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	60fb      	str	r3, [r7, #12]
}
 8005e46:	bf00      	nop
 8005e48:	e7fe      	b.n	8005e48 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005e4a:	f000 fb5b 	bl	8006504 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005e4e:	4b1d      	ldr	r3, [pc, #116]	; (8005ec4 <xTaskCheckForTimeOut+0xbc>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	69ba      	ldr	r2, [r7, #24]
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e66:	d102      	bne.n	8005e6e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	61fb      	str	r3, [r7, #28]
 8005e6c:	e023      	b.n	8005eb6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	4b15      	ldr	r3, [pc, #84]	; (8005ec8 <xTaskCheckForTimeOut+0xc0>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d007      	beq.n	8005e8a <xTaskCheckForTimeOut+0x82>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d302      	bcc.n	8005e8a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005e84:	2301      	movs	r3, #1
 8005e86:	61fb      	str	r3, [r7, #28]
 8005e88:	e015      	b.n	8005eb6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d20b      	bcs.n	8005eac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	1ad2      	subs	r2, r2, r3
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7ff ff9b 	bl	8005ddc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	61fb      	str	r3, [r7, #28]
 8005eaa:	e004      	b.n	8005eb6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005eb6:	f000 fb55 	bl	8006564 <vPortExitCritical>

	return xReturn;
 8005eba:	69fb      	ldr	r3, [r7, #28]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3720      	adds	r7, #32
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	20000560 	.word	0x20000560
 8005ec8:	20000574 	.word	0x20000574

08005ecc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ecc:	b480      	push	{r7}
 8005ece:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ed0:	4b03      	ldr	r3, [pc, #12]	; (8005ee0 <vTaskMissedYield+0x14>)
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	601a      	str	r2, [r3, #0]
}
 8005ed6:	bf00      	nop
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr
 8005ee0:	20000570 	.word	0x20000570

08005ee4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005eec:	f000 f852 	bl	8005f94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ef0:	4b06      	ldr	r3, [pc, #24]	; (8005f0c <prvIdleTask+0x28>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d9f9      	bls.n	8005eec <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ef8:	4b05      	ldr	r3, [pc, #20]	; (8005f10 <prvIdleTask+0x2c>)
 8005efa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005f08:	e7f0      	b.n	8005eec <prvIdleTask+0x8>
 8005f0a:	bf00      	nop
 8005f0c:	20000460 	.word	0x20000460
 8005f10:	e000ed04 	.word	0xe000ed04

08005f14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	607b      	str	r3, [r7, #4]
 8005f1e:	e00c      	b.n	8005f3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	4613      	mov	r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	4a12      	ldr	r2, [pc, #72]	; (8005f74 <prvInitialiseTaskLists+0x60>)
 8005f2c:	4413      	add	r3, r2
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fe ff00 	bl	8004d34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	3301      	adds	r3, #1
 8005f38:	607b      	str	r3, [r7, #4]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b06      	cmp	r3, #6
 8005f3e:	d9ef      	bls.n	8005f20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005f40:	480d      	ldr	r0, [pc, #52]	; (8005f78 <prvInitialiseTaskLists+0x64>)
 8005f42:	f7fe fef7 	bl	8004d34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005f46:	480d      	ldr	r0, [pc, #52]	; (8005f7c <prvInitialiseTaskLists+0x68>)
 8005f48:	f7fe fef4 	bl	8004d34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005f4c:	480c      	ldr	r0, [pc, #48]	; (8005f80 <prvInitialiseTaskLists+0x6c>)
 8005f4e:	f7fe fef1 	bl	8004d34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005f52:	480c      	ldr	r0, [pc, #48]	; (8005f84 <prvInitialiseTaskLists+0x70>)
 8005f54:	f7fe feee 	bl	8004d34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f58:	480b      	ldr	r0, [pc, #44]	; (8005f88 <prvInitialiseTaskLists+0x74>)
 8005f5a:	f7fe feeb 	bl	8004d34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f5e:	4b0b      	ldr	r3, [pc, #44]	; (8005f8c <prvInitialiseTaskLists+0x78>)
 8005f60:	4a05      	ldr	r2, [pc, #20]	; (8005f78 <prvInitialiseTaskLists+0x64>)
 8005f62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f64:	4b0a      	ldr	r3, [pc, #40]	; (8005f90 <prvInitialiseTaskLists+0x7c>)
 8005f66:	4a05      	ldr	r2, [pc, #20]	; (8005f7c <prvInitialiseTaskLists+0x68>)
 8005f68:	601a      	str	r2, [r3, #0]
}
 8005f6a:	bf00      	nop
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	20000460 	.word	0x20000460
 8005f78:	200004ec 	.word	0x200004ec
 8005f7c:	20000500 	.word	0x20000500
 8005f80:	2000051c 	.word	0x2000051c
 8005f84:	20000530 	.word	0x20000530
 8005f88:	20000548 	.word	0x20000548
 8005f8c:	20000514 	.word	0x20000514
 8005f90:	20000518 	.word	0x20000518

08005f94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f9a:	e019      	b.n	8005fd0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f9c:	f000 fab2 	bl	8006504 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fa0:	4b10      	ldr	r3, [pc, #64]	; (8005fe4 <prvCheckTasksWaitingTermination+0x50>)
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	3304      	adds	r3, #4
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7fe ff4b 	bl	8004e48 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005fb2:	4b0d      	ldr	r3, [pc, #52]	; (8005fe8 <prvCheckTasksWaitingTermination+0x54>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	4a0b      	ldr	r2, [pc, #44]	; (8005fe8 <prvCheckTasksWaitingTermination+0x54>)
 8005fba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005fbc:	4b0b      	ldr	r3, [pc, #44]	; (8005fec <prvCheckTasksWaitingTermination+0x58>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	4a0a      	ldr	r2, [pc, #40]	; (8005fec <prvCheckTasksWaitingTermination+0x58>)
 8005fc4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005fc6:	f000 facd 	bl	8006564 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f810 	bl	8005ff0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005fd0:	4b06      	ldr	r3, [pc, #24]	; (8005fec <prvCheckTasksWaitingTermination+0x58>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1e1      	bne.n	8005f9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005fd8:	bf00      	nop
 8005fda:	bf00      	nop
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20000530 	.word	0x20000530
 8005fe8:	2000055c 	.word	0x2000055c
 8005fec:	20000544 	.word	0x20000544

08005ff0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d108      	bne.n	8006014 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006006:	4618      	mov	r0, r3
 8006008:	f000 fc6a 	bl	80068e0 <vPortFree>
				vPortFree( pxTCB );
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 fc67 	bl	80068e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006012:	e018      	b.n	8006046 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800601a:	2b01      	cmp	r3, #1
 800601c:	d103      	bne.n	8006026 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f000 fc5e 	bl	80068e0 <vPortFree>
	}
 8006024:	e00f      	b.n	8006046 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800602c:	2b02      	cmp	r3, #2
 800602e:	d00a      	beq.n	8006046 <prvDeleteTCB+0x56>
	__asm volatile
 8006030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006034:	f383 8811 	msr	BASEPRI, r3
 8006038:	f3bf 8f6f 	isb	sy
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	60fb      	str	r3, [r7, #12]
}
 8006042:	bf00      	nop
 8006044:	e7fe      	b.n	8006044 <prvDeleteTCB+0x54>
	}
 8006046:	bf00      	nop
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
	...

08006050 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006050:	b480      	push	{r7}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006056:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <prvResetNextTaskUnblockTime+0x38>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d104      	bne.n	800606a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006060:	4b0a      	ldr	r3, [pc, #40]	; (800608c <prvResetNextTaskUnblockTime+0x3c>)
 8006062:	f04f 32ff 	mov.w	r2, #4294967295
 8006066:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006068:	e008      	b.n	800607c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800606a:	4b07      	ldr	r3, [pc, #28]	; (8006088 <prvResetNextTaskUnblockTime+0x38>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	4a04      	ldr	r2, [pc, #16]	; (800608c <prvResetNextTaskUnblockTime+0x3c>)
 800607a:	6013      	str	r3, [r2, #0]
}
 800607c:	bf00      	nop
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	20000514 	.word	0x20000514
 800608c:	2000057c 	.word	0x2000057c

08006090 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006096:	4b0b      	ldr	r3, [pc, #44]	; (80060c4 <xTaskGetSchedulerState+0x34>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d102      	bne.n	80060a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800609e:	2301      	movs	r3, #1
 80060a0:	607b      	str	r3, [r7, #4]
 80060a2:	e008      	b.n	80060b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060a4:	4b08      	ldr	r3, [pc, #32]	; (80060c8 <xTaskGetSchedulerState+0x38>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d102      	bne.n	80060b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80060ac:	2302      	movs	r3, #2
 80060ae:	607b      	str	r3, [r7, #4]
 80060b0:	e001      	b.n	80060b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80060b2:	2300      	movs	r3, #0
 80060b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80060b6:	687b      	ldr	r3, [r7, #4]
	}
 80060b8:	4618      	mov	r0, r3
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	20000568 	.word	0x20000568
 80060c8:	20000584 	.word	0x20000584

080060cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b086      	sub	sp, #24
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80060d8:	2300      	movs	r3, #0
 80060da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d06e      	beq.n	80061c0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80060e2:	4b3a      	ldr	r3, [pc, #232]	; (80061cc <xTaskPriorityDisinherit+0x100>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d00a      	beq.n	8006102 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	60fb      	str	r3, [r7, #12]
}
 80060fe:	bf00      	nop
 8006100:	e7fe      	b.n	8006100 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10a      	bne.n	8006120 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800610a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	60bb      	str	r3, [r7, #8]
}
 800611c:	bf00      	nop
 800611e:	e7fe      	b.n	800611e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006124:	1e5a      	subs	r2, r3, #1
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006132:	429a      	cmp	r2, r3
 8006134:	d044      	beq.n	80061c0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800613a:	2b00      	cmp	r3, #0
 800613c:	d140      	bne.n	80061c0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	3304      	adds	r3, #4
 8006142:	4618      	mov	r0, r3
 8006144:	f7fe fe80 	bl	8004e48 <uxListRemove>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d115      	bne.n	800617a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006152:	491f      	ldr	r1, [pc, #124]	; (80061d0 <xTaskPriorityDisinherit+0x104>)
 8006154:	4613      	mov	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	440b      	add	r3, r1
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10a      	bne.n	800617a <xTaskPriorityDisinherit+0xae>
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006168:	2201      	movs	r2, #1
 800616a:	fa02 f303 	lsl.w	r3, r2, r3
 800616e:	43da      	mvns	r2, r3
 8006170:	4b18      	ldr	r3, [pc, #96]	; (80061d4 <xTaskPriorityDisinherit+0x108>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4013      	ands	r3, r2
 8006176:	4a17      	ldr	r2, [pc, #92]	; (80061d4 <xTaskPriorityDisinherit+0x108>)
 8006178:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006186:	f1c3 0207 	rsb	r2, r3, #7
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006192:	2201      	movs	r2, #1
 8006194:	409a      	lsls	r2, r3
 8006196:	4b0f      	ldr	r3, [pc, #60]	; (80061d4 <xTaskPriorityDisinherit+0x108>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4313      	orrs	r3, r2
 800619c:	4a0d      	ldr	r2, [pc, #52]	; (80061d4 <xTaskPriorityDisinherit+0x108>)
 800619e:	6013      	str	r3, [r2, #0]
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a4:	4613      	mov	r3, r2
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4a08      	ldr	r2, [pc, #32]	; (80061d0 <xTaskPriorityDisinherit+0x104>)
 80061ae:	441a      	add	r2, r3
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	3304      	adds	r3, #4
 80061b4:	4619      	mov	r1, r3
 80061b6:	4610      	mov	r0, r2
 80061b8:	f7fe fde9 	bl	8004d8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80061bc:	2301      	movs	r3, #1
 80061be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80061c0:	697b      	ldr	r3, [r7, #20]
	}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3718      	adds	r7, #24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	2000045c 	.word	0x2000045c
 80061d0:	20000460 	.word	0x20000460
 80061d4:	20000564 	.word	0x20000564

080061d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80061e2:	4b29      	ldr	r3, [pc, #164]	; (8006288 <prvAddCurrentTaskToDelayedList+0xb0>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061e8:	4b28      	ldr	r3, [pc, #160]	; (800628c <prvAddCurrentTaskToDelayedList+0xb4>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3304      	adds	r3, #4
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fe fe2a 	bl	8004e48 <uxListRemove>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10b      	bne.n	8006212 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80061fa:	4b24      	ldr	r3, [pc, #144]	; (800628c <prvAddCurrentTaskToDelayedList+0xb4>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006200:	2201      	movs	r2, #1
 8006202:	fa02 f303 	lsl.w	r3, r2, r3
 8006206:	43da      	mvns	r2, r3
 8006208:	4b21      	ldr	r3, [pc, #132]	; (8006290 <prvAddCurrentTaskToDelayedList+0xb8>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4013      	ands	r3, r2
 800620e:	4a20      	ldr	r2, [pc, #128]	; (8006290 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006210:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006218:	d10a      	bne.n	8006230 <prvAddCurrentTaskToDelayedList+0x58>
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d007      	beq.n	8006230 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006220:	4b1a      	ldr	r3, [pc, #104]	; (800628c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	3304      	adds	r3, #4
 8006226:	4619      	mov	r1, r3
 8006228:	481a      	ldr	r0, [pc, #104]	; (8006294 <prvAddCurrentTaskToDelayedList+0xbc>)
 800622a:	f7fe fdb0 	bl	8004d8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800622e:	e026      	b.n	800627e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4413      	add	r3, r2
 8006236:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006238:	4b14      	ldr	r3, [pc, #80]	; (800628c <prvAddCurrentTaskToDelayedList+0xb4>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	429a      	cmp	r2, r3
 8006246:	d209      	bcs.n	800625c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006248:	4b13      	ldr	r3, [pc, #76]	; (8006298 <prvAddCurrentTaskToDelayedList+0xc0>)
 800624a:	681a      	ldr	r2, [r3, #0]
 800624c:	4b0f      	ldr	r3, [pc, #60]	; (800628c <prvAddCurrentTaskToDelayedList+0xb4>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3304      	adds	r3, #4
 8006252:	4619      	mov	r1, r3
 8006254:	4610      	mov	r0, r2
 8006256:	f7fe fdbe 	bl	8004dd6 <vListInsert>
}
 800625a:	e010      	b.n	800627e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800625c:	4b0f      	ldr	r3, [pc, #60]	; (800629c <prvAddCurrentTaskToDelayedList+0xc4>)
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	4b0a      	ldr	r3, [pc, #40]	; (800628c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	3304      	adds	r3, #4
 8006266:	4619      	mov	r1, r3
 8006268:	4610      	mov	r0, r2
 800626a:	f7fe fdb4 	bl	8004dd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800626e:	4b0c      	ldr	r3, [pc, #48]	; (80062a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	429a      	cmp	r2, r3
 8006276:	d202      	bcs.n	800627e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006278:	4a09      	ldr	r2, [pc, #36]	; (80062a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	6013      	str	r3, [r2, #0]
}
 800627e:	bf00      	nop
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	20000560 	.word	0x20000560
 800628c:	2000045c 	.word	0x2000045c
 8006290:	20000564 	.word	0x20000564
 8006294:	20000548 	.word	0x20000548
 8006298:	20000518 	.word	0x20000518
 800629c:	20000514 	.word	0x20000514
 80062a0:	2000057c 	.word	0x2000057c

080062a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80062a4:	b480      	push	{r7}
 80062a6:	b085      	sub	sp, #20
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	3b04      	subs	r3, #4
 80062b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80062bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	3b04      	subs	r3, #4
 80062c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f023 0201 	bic.w	r2, r3, #1
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	3b04      	subs	r3, #4
 80062d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80062d4:	4a0c      	ldr	r2, [pc, #48]	; (8006308 <pxPortInitialiseStack+0x64>)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3b14      	subs	r3, #20
 80062de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	3b04      	subs	r3, #4
 80062ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f06f 0202 	mvn.w	r2, #2
 80062f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	3b20      	subs	r3, #32
 80062f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80062fa:	68fb      	ldr	r3, [r7, #12]
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	0800630d 	.word	0x0800630d

0800630c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006312:	2300      	movs	r3, #0
 8006314:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006316:	4b12      	ldr	r3, [pc, #72]	; (8006360 <prvTaskExitError+0x54>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631e:	d00a      	beq.n	8006336 <prvTaskExitError+0x2a>
	__asm volatile
 8006320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006324:	f383 8811 	msr	BASEPRI, r3
 8006328:	f3bf 8f6f 	isb	sy
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	60fb      	str	r3, [r7, #12]
}
 8006332:	bf00      	nop
 8006334:	e7fe      	b.n	8006334 <prvTaskExitError+0x28>
	__asm volatile
 8006336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	60bb      	str	r3, [r7, #8]
}
 8006348:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800634a:	bf00      	nop
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d0fc      	beq.n	800634c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006352:	bf00      	nop
 8006354:	bf00      	nop
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	2000000c 	.word	0x2000000c
	...

08006370 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006370:	4b07      	ldr	r3, [pc, #28]	; (8006390 <pxCurrentTCBConst2>)
 8006372:	6819      	ldr	r1, [r3, #0]
 8006374:	6808      	ldr	r0, [r1, #0]
 8006376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800637a:	f380 8809 	msr	PSP, r0
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f04f 0000 	mov.w	r0, #0
 8006386:	f380 8811 	msr	BASEPRI, r0
 800638a:	4770      	bx	lr
 800638c:	f3af 8000 	nop.w

08006390 <pxCurrentTCBConst2>:
 8006390:	2000045c 	.word	0x2000045c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006394:	bf00      	nop
 8006396:	bf00      	nop

08006398 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006398:	4808      	ldr	r0, [pc, #32]	; (80063bc <prvPortStartFirstTask+0x24>)
 800639a:	6800      	ldr	r0, [r0, #0]
 800639c:	6800      	ldr	r0, [r0, #0]
 800639e:	f380 8808 	msr	MSP, r0
 80063a2:	f04f 0000 	mov.w	r0, #0
 80063a6:	f380 8814 	msr	CONTROL, r0
 80063aa:	b662      	cpsie	i
 80063ac:	b661      	cpsie	f
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	df00      	svc	0
 80063b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80063ba:	bf00      	nop
 80063bc:	e000ed08 	.word	0xe000ed08

080063c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80063c6:	4b46      	ldr	r3, [pc, #280]	; (80064e0 <xPortStartScheduler+0x120>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a46      	ldr	r2, [pc, #280]	; (80064e4 <xPortStartScheduler+0x124>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d10a      	bne.n	80063e6 <xPortStartScheduler+0x26>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	613b      	str	r3, [r7, #16]
}
 80063e2:	bf00      	nop
 80063e4:	e7fe      	b.n	80063e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80063e6:	4b3e      	ldr	r3, [pc, #248]	; (80064e0 <xPortStartScheduler+0x120>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a3f      	ldr	r2, [pc, #252]	; (80064e8 <xPortStartScheduler+0x128>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d10a      	bne.n	8006406 <xPortStartScheduler+0x46>
	__asm volatile
 80063f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f4:	f383 8811 	msr	BASEPRI, r3
 80063f8:	f3bf 8f6f 	isb	sy
 80063fc:	f3bf 8f4f 	dsb	sy
 8006400:	60fb      	str	r3, [r7, #12]
}
 8006402:	bf00      	nop
 8006404:	e7fe      	b.n	8006404 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006406:	4b39      	ldr	r3, [pc, #228]	; (80064ec <xPortStartScheduler+0x12c>)
 8006408:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	b2db      	uxtb	r3, r3
 8006410:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	22ff      	movs	r2, #255	; 0xff
 8006416:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	b2db      	uxtb	r3, r3
 800641e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006420:	78fb      	ldrb	r3, [r7, #3]
 8006422:	b2db      	uxtb	r3, r3
 8006424:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006428:	b2da      	uxtb	r2, r3
 800642a:	4b31      	ldr	r3, [pc, #196]	; (80064f0 <xPortStartScheduler+0x130>)
 800642c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800642e:	4b31      	ldr	r3, [pc, #196]	; (80064f4 <xPortStartScheduler+0x134>)
 8006430:	2207      	movs	r2, #7
 8006432:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006434:	e009      	b.n	800644a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006436:	4b2f      	ldr	r3, [pc, #188]	; (80064f4 <xPortStartScheduler+0x134>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	3b01      	subs	r3, #1
 800643c:	4a2d      	ldr	r2, [pc, #180]	; (80064f4 <xPortStartScheduler+0x134>)
 800643e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006440:	78fb      	ldrb	r3, [r7, #3]
 8006442:	b2db      	uxtb	r3, r3
 8006444:	005b      	lsls	r3, r3, #1
 8006446:	b2db      	uxtb	r3, r3
 8006448:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800644a:	78fb      	ldrb	r3, [r7, #3]
 800644c:	b2db      	uxtb	r3, r3
 800644e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006452:	2b80      	cmp	r3, #128	; 0x80
 8006454:	d0ef      	beq.n	8006436 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006456:	4b27      	ldr	r3, [pc, #156]	; (80064f4 <xPortStartScheduler+0x134>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f1c3 0307 	rsb	r3, r3, #7
 800645e:	2b04      	cmp	r3, #4
 8006460:	d00a      	beq.n	8006478 <xPortStartScheduler+0xb8>
	__asm volatile
 8006462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	60bb      	str	r3, [r7, #8]
}
 8006474:	bf00      	nop
 8006476:	e7fe      	b.n	8006476 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006478:	4b1e      	ldr	r3, [pc, #120]	; (80064f4 <xPortStartScheduler+0x134>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	021b      	lsls	r3, r3, #8
 800647e:	4a1d      	ldr	r2, [pc, #116]	; (80064f4 <xPortStartScheduler+0x134>)
 8006480:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006482:	4b1c      	ldr	r3, [pc, #112]	; (80064f4 <xPortStartScheduler+0x134>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800648a:	4a1a      	ldr	r2, [pc, #104]	; (80064f4 <xPortStartScheduler+0x134>)
 800648c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	b2da      	uxtb	r2, r3
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006496:	4b18      	ldr	r3, [pc, #96]	; (80064f8 <xPortStartScheduler+0x138>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a17      	ldr	r2, [pc, #92]	; (80064f8 <xPortStartScheduler+0x138>)
 800649c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80064a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80064a2:	4b15      	ldr	r3, [pc, #84]	; (80064f8 <xPortStartScheduler+0x138>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a14      	ldr	r2, [pc, #80]	; (80064f8 <xPortStartScheduler+0x138>)
 80064a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80064ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80064ae:	f000 f8dd 	bl	800666c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80064b2:	4b12      	ldr	r3, [pc, #72]	; (80064fc <xPortStartScheduler+0x13c>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80064b8:	f000 f8fc 	bl	80066b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80064bc:	4b10      	ldr	r3, [pc, #64]	; (8006500 <xPortStartScheduler+0x140>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a0f      	ldr	r2, [pc, #60]	; (8006500 <xPortStartScheduler+0x140>)
 80064c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80064c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80064c8:	f7ff ff66 	bl	8006398 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80064cc:	f7ff fba4 	bl	8005c18 <vTaskSwitchContext>
	prvTaskExitError();
 80064d0:	f7ff ff1c 	bl	800630c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	e000ed00 	.word	0xe000ed00
 80064e4:	410fc271 	.word	0x410fc271
 80064e8:	410fc270 	.word	0x410fc270
 80064ec:	e000e400 	.word	0xe000e400
 80064f0:	20000588 	.word	0x20000588
 80064f4:	2000058c 	.word	0x2000058c
 80064f8:	e000ed20 	.word	0xe000ed20
 80064fc:	2000000c 	.word	0x2000000c
 8006500:	e000ef34 	.word	0xe000ef34

08006504 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
	__asm volatile
 800650a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800650e:	f383 8811 	msr	BASEPRI, r3
 8006512:	f3bf 8f6f 	isb	sy
 8006516:	f3bf 8f4f 	dsb	sy
 800651a:	607b      	str	r3, [r7, #4]
}
 800651c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800651e:	4b0f      	ldr	r3, [pc, #60]	; (800655c <vPortEnterCritical+0x58>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	3301      	adds	r3, #1
 8006524:	4a0d      	ldr	r2, [pc, #52]	; (800655c <vPortEnterCritical+0x58>)
 8006526:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006528:	4b0c      	ldr	r3, [pc, #48]	; (800655c <vPortEnterCritical+0x58>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d10f      	bne.n	8006550 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006530:	4b0b      	ldr	r3, [pc, #44]	; (8006560 <vPortEnterCritical+0x5c>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00a      	beq.n	8006550 <vPortEnterCritical+0x4c>
	__asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	603b      	str	r3, [r7, #0]
}
 800654c:	bf00      	nop
 800654e:	e7fe      	b.n	800654e <vPortEnterCritical+0x4a>
	}
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	2000000c 	.word	0x2000000c
 8006560:	e000ed04 	.word	0xe000ed04

08006564 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800656a:	4b12      	ldr	r3, [pc, #72]	; (80065b4 <vPortExitCritical+0x50>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10a      	bne.n	8006588 <vPortExitCritical+0x24>
	__asm volatile
 8006572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006576:	f383 8811 	msr	BASEPRI, r3
 800657a:	f3bf 8f6f 	isb	sy
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	607b      	str	r3, [r7, #4]
}
 8006584:	bf00      	nop
 8006586:	e7fe      	b.n	8006586 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006588:	4b0a      	ldr	r3, [pc, #40]	; (80065b4 <vPortExitCritical+0x50>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	3b01      	subs	r3, #1
 800658e:	4a09      	ldr	r2, [pc, #36]	; (80065b4 <vPortExitCritical+0x50>)
 8006590:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006592:	4b08      	ldr	r3, [pc, #32]	; (80065b4 <vPortExitCritical+0x50>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d105      	bne.n	80065a6 <vPortExitCritical+0x42>
 800659a:	2300      	movs	r3, #0
 800659c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	f383 8811 	msr	BASEPRI, r3
}
 80065a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80065a6:	bf00      	nop
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	2000000c 	.word	0x2000000c
	...

080065c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80065c0:	f3ef 8009 	mrs	r0, PSP
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	4b15      	ldr	r3, [pc, #84]	; (8006620 <pxCurrentTCBConst>)
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	f01e 0f10 	tst.w	lr, #16
 80065d0:	bf08      	it	eq
 80065d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80065d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065da:	6010      	str	r0, [r2, #0]
 80065dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80065e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80065e4:	f380 8811 	msr	BASEPRI, r0
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	f3bf 8f6f 	isb	sy
 80065f0:	f7ff fb12 	bl	8005c18 <vTaskSwitchContext>
 80065f4:	f04f 0000 	mov.w	r0, #0
 80065f8:	f380 8811 	msr	BASEPRI, r0
 80065fc:	bc09      	pop	{r0, r3}
 80065fe:	6819      	ldr	r1, [r3, #0]
 8006600:	6808      	ldr	r0, [r1, #0]
 8006602:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006606:	f01e 0f10 	tst.w	lr, #16
 800660a:	bf08      	it	eq
 800660c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006610:	f380 8809 	msr	PSP, r0
 8006614:	f3bf 8f6f 	isb	sy
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	f3af 8000 	nop.w

08006620 <pxCurrentTCBConst>:
 8006620:	2000045c 	.word	0x2000045c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006624:	bf00      	nop
 8006626:	bf00      	nop

08006628 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
	__asm volatile
 800662e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	607b      	str	r3, [r7, #4]
}
 8006640:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006642:	f7ff fa31 	bl	8005aa8 <xTaskIncrementTick>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800664c:	4b06      	ldr	r3, [pc, #24]	; (8006668 <SysTick_Handler+0x40>)
 800664e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006652:	601a      	str	r2, [r3, #0]
 8006654:	2300      	movs	r3, #0
 8006656:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	f383 8811 	msr	BASEPRI, r3
}
 800665e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006660:	bf00      	nop
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	e000ed04 	.word	0xe000ed04

0800666c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800666c:	b480      	push	{r7}
 800666e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006670:	4b0b      	ldr	r3, [pc, #44]	; (80066a0 <vPortSetupTimerInterrupt+0x34>)
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006676:	4b0b      	ldr	r3, [pc, #44]	; (80066a4 <vPortSetupTimerInterrupt+0x38>)
 8006678:	2200      	movs	r2, #0
 800667a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800667c:	4b0a      	ldr	r3, [pc, #40]	; (80066a8 <vPortSetupTimerInterrupt+0x3c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a0a      	ldr	r2, [pc, #40]	; (80066ac <vPortSetupTimerInterrupt+0x40>)
 8006682:	fba2 2303 	umull	r2, r3, r2, r3
 8006686:	099b      	lsrs	r3, r3, #6
 8006688:	4a09      	ldr	r2, [pc, #36]	; (80066b0 <vPortSetupTimerInterrupt+0x44>)
 800668a:	3b01      	subs	r3, #1
 800668c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800668e:	4b04      	ldr	r3, [pc, #16]	; (80066a0 <vPortSetupTimerInterrupt+0x34>)
 8006690:	2207      	movs	r2, #7
 8006692:	601a      	str	r2, [r3, #0]
}
 8006694:	bf00      	nop
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	e000e010 	.word	0xe000e010
 80066a4:	e000e018 	.word	0xe000e018
 80066a8:	20000000 	.word	0x20000000
 80066ac:	10624dd3 	.word	0x10624dd3
 80066b0:	e000e014 	.word	0xe000e014

080066b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80066b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80066c4 <vPortEnableVFP+0x10>
 80066b8:	6801      	ldr	r1, [r0, #0]
 80066ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80066be:	6001      	str	r1, [r0, #0]
 80066c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80066c2:	bf00      	nop
 80066c4:	e000ed88 	.word	0xe000ed88

080066c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80066c8:	b480      	push	{r7}
 80066ca:	b085      	sub	sp, #20
 80066cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80066ce:	f3ef 8305 	mrs	r3, IPSR
 80066d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2b0f      	cmp	r3, #15
 80066d8:	d914      	bls.n	8006704 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80066da:	4a17      	ldr	r2, [pc, #92]	; (8006738 <vPortValidateInterruptPriority+0x70>)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	4413      	add	r3, r2
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80066e4:	4b15      	ldr	r3, [pc, #84]	; (800673c <vPortValidateInterruptPriority+0x74>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	7afa      	ldrb	r2, [r7, #11]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d20a      	bcs.n	8006704 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80066ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	607b      	str	r3, [r7, #4]
}
 8006700:	bf00      	nop
 8006702:	e7fe      	b.n	8006702 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006704:	4b0e      	ldr	r3, [pc, #56]	; (8006740 <vPortValidateInterruptPriority+0x78>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800670c:	4b0d      	ldr	r3, [pc, #52]	; (8006744 <vPortValidateInterruptPriority+0x7c>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	429a      	cmp	r2, r3
 8006712:	d90a      	bls.n	800672a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006718:	f383 8811 	msr	BASEPRI, r3
 800671c:	f3bf 8f6f 	isb	sy
 8006720:	f3bf 8f4f 	dsb	sy
 8006724:	603b      	str	r3, [r7, #0]
}
 8006726:	bf00      	nop
 8006728:	e7fe      	b.n	8006728 <vPortValidateInterruptPriority+0x60>
	}
 800672a:	bf00      	nop
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	e000e3f0 	.word	0xe000e3f0
 800673c:	20000588 	.word	0x20000588
 8006740:	e000ed0c 	.word	0xe000ed0c
 8006744:	2000058c 	.word	0x2000058c

08006748 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b08a      	sub	sp, #40	; 0x28
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006750:	2300      	movs	r3, #0
 8006752:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006754:	f7ff f8fe 	bl	8005954 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006758:	4b5b      	ldr	r3, [pc, #364]	; (80068c8 <pvPortMalloc+0x180>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006760:	f000 f920 	bl	80069a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006764:	4b59      	ldr	r3, [pc, #356]	; (80068cc <pvPortMalloc+0x184>)
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4013      	ands	r3, r2
 800676c:	2b00      	cmp	r3, #0
 800676e:	f040 8093 	bne.w	8006898 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d01d      	beq.n	80067b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006778:	2208      	movs	r2, #8
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4413      	add	r3, r2
 800677e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f003 0307 	and.w	r3, r3, #7
 8006786:	2b00      	cmp	r3, #0
 8006788:	d014      	beq.n	80067b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f023 0307 	bic.w	r3, r3, #7
 8006790:	3308      	adds	r3, #8
 8006792:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f003 0307 	and.w	r3, r3, #7
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00a      	beq.n	80067b4 <pvPortMalloc+0x6c>
	__asm volatile
 800679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	617b      	str	r3, [r7, #20]
}
 80067b0:	bf00      	nop
 80067b2:	e7fe      	b.n	80067b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d06e      	beq.n	8006898 <pvPortMalloc+0x150>
 80067ba:	4b45      	ldr	r3, [pc, #276]	; (80068d0 <pvPortMalloc+0x188>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d869      	bhi.n	8006898 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80067c4:	4b43      	ldr	r3, [pc, #268]	; (80068d4 <pvPortMalloc+0x18c>)
 80067c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80067c8:	4b42      	ldr	r3, [pc, #264]	; (80068d4 <pvPortMalloc+0x18c>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067ce:	e004      	b.n	80067da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d903      	bls.n	80067ec <pvPortMalloc+0xa4>
 80067e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1f1      	bne.n	80067d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80067ec:	4b36      	ldr	r3, [pc, #216]	; (80068c8 <pvPortMalloc+0x180>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d050      	beq.n	8006898 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2208      	movs	r2, #8
 80067fc:	4413      	add	r3, r2
 80067fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	6a3b      	ldr	r3, [r7, #32]
 8006806:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	1ad2      	subs	r2, r2, r3
 8006810:	2308      	movs	r3, #8
 8006812:	005b      	lsls	r3, r3, #1
 8006814:	429a      	cmp	r2, r3
 8006816:	d91f      	bls.n	8006858 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4413      	add	r3, r2
 800681e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006820:	69bb      	ldr	r3, [r7, #24]
 8006822:	f003 0307 	and.w	r3, r3, #7
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00a      	beq.n	8006840 <pvPortMalloc+0xf8>
	__asm volatile
 800682a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682e:	f383 8811 	msr	BASEPRI, r3
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	f3bf 8f4f 	dsb	sy
 800683a:	613b      	str	r3, [r7, #16]
}
 800683c:	bf00      	nop
 800683e:	e7fe      	b.n	800683e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	1ad2      	subs	r2, r2, r3
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800684c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006852:	69b8      	ldr	r0, [r7, #24]
 8006854:	f000 f908 	bl	8006a68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006858:	4b1d      	ldr	r3, [pc, #116]	; (80068d0 <pvPortMalloc+0x188>)
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	4a1b      	ldr	r2, [pc, #108]	; (80068d0 <pvPortMalloc+0x188>)
 8006864:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006866:	4b1a      	ldr	r3, [pc, #104]	; (80068d0 <pvPortMalloc+0x188>)
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	4b1b      	ldr	r3, [pc, #108]	; (80068d8 <pvPortMalloc+0x190>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	429a      	cmp	r2, r3
 8006870:	d203      	bcs.n	800687a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006872:	4b17      	ldr	r3, [pc, #92]	; (80068d0 <pvPortMalloc+0x188>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a18      	ldr	r2, [pc, #96]	; (80068d8 <pvPortMalloc+0x190>)
 8006878:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800687a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	4b13      	ldr	r3, [pc, #76]	; (80068cc <pvPortMalloc+0x184>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	431a      	orrs	r2, r3
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	2200      	movs	r2, #0
 800688c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800688e:	4b13      	ldr	r3, [pc, #76]	; (80068dc <pvPortMalloc+0x194>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3301      	adds	r3, #1
 8006894:	4a11      	ldr	r2, [pc, #68]	; (80068dc <pvPortMalloc+0x194>)
 8006896:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006898:	f7ff f86a 	bl	8005970 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	f003 0307 	and.w	r3, r3, #7
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00a      	beq.n	80068bc <pvPortMalloc+0x174>
	__asm volatile
 80068a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068aa:	f383 8811 	msr	BASEPRI, r3
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f3bf 8f4f 	dsb	sy
 80068b6:	60fb      	str	r3, [r7, #12]
}
 80068b8:	bf00      	nop
 80068ba:	e7fe      	b.n	80068ba <pvPortMalloc+0x172>
	return pvReturn;
 80068bc:	69fb      	ldr	r3, [r7, #28]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3728      	adds	r7, #40	; 0x28
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20004198 	.word	0x20004198
 80068cc:	200041ac 	.word	0x200041ac
 80068d0:	2000419c 	.word	0x2000419c
 80068d4:	20004190 	.word	0x20004190
 80068d8:	200041a0 	.word	0x200041a0
 80068dc:	200041a4 	.word	0x200041a4

080068e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d04d      	beq.n	800698e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80068f2:	2308      	movs	r3, #8
 80068f4:	425b      	negs	r3, r3
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	4413      	add	r3, r2
 80068fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	4b24      	ldr	r3, [pc, #144]	; (8006998 <vPortFree+0xb8>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4013      	ands	r3, r2
 800690a:	2b00      	cmp	r3, #0
 800690c:	d10a      	bne.n	8006924 <vPortFree+0x44>
	__asm volatile
 800690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	60fb      	str	r3, [r7, #12]
}
 8006920:	bf00      	nop
 8006922:	e7fe      	b.n	8006922 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00a      	beq.n	8006942 <vPortFree+0x62>
	__asm volatile
 800692c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006930:	f383 8811 	msr	BASEPRI, r3
 8006934:	f3bf 8f6f 	isb	sy
 8006938:	f3bf 8f4f 	dsb	sy
 800693c:	60bb      	str	r3, [r7, #8]
}
 800693e:	bf00      	nop
 8006940:	e7fe      	b.n	8006940 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	4b14      	ldr	r3, [pc, #80]	; (8006998 <vPortFree+0xb8>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4013      	ands	r3, r2
 800694c:	2b00      	cmp	r3, #0
 800694e:	d01e      	beq.n	800698e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d11a      	bne.n	800698e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	4b0e      	ldr	r3, [pc, #56]	; (8006998 <vPortFree+0xb8>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	43db      	mvns	r3, r3
 8006962:	401a      	ands	r2, r3
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006968:	f7fe fff4 	bl	8005954 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	4b0a      	ldr	r3, [pc, #40]	; (800699c <vPortFree+0xbc>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4413      	add	r3, r2
 8006976:	4a09      	ldr	r2, [pc, #36]	; (800699c <vPortFree+0xbc>)
 8006978:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800697a:	6938      	ldr	r0, [r7, #16]
 800697c:	f000 f874 	bl	8006a68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006980:	4b07      	ldr	r3, [pc, #28]	; (80069a0 <vPortFree+0xc0>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	3301      	adds	r3, #1
 8006986:	4a06      	ldr	r2, [pc, #24]	; (80069a0 <vPortFree+0xc0>)
 8006988:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800698a:	f7fe fff1 	bl	8005970 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800698e:	bf00      	nop
 8006990:	3718      	adds	r7, #24
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	200041ac 	.word	0x200041ac
 800699c:	2000419c 	.word	0x2000419c
 80069a0:	200041a8 	.word	0x200041a8

080069a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80069aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80069ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80069b0:	4b27      	ldr	r3, [pc, #156]	; (8006a50 <prvHeapInit+0xac>)
 80069b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f003 0307 	and.w	r3, r3, #7
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00c      	beq.n	80069d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	3307      	adds	r3, #7
 80069c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f023 0307 	bic.w	r3, r3, #7
 80069ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80069cc:	68ba      	ldr	r2, [r7, #8]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	4a1f      	ldr	r2, [pc, #124]	; (8006a50 <prvHeapInit+0xac>)
 80069d4:	4413      	add	r3, r2
 80069d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80069dc:	4a1d      	ldr	r2, [pc, #116]	; (8006a54 <prvHeapInit+0xb0>)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80069e2:	4b1c      	ldr	r3, [pc, #112]	; (8006a54 <prvHeapInit+0xb0>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	4413      	add	r3, r2
 80069ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80069f0:	2208      	movs	r2, #8
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	1a9b      	subs	r3, r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f023 0307 	bic.w	r3, r3, #7
 80069fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4a15      	ldr	r2, [pc, #84]	; (8006a58 <prvHeapInit+0xb4>)
 8006a04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006a06:	4b14      	ldr	r3, [pc, #80]	; (8006a58 <prvHeapInit+0xb4>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a0e:	4b12      	ldr	r3, [pc, #72]	; (8006a58 <prvHeapInit+0xb4>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2200      	movs	r2, #0
 8006a14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	1ad2      	subs	r2, r2, r3
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a24:	4b0c      	ldr	r3, [pc, #48]	; (8006a58 <prvHeapInit+0xb4>)
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	4a0a      	ldr	r2, [pc, #40]	; (8006a5c <prvHeapInit+0xb8>)
 8006a32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	4a09      	ldr	r2, [pc, #36]	; (8006a60 <prvHeapInit+0xbc>)
 8006a3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a3c:	4b09      	ldr	r3, [pc, #36]	; (8006a64 <prvHeapInit+0xc0>)
 8006a3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a42:	601a      	str	r2, [r3, #0]
}
 8006a44:	bf00      	nop
 8006a46:	3714      	adds	r7, #20
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	20000590 	.word	0x20000590
 8006a54:	20004190 	.word	0x20004190
 8006a58:	20004198 	.word	0x20004198
 8006a5c:	200041a0 	.word	0x200041a0
 8006a60:	2000419c 	.word	0x2000419c
 8006a64:	200041ac 	.word	0x200041ac

08006a68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a70:	4b28      	ldr	r3, [pc, #160]	; (8006b14 <prvInsertBlockIntoFreeList+0xac>)
 8006a72:	60fb      	str	r3, [r7, #12]
 8006a74:	e002      	b.n	8006a7c <prvInsertBlockIntoFreeList+0x14>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	60fb      	str	r3, [r7, #12]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d8f7      	bhi.n	8006a76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	4413      	add	r3, r2
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d108      	bne.n	8006aaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	685a      	ldr	r2, [r3, #4]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	441a      	add	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	441a      	add	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d118      	bne.n	8006af0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	4b15      	ldr	r3, [pc, #84]	; (8006b18 <prvInsertBlockIntoFreeList+0xb0>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d00d      	beq.n	8006ae6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	441a      	add	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	e008      	b.n	8006af8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ae6:	4b0c      	ldr	r3, [pc, #48]	; (8006b18 <prvInsertBlockIntoFreeList+0xb0>)
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	601a      	str	r2, [r3, #0]
 8006aee:	e003      	b.n	8006af8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d002      	beq.n	8006b06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b06:	bf00      	nop
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	20004190 	.word	0x20004190
 8006b18:	20004198 	.word	0x20004198

08006b1c <__errno>:
 8006b1c:	4b01      	ldr	r3, [pc, #4]	; (8006b24 <__errno+0x8>)
 8006b1e:	6818      	ldr	r0, [r3, #0]
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	20000010 	.word	0x20000010

08006b28 <__libc_init_array>:
 8006b28:	b570      	push	{r4, r5, r6, lr}
 8006b2a:	4d0d      	ldr	r5, [pc, #52]	; (8006b60 <__libc_init_array+0x38>)
 8006b2c:	4c0d      	ldr	r4, [pc, #52]	; (8006b64 <__libc_init_array+0x3c>)
 8006b2e:	1b64      	subs	r4, r4, r5
 8006b30:	10a4      	asrs	r4, r4, #2
 8006b32:	2600      	movs	r6, #0
 8006b34:	42a6      	cmp	r6, r4
 8006b36:	d109      	bne.n	8006b4c <__libc_init_array+0x24>
 8006b38:	4d0b      	ldr	r5, [pc, #44]	; (8006b68 <__libc_init_array+0x40>)
 8006b3a:	4c0c      	ldr	r4, [pc, #48]	; (8006b6c <__libc_init_array+0x44>)
 8006b3c:	f002 fd80 	bl	8009640 <_init>
 8006b40:	1b64      	subs	r4, r4, r5
 8006b42:	10a4      	asrs	r4, r4, #2
 8006b44:	2600      	movs	r6, #0
 8006b46:	42a6      	cmp	r6, r4
 8006b48:	d105      	bne.n	8006b56 <__libc_init_array+0x2e>
 8006b4a:	bd70      	pop	{r4, r5, r6, pc}
 8006b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b50:	4798      	blx	r3
 8006b52:	3601      	adds	r6, #1
 8006b54:	e7ee      	b.n	8006b34 <__libc_init_array+0xc>
 8006b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b5a:	4798      	blx	r3
 8006b5c:	3601      	adds	r6, #1
 8006b5e:	e7f2      	b.n	8006b46 <__libc_init_array+0x1e>
 8006b60:	08009b0c 	.word	0x08009b0c
 8006b64:	08009b0c 	.word	0x08009b0c
 8006b68:	08009b0c 	.word	0x08009b0c
 8006b6c:	08009b10 	.word	0x08009b10

08006b70 <memcpy>:
 8006b70:	440a      	add	r2, r1
 8006b72:	4291      	cmp	r1, r2
 8006b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b78:	d100      	bne.n	8006b7c <memcpy+0xc>
 8006b7a:	4770      	bx	lr
 8006b7c:	b510      	push	{r4, lr}
 8006b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b86:	4291      	cmp	r1, r2
 8006b88:	d1f9      	bne.n	8006b7e <memcpy+0xe>
 8006b8a:	bd10      	pop	{r4, pc}

08006b8c <memset>:
 8006b8c:	4402      	add	r2, r0
 8006b8e:	4603      	mov	r3, r0
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d100      	bne.n	8006b96 <memset+0xa>
 8006b94:	4770      	bx	lr
 8006b96:	f803 1b01 	strb.w	r1, [r3], #1
 8006b9a:	e7f9      	b.n	8006b90 <memset+0x4>

08006b9c <__cvt>:
 8006b9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba0:	ec55 4b10 	vmov	r4, r5, d0
 8006ba4:	2d00      	cmp	r5, #0
 8006ba6:	460e      	mov	r6, r1
 8006ba8:	4619      	mov	r1, r3
 8006baa:	462b      	mov	r3, r5
 8006bac:	bfbb      	ittet	lt
 8006bae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006bb2:	461d      	movlt	r5, r3
 8006bb4:	2300      	movge	r3, #0
 8006bb6:	232d      	movlt	r3, #45	; 0x2d
 8006bb8:	700b      	strb	r3, [r1, #0]
 8006bba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006bc0:	4691      	mov	r9, r2
 8006bc2:	f023 0820 	bic.w	r8, r3, #32
 8006bc6:	bfbc      	itt	lt
 8006bc8:	4622      	movlt	r2, r4
 8006bca:	4614      	movlt	r4, r2
 8006bcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006bd0:	d005      	beq.n	8006bde <__cvt+0x42>
 8006bd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006bd6:	d100      	bne.n	8006bda <__cvt+0x3e>
 8006bd8:	3601      	adds	r6, #1
 8006bda:	2102      	movs	r1, #2
 8006bdc:	e000      	b.n	8006be0 <__cvt+0x44>
 8006bde:	2103      	movs	r1, #3
 8006be0:	ab03      	add	r3, sp, #12
 8006be2:	9301      	str	r3, [sp, #4]
 8006be4:	ab02      	add	r3, sp, #8
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	ec45 4b10 	vmov	d0, r4, r5
 8006bec:	4653      	mov	r3, sl
 8006bee:	4632      	mov	r2, r6
 8006bf0:	f000 fe1a 	bl	8007828 <_dtoa_r>
 8006bf4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006bf8:	4607      	mov	r7, r0
 8006bfa:	d102      	bne.n	8006c02 <__cvt+0x66>
 8006bfc:	f019 0f01 	tst.w	r9, #1
 8006c00:	d022      	beq.n	8006c48 <__cvt+0xac>
 8006c02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006c06:	eb07 0906 	add.w	r9, r7, r6
 8006c0a:	d110      	bne.n	8006c2e <__cvt+0x92>
 8006c0c:	783b      	ldrb	r3, [r7, #0]
 8006c0e:	2b30      	cmp	r3, #48	; 0x30
 8006c10:	d10a      	bne.n	8006c28 <__cvt+0x8c>
 8006c12:	2200      	movs	r2, #0
 8006c14:	2300      	movs	r3, #0
 8006c16:	4620      	mov	r0, r4
 8006c18:	4629      	mov	r1, r5
 8006c1a:	f7f9 ff55 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c1e:	b918      	cbnz	r0, 8006c28 <__cvt+0x8c>
 8006c20:	f1c6 0601 	rsb	r6, r6, #1
 8006c24:	f8ca 6000 	str.w	r6, [sl]
 8006c28:	f8da 3000 	ldr.w	r3, [sl]
 8006c2c:	4499      	add	r9, r3
 8006c2e:	2200      	movs	r2, #0
 8006c30:	2300      	movs	r3, #0
 8006c32:	4620      	mov	r0, r4
 8006c34:	4629      	mov	r1, r5
 8006c36:	f7f9 ff47 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c3a:	b108      	cbz	r0, 8006c40 <__cvt+0xa4>
 8006c3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006c40:	2230      	movs	r2, #48	; 0x30
 8006c42:	9b03      	ldr	r3, [sp, #12]
 8006c44:	454b      	cmp	r3, r9
 8006c46:	d307      	bcc.n	8006c58 <__cvt+0xbc>
 8006c48:	9b03      	ldr	r3, [sp, #12]
 8006c4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006c4c:	1bdb      	subs	r3, r3, r7
 8006c4e:	4638      	mov	r0, r7
 8006c50:	6013      	str	r3, [r2, #0]
 8006c52:	b004      	add	sp, #16
 8006c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c58:	1c59      	adds	r1, r3, #1
 8006c5a:	9103      	str	r1, [sp, #12]
 8006c5c:	701a      	strb	r2, [r3, #0]
 8006c5e:	e7f0      	b.n	8006c42 <__cvt+0xa6>

08006c60 <__exponent>:
 8006c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c62:	4603      	mov	r3, r0
 8006c64:	2900      	cmp	r1, #0
 8006c66:	bfb8      	it	lt
 8006c68:	4249      	neglt	r1, r1
 8006c6a:	f803 2b02 	strb.w	r2, [r3], #2
 8006c6e:	bfb4      	ite	lt
 8006c70:	222d      	movlt	r2, #45	; 0x2d
 8006c72:	222b      	movge	r2, #43	; 0x2b
 8006c74:	2909      	cmp	r1, #9
 8006c76:	7042      	strb	r2, [r0, #1]
 8006c78:	dd2a      	ble.n	8006cd0 <__exponent+0x70>
 8006c7a:	f10d 0407 	add.w	r4, sp, #7
 8006c7e:	46a4      	mov	ip, r4
 8006c80:	270a      	movs	r7, #10
 8006c82:	46a6      	mov	lr, r4
 8006c84:	460a      	mov	r2, r1
 8006c86:	fb91 f6f7 	sdiv	r6, r1, r7
 8006c8a:	fb07 1516 	mls	r5, r7, r6, r1
 8006c8e:	3530      	adds	r5, #48	; 0x30
 8006c90:	2a63      	cmp	r2, #99	; 0x63
 8006c92:	f104 34ff 	add.w	r4, r4, #4294967295
 8006c96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006c9a:	4631      	mov	r1, r6
 8006c9c:	dcf1      	bgt.n	8006c82 <__exponent+0x22>
 8006c9e:	3130      	adds	r1, #48	; 0x30
 8006ca0:	f1ae 0502 	sub.w	r5, lr, #2
 8006ca4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006ca8:	1c44      	adds	r4, r0, #1
 8006caa:	4629      	mov	r1, r5
 8006cac:	4561      	cmp	r1, ip
 8006cae:	d30a      	bcc.n	8006cc6 <__exponent+0x66>
 8006cb0:	f10d 0209 	add.w	r2, sp, #9
 8006cb4:	eba2 020e 	sub.w	r2, r2, lr
 8006cb8:	4565      	cmp	r5, ip
 8006cba:	bf88      	it	hi
 8006cbc:	2200      	movhi	r2, #0
 8006cbe:	4413      	add	r3, r2
 8006cc0:	1a18      	subs	r0, r3, r0
 8006cc2:	b003      	add	sp, #12
 8006cc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cca:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006cce:	e7ed      	b.n	8006cac <__exponent+0x4c>
 8006cd0:	2330      	movs	r3, #48	; 0x30
 8006cd2:	3130      	adds	r1, #48	; 0x30
 8006cd4:	7083      	strb	r3, [r0, #2]
 8006cd6:	70c1      	strb	r1, [r0, #3]
 8006cd8:	1d03      	adds	r3, r0, #4
 8006cda:	e7f1      	b.n	8006cc0 <__exponent+0x60>

08006cdc <_printf_float>:
 8006cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce0:	ed2d 8b02 	vpush	{d8}
 8006ce4:	b08d      	sub	sp, #52	; 0x34
 8006ce6:	460c      	mov	r4, r1
 8006ce8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006cec:	4616      	mov	r6, r2
 8006cee:	461f      	mov	r7, r3
 8006cf0:	4605      	mov	r5, r0
 8006cf2:	f001 fd3d 	bl	8008770 <_localeconv_r>
 8006cf6:	f8d0 a000 	ldr.w	sl, [r0]
 8006cfa:	4650      	mov	r0, sl
 8006cfc:	f7f9 fa68 	bl	80001d0 <strlen>
 8006d00:	2300      	movs	r3, #0
 8006d02:	930a      	str	r3, [sp, #40]	; 0x28
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	9305      	str	r3, [sp, #20]
 8006d08:	f8d8 3000 	ldr.w	r3, [r8]
 8006d0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006d10:	3307      	adds	r3, #7
 8006d12:	f023 0307 	bic.w	r3, r3, #7
 8006d16:	f103 0208 	add.w	r2, r3, #8
 8006d1a:	f8c8 2000 	str.w	r2, [r8]
 8006d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d22:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006d26:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006d2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006d2e:	9307      	str	r3, [sp, #28]
 8006d30:	f8cd 8018 	str.w	r8, [sp, #24]
 8006d34:	ee08 0a10 	vmov	s16, r0
 8006d38:	4b9f      	ldr	r3, [pc, #636]	; (8006fb8 <_printf_float+0x2dc>)
 8006d3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d42:	f7f9 fef3 	bl	8000b2c <__aeabi_dcmpun>
 8006d46:	bb88      	cbnz	r0, 8006dac <_printf_float+0xd0>
 8006d48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006d4c:	4b9a      	ldr	r3, [pc, #616]	; (8006fb8 <_printf_float+0x2dc>)
 8006d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d52:	f7f9 fecd 	bl	8000af0 <__aeabi_dcmple>
 8006d56:	bb48      	cbnz	r0, 8006dac <_printf_float+0xd0>
 8006d58:	2200      	movs	r2, #0
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	4640      	mov	r0, r8
 8006d5e:	4649      	mov	r1, r9
 8006d60:	f7f9 febc 	bl	8000adc <__aeabi_dcmplt>
 8006d64:	b110      	cbz	r0, 8006d6c <_printf_float+0x90>
 8006d66:	232d      	movs	r3, #45	; 0x2d
 8006d68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d6c:	4b93      	ldr	r3, [pc, #588]	; (8006fbc <_printf_float+0x2e0>)
 8006d6e:	4894      	ldr	r0, [pc, #592]	; (8006fc0 <_printf_float+0x2e4>)
 8006d70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006d74:	bf94      	ite	ls
 8006d76:	4698      	movls	r8, r3
 8006d78:	4680      	movhi	r8, r0
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	6123      	str	r3, [r4, #16]
 8006d7e:	9b05      	ldr	r3, [sp, #20]
 8006d80:	f023 0204 	bic.w	r2, r3, #4
 8006d84:	6022      	str	r2, [r4, #0]
 8006d86:	f04f 0900 	mov.w	r9, #0
 8006d8a:	9700      	str	r7, [sp, #0]
 8006d8c:	4633      	mov	r3, r6
 8006d8e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006d90:	4621      	mov	r1, r4
 8006d92:	4628      	mov	r0, r5
 8006d94:	f000 f9d8 	bl	8007148 <_printf_common>
 8006d98:	3001      	adds	r0, #1
 8006d9a:	f040 8090 	bne.w	8006ebe <_printf_float+0x1e2>
 8006d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006da2:	b00d      	add	sp, #52	; 0x34
 8006da4:	ecbd 8b02 	vpop	{d8}
 8006da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dac:	4642      	mov	r2, r8
 8006dae:	464b      	mov	r3, r9
 8006db0:	4640      	mov	r0, r8
 8006db2:	4649      	mov	r1, r9
 8006db4:	f7f9 feba 	bl	8000b2c <__aeabi_dcmpun>
 8006db8:	b140      	cbz	r0, 8006dcc <_printf_float+0xf0>
 8006dba:	464b      	mov	r3, r9
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	bfbc      	itt	lt
 8006dc0:	232d      	movlt	r3, #45	; 0x2d
 8006dc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006dc6:	487f      	ldr	r0, [pc, #508]	; (8006fc4 <_printf_float+0x2e8>)
 8006dc8:	4b7f      	ldr	r3, [pc, #508]	; (8006fc8 <_printf_float+0x2ec>)
 8006dca:	e7d1      	b.n	8006d70 <_printf_float+0x94>
 8006dcc:	6863      	ldr	r3, [r4, #4]
 8006dce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006dd2:	9206      	str	r2, [sp, #24]
 8006dd4:	1c5a      	adds	r2, r3, #1
 8006dd6:	d13f      	bne.n	8006e58 <_printf_float+0x17c>
 8006dd8:	2306      	movs	r3, #6
 8006dda:	6063      	str	r3, [r4, #4]
 8006ddc:	9b05      	ldr	r3, [sp, #20]
 8006dde:	6861      	ldr	r1, [r4, #4]
 8006de0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006de4:	2300      	movs	r3, #0
 8006de6:	9303      	str	r3, [sp, #12]
 8006de8:	ab0a      	add	r3, sp, #40	; 0x28
 8006dea:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006dee:	ab09      	add	r3, sp, #36	; 0x24
 8006df0:	ec49 8b10 	vmov	d0, r8, r9
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	6022      	str	r2, [r4, #0]
 8006df8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	f7ff fecd 	bl	8006b9c <__cvt>
 8006e02:	9b06      	ldr	r3, [sp, #24]
 8006e04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e06:	2b47      	cmp	r3, #71	; 0x47
 8006e08:	4680      	mov	r8, r0
 8006e0a:	d108      	bne.n	8006e1e <_printf_float+0x142>
 8006e0c:	1cc8      	adds	r0, r1, #3
 8006e0e:	db02      	blt.n	8006e16 <_printf_float+0x13a>
 8006e10:	6863      	ldr	r3, [r4, #4]
 8006e12:	4299      	cmp	r1, r3
 8006e14:	dd41      	ble.n	8006e9a <_printf_float+0x1be>
 8006e16:	f1ab 0b02 	sub.w	fp, fp, #2
 8006e1a:	fa5f fb8b 	uxtb.w	fp, fp
 8006e1e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e22:	d820      	bhi.n	8006e66 <_printf_float+0x18a>
 8006e24:	3901      	subs	r1, #1
 8006e26:	465a      	mov	r2, fp
 8006e28:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006e2c:	9109      	str	r1, [sp, #36]	; 0x24
 8006e2e:	f7ff ff17 	bl	8006c60 <__exponent>
 8006e32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e34:	1813      	adds	r3, r2, r0
 8006e36:	2a01      	cmp	r2, #1
 8006e38:	4681      	mov	r9, r0
 8006e3a:	6123      	str	r3, [r4, #16]
 8006e3c:	dc02      	bgt.n	8006e44 <_printf_float+0x168>
 8006e3e:	6822      	ldr	r2, [r4, #0]
 8006e40:	07d2      	lsls	r2, r2, #31
 8006e42:	d501      	bpl.n	8006e48 <_printf_float+0x16c>
 8006e44:	3301      	adds	r3, #1
 8006e46:	6123      	str	r3, [r4, #16]
 8006e48:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d09c      	beq.n	8006d8a <_printf_float+0xae>
 8006e50:	232d      	movs	r3, #45	; 0x2d
 8006e52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e56:	e798      	b.n	8006d8a <_printf_float+0xae>
 8006e58:	9a06      	ldr	r2, [sp, #24]
 8006e5a:	2a47      	cmp	r2, #71	; 0x47
 8006e5c:	d1be      	bne.n	8006ddc <_printf_float+0x100>
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1bc      	bne.n	8006ddc <_printf_float+0x100>
 8006e62:	2301      	movs	r3, #1
 8006e64:	e7b9      	b.n	8006dda <_printf_float+0xfe>
 8006e66:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006e6a:	d118      	bne.n	8006e9e <_printf_float+0x1c2>
 8006e6c:	2900      	cmp	r1, #0
 8006e6e:	6863      	ldr	r3, [r4, #4]
 8006e70:	dd0b      	ble.n	8006e8a <_printf_float+0x1ae>
 8006e72:	6121      	str	r1, [r4, #16]
 8006e74:	b913      	cbnz	r3, 8006e7c <_printf_float+0x1a0>
 8006e76:	6822      	ldr	r2, [r4, #0]
 8006e78:	07d0      	lsls	r0, r2, #31
 8006e7a:	d502      	bpl.n	8006e82 <_printf_float+0x1a6>
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	440b      	add	r3, r1
 8006e80:	6123      	str	r3, [r4, #16]
 8006e82:	65a1      	str	r1, [r4, #88]	; 0x58
 8006e84:	f04f 0900 	mov.w	r9, #0
 8006e88:	e7de      	b.n	8006e48 <_printf_float+0x16c>
 8006e8a:	b913      	cbnz	r3, 8006e92 <_printf_float+0x1b6>
 8006e8c:	6822      	ldr	r2, [r4, #0]
 8006e8e:	07d2      	lsls	r2, r2, #31
 8006e90:	d501      	bpl.n	8006e96 <_printf_float+0x1ba>
 8006e92:	3302      	adds	r3, #2
 8006e94:	e7f4      	b.n	8006e80 <_printf_float+0x1a4>
 8006e96:	2301      	movs	r3, #1
 8006e98:	e7f2      	b.n	8006e80 <_printf_float+0x1a4>
 8006e9a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ea0:	4299      	cmp	r1, r3
 8006ea2:	db05      	blt.n	8006eb0 <_printf_float+0x1d4>
 8006ea4:	6823      	ldr	r3, [r4, #0]
 8006ea6:	6121      	str	r1, [r4, #16]
 8006ea8:	07d8      	lsls	r0, r3, #31
 8006eaa:	d5ea      	bpl.n	8006e82 <_printf_float+0x1a6>
 8006eac:	1c4b      	adds	r3, r1, #1
 8006eae:	e7e7      	b.n	8006e80 <_printf_float+0x1a4>
 8006eb0:	2900      	cmp	r1, #0
 8006eb2:	bfd4      	ite	le
 8006eb4:	f1c1 0202 	rsble	r2, r1, #2
 8006eb8:	2201      	movgt	r2, #1
 8006eba:	4413      	add	r3, r2
 8006ebc:	e7e0      	b.n	8006e80 <_printf_float+0x1a4>
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	055a      	lsls	r2, r3, #21
 8006ec2:	d407      	bmi.n	8006ed4 <_printf_float+0x1f8>
 8006ec4:	6923      	ldr	r3, [r4, #16]
 8006ec6:	4642      	mov	r2, r8
 8006ec8:	4631      	mov	r1, r6
 8006eca:	4628      	mov	r0, r5
 8006ecc:	47b8      	blx	r7
 8006ece:	3001      	adds	r0, #1
 8006ed0:	d12c      	bne.n	8006f2c <_printf_float+0x250>
 8006ed2:	e764      	b.n	8006d9e <_printf_float+0xc2>
 8006ed4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ed8:	f240 80e0 	bls.w	800709c <_printf_float+0x3c0>
 8006edc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	f7f9 fdf0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ee8:	2800      	cmp	r0, #0
 8006eea:	d034      	beq.n	8006f56 <_printf_float+0x27a>
 8006eec:	4a37      	ldr	r2, [pc, #220]	; (8006fcc <_printf_float+0x2f0>)
 8006eee:	2301      	movs	r3, #1
 8006ef0:	4631      	mov	r1, r6
 8006ef2:	4628      	mov	r0, r5
 8006ef4:	47b8      	blx	r7
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	f43f af51 	beq.w	8006d9e <_printf_float+0xc2>
 8006efc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f00:	429a      	cmp	r2, r3
 8006f02:	db02      	blt.n	8006f0a <_printf_float+0x22e>
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	07d8      	lsls	r0, r3, #31
 8006f08:	d510      	bpl.n	8006f2c <_printf_float+0x250>
 8006f0a:	ee18 3a10 	vmov	r3, s16
 8006f0e:	4652      	mov	r2, sl
 8006f10:	4631      	mov	r1, r6
 8006f12:	4628      	mov	r0, r5
 8006f14:	47b8      	blx	r7
 8006f16:	3001      	adds	r0, #1
 8006f18:	f43f af41 	beq.w	8006d9e <_printf_float+0xc2>
 8006f1c:	f04f 0800 	mov.w	r8, #0
 8006f20:	f104 091a 	add.w	r9, r4, #26
 8006f24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f26:	3b01      	subs	r3, #1
 8006f28:	4543      	cmp	r3, r8
 8006f2a:	dc09      	bgt.n	8006f40 <_printf_float+0x264>
 8006f2c:	6823      	ldr	r3, [r4, #0]
 8006f2e:	079b      	lsls	r3, r3, #30
 8006f30:	f100 8105 	bmi.w	800713e <_printf_float+0x462>
 8006f34:	68e0      	ldr	r0, [r4, #12]
 8006f36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f38:	4298      	cmp	r0, r3
 8006f3a:	bfb8      	it	lt
 8006f3c:	4618      	movlt	r0, r3
 8006f3e:	e730      	b.n	8006da2 <_printf_float+0xc6>
 8006f40:	2301      	movs	r3, #1
 8006f42:	464a      	mov	r2, r9
 8006f44:	4631      	mov	r1, r6
 8006f46:	4628      	mov	r0, r5
 8006f48:	47b8      	blx	r7
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	f43f af27 	beq.w	8006d9e <_printf_float+0xc2>
 8006f50:	f108 0801 	add.w	r8, r8, #1
 8006f54:	e7e6      	b.n	8006f24 <_printf_float+0x248>
 8006f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	dc39      	bgt.n	8006fd0 <_printf_float+0x2f4>
 8006f5c:	4a1b      	ldr	r2, [pc, #108]	; (8006fcc <_printf_float+0x2f0>)
 8006f5e:	2301      	movs	r3, #1
 8006f60:	4631      	mov	r1, r6
 8006f62:	4628      	mov	r0, r5
 8006f64:	47b8      	blx	r7
 8006f66:	3001      	adds	r0, #1
 8006f68:	f43f af19 	beq.w	8006d9e <_printf_float+0xc2>
 8006f6c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f70:	4313      	orrs	r3, r2
 8006f72:	d102      	bne.n	8006f7a <_printf_float+0x29e>
 8006f74:	6823      	ldr	r3, [r4, #0]
 8006f76:	07d9      	lsls	r1, r3, #31
 8006f78:	d5d8      	bpl.n	8006f2c <_printf_float+0x250>
 8006f7a:	ee18 3a10 	vmov	r3, s16
 8006f7e:	4652      	mov	r2, sl
 8006f80:	4631      	mov	r1, r6
 8006f82:	4628      	mov	r0, r5
 8006f84:	47b8      	blx	r7
 8006f86:	3001      	adds	r0, #1
 8006f88:	f43f af09 	beq.w	8006d9e <_printf_float+0xc2>
 8006f8c:	f04f 0900 	mov.w	r9, #0
 8006f90:	f104 0a1a 	add.w	sl, r4, #26
 8006f94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f96:	425b      	negs	r3, r3
 8006f98:	454b      	cmp	r3, r9
 8006f9a:	dc01      	bgt.n	8006fa0 <_printf_float+0x2c4>
 8006f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f9e:	e792      	b.n	8006ec6 <_printf_float+0x1ea>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	4652      	mov	r2, sl
 8006fa4:	4631      	mov	r1, r6
 8006fa6:	4628      	mov	r0, r5
 8006fa8:	47b8      	blx	r7
 8006faa:	3001      	adds	r0, #1
 8006fac:	f43f aef7 	beq.w	8006d9e <_printf_float+0xc2>
 8006fb0:	f109 0901 	add.w	r9, r9, #1
 8006fb4:	e7ee      	b.n	8006f94 <_printf_float+0x2b8>
 8006fb6:	bf00      	nop
 8006fb8:	7fefffff 	.word	0x7fefffff
 8006fbc:	08009728 	.word	0x08009728
 8006fc0:	0800972c 	.word	0x0800972c
 8006fc4:	08009734 	.word	0x08009734
 8006fc8:	08009730 	.word	0x08009730
 8006fcc:	08009738 	.word	0x08009738
 8006fd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	bfa8      	it	ge
 8006fd8:	461a      	movge	r2, r3
 8006fda:	2a00      	cmp	r2, #0
 8006fdc:	4691      	mov	r9, r2
 8006fde:	dc37      	bgt.n	8007050 <_printf_float+0x374>
 8006fe0:	f04f 0b00 	mov.w	fp, #0
 8006fe4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006fe8:	f104 021a 	add.w	r2, r4, #26
 8006fec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006fee:	9305      	str	r3, [sp, #20]
 8006ff0:	eba3 0309 	sub.w	r3, r3, r9
 8006ff4:	455b      	cmp	r3, fp
 8006ff6:	dc33      	bgt.n	8007060 <_printf_float+0x384>
 8006ff8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	db3b      	blt.n	8007078 <_printf_float+0x39c>
 8007000:	6823      	ldr	r3, [r4, #0]
 8007002:	07da      	lsls	r2, r3, #31
 8007004:	d438      	bmi.n	8007078 <_printf_float+0x39c>
 8007006:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007008:	9b05      	ldr	r3, [sp, #20]
 800700a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	eba2 0901 	sub.w	r9, r2, r1
 8007012:	4599      	cmp	r9, r3
 8007014:	bfa8      	it	ge
 8007016:	4699      	movge	r9, r3
 8007018:	f1b9 0f00 	cmp.w	r9, #0
 800701c:	dc35      	bgt.n	800708a <_printf_float+0x3ae>
 800701e:	f04f 0800 	mov.w	r8, #0
 8007022:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007026:	f104 0a1a 	add.w	sl, r4, #26
 800702a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800702e:	1a9b      	subs	r3, r3, r2
 8007030:	eba3 0309 	sub.w	r3, r3, r9
 8007034:	4543      	cmp	r3, r8
 8007036:	f77f af79 	ble.w	8006f2c <_printf_float+0x250>
 800703a:	2301      	movs	r3, #1
 800703c:	4652      	mov	r2, sl
 800703e:	4631      	mov	r1, r6
 8007040:	4628      	mov	r0, r5
 8007042:	47b8      	blx	r7
 8007044:	3001      	adds	r0, #1
 8007046:	f43f aeaa 	beq.w	8006d9e <_printf_float+0xc2>
 800704a:	f108 0801 	add.w	r8, r8, #1
 800704e:	e7ec      	b.n	800702a <_printf_float+0x34e>
 8007050:	4613      	mov	r3, r2
 8007052:	4631      	mov	r1, r6
 8007054:	4642      	mov	r2, r8
 8007056:	4628      	mov	r0, r5
 8007058:	47b8      	blx	r7
 800705a:	3001      	adds	r0, #1
 800705c:	d1c0      	bne.n	8006fe0 <_printf_float+0x304>
 800705e:	e69e      	b.n	8006d9e <_printf_float+0xc2>
 8007060:	2301      	movs	r3, #1
 8007062:	4631      	mov	r1, r6
 8007064:	4628      	mov	r0, r5
 8007066:	9205      	str	r2, [sp, #20]
 8007068:	47b8      	blx	r7
 800706a:	3001      	adds	r0, #1
 800706c:	f43f ae97 	beq.w	8006d9e <_printf_float+0xc2>
 8007070:	9a05      	ldr	r2, [sp, #20]
 8007072:	f10b 0b01 	add.w	fp, fp, #1
 8007076:	e7b9      	b.n	8006fec <_printf_float+0x310>
 8007078:	ee18 3a10 	vmov	r3, s16
 800707c:	4652      	mov	r2, sl
 800707e:	4631      	mov	r1, r6
 8007080:	4628      	mov	r0, r5
 8007082:	47b8      	blx	r7
 8007084:	3001      	adds	r0, #1
 8007086:	d1be      	bne.n	8007006 <_printf_float+0x32a>
 8007088:	e689      	b.n	8006d9e <_printf_float+0xc2>
 800708a:	9a05      	ldr	r2, [sp, #20]
 800708c:	464b      	mov	r3, r9
 800708e:	4442      	add	r2, r8
 8007090:	4631      	mov	r1, r6
 8007092:	4628      	mov	r0, r5
 8007094:	47b8      	blx	r7
 8007096:	3001      	adds	r0, #1
 8007098:	d1c1      	bne.n	800701e <_printf_float+0x342>
 800709a:	e680      	b.n	8006d9e <_printf_float+0xc2>
 800709c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800709e:	2a01      	cmp	r2, #1
 80070a0:	dc01      	bgt.n	80070a6 <_printf_float+0x3ca>
 80070a2:	07db      	lsls	r3, r3, #31
 80070a4:	d538      	bpl.n	8007118 <_printf_float+0x43c>
 80070a6:	2301      	movs	r3, #1
 80070a8:	4642      	mov	r2, r8
 80070aa:	4631      	mov	r1, r6
 80070ac:	4628      	mov	r0, r5
 80070ae:	47b8      	blx	r7
 80070b0:	3001      	adds	r0, #1
 80070b2:	f43f ae74 	beq.w	8006d9e <_printf_float+0xc2>
 80070b6:	ee18 3a10 	vmov	r3, s16
 80070ba:	4652      	mov	r2, sl
 80070bc:	4631      	mov	r1, r6
 80070be:	4628      	mov	r0, r5
 80070c0:	47b8      	blx	r7
 80070c2:	3001      	adds	r0, #1
 80070c4:	f43f ae6b 	beq.w	8006d9e <_printf_float+0xc2>
 80070c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80070cc:	2200      	movs	r2, #0
 80070ce:	2300      	movs	r3, #0
 80070d0:	f7f9 fcfa 	bl	8000ac8 <__aeabi_dcmpeq>
 80070d4:	b9d8      	cbnz	r0, 800710e <_printf_float+0x432>
 80070d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070d8:	f108 0201 	add.w	r2, r8, #1
 80070dc:	3b01      	subs	r3, #1
 80070de:	4631      	mov	r1, r6
 80070e0:	4628      	mov	r0, r5
 80070e2:	47b8      	blx	r7
 80070e4:	3001      	adds	r0, #1
 80070e6:	d10e      	bne.n	8007106 <_printf_float+0x42a>
 80070e8:	e659      	b.n	8006d9e <_printf_float+0xc2>
 80070ea:	2301      	movs	r3, #1
 80070ec:	4652      	mov	r2, sl
 80070ee:	4631      	mov	r1, r6
 80070f0:	4628      	mov	r0, r5
 80070f2:	47b8      	blx	r7
 80070f4:	3001      	adds	r0, #1
 80070f6:	f43f ae52 	beq.w	8006d9e <_printf_float+0xc2>
 80070fa:	f108 0801 	add.w	r8, r8, #1
 80070fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007100:	3b01      	subs	r3, #1
 8007102:	4543      	cmp	r3, r8
 8007104:	dcf1      	bgt.n	80070ea <_printf_float+0x40e>
 8007106:	464b      	mov	r3, r9
 8007108:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800710c:	e6dc      	b.n	8006ec8 <_printf_float+0x1ec>
 800710e:	f04f 0800 	mov.w	r8, #0
 8007112:	f104 0a1a 	add.w	sl, r4, #26
 8007116:	e7f2      	b.n	80070fe <_printf_float+0x422>
 8007118:	2301      	movs	r3, #1
 800711a:	4642      	mov	r2, r8
 800711c:	e7df      	b.n	80070de <_printf_float+0x402>
 800711e:	2301      	movs	r3, #1
 8007120:	464a      	mov	r2, r9
 8007122:	4631      	mov	r1, r6
 8007124:	4628      	mov	r0, r5
 8007126:	47b8      	blx	r7
 8007128:	3001      	adds	r0, #1
 800712a:	f43f ae38 	beq.w	8006d9e <_printf_float+0xc2>
 800712e:	f108 0801 	add.w	r8, r8, #1
 8007132:	68e3      	ldr	r3, [r4, #12]
 8007134:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007136:	1a5b      	subs	r3, r3, r1
 8007138:	4543      	cmp	r3, r8
 800713a:	dcf0      	bgt.n	800711e <_printf_float+0x442>
 800713c:	e6fa      	b.n	8006f34 <_printf_float+0x258>
 800713e:	f04f 0800 	mov.w	r8, #0
 8007142:	f104 0919 	add.w	r9, r4, #25
 8007146:	e7f4      	b.n	8007132 <_printf_float+0x456>

08007148 <_printf_common>:
 8007148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800714c:	4616      	mov	r6, r2
 800714e:	4699      	mov	r9, r3
 8007150:	688a      	ldr	r2, [r1, #8]
 8007152:	690b      	ldr	r3, [r1, #16]
 8007154:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007158:	4293      	cmp	r3, r2
 800715a:	bfb8      	it	lt
 800715c:	4613      	movlt	r3, r2
 800715e:	6033      	str	r3, [r6, #0]
 8007160:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007164:	4607      	mov	r7, r0
 8007166:	460c      	mov	r4, r1
 8007168:	b10a      	cbz	r2, 800716e <_printf_common+0x26>
 800716a:	3301      	adds	r3, #1
 800716c:	6033      	str	r3, [r6, #0]
 800716e:	6823      	ldr	r3, [r4, #0]
 8007170:	0699      	lsls	r1, r3, #26
 8007172:	bf42      	ittt	mi
 8007174:	6833      	ldrmi	r3, [r6, #0]
 8007176:	3302      	addmi	r3, #2
 8007178:	6033      	strmi	r3, [r6, #0]
 800717a:	6825      	ldr	r5, [r4, #0]
 800717c:	f015 0506 	ands.w	r5, r5, #6
 8007180:	d106      	bne.n	8007190 <_printf_common+0x48>
 8007182:	f104 0a19 	add.w	sl, r4, #25
 8007186:	68e3      	ldr	r3, [r4, #12]
 8007188:	6832      	ldr	r2, [r6, #0]
 800718a:	1a9b      	subs	r3, r3, r2
 800718c:	42ab      	cmp	r3, r5
 800718e:	dc26      	bgt.n	80071de <_printf_common+0x96>
 8007190:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007194:	1e13      	subs	r3, r2, #0
 8007196:	6822      	ldr	r2, [r4, #0]
 8007198:	bf18      	it	ne
 800719a:	2301      	movne	r3, #1
 800719c:	0692      	lsls	r2, r2, #26
 800719e:	d42b      	bmi.n	80071f8 <_printf_common+0xb0>
 80071a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80071a4:	4649      	mov	r1, r9
 80071a6:	4638      	mov	r0, r7
 80071a8:	47c0      	blx	r8
 80071aa:	3001      	adds	r0, #1
 80071ac:	d01e      	beq.n	80071ec <_printf_common+0xa4>
 80071ae:	6823      	ldr	r3, [r4, #0]
 80071b0:	68e5      	ldr	r5, [r4, #12]
 80071b2:	6832      	ldr	r2, [r6, #0]
 80071b4:	f003 0306 	and.w	r3, r3, #6
 80071b8:	2b04      	cmp	r3, #4
 80071ba:	bf08      	it	eq
 80071bc:	1aad      	subeq	r5, r5, r2
 80071be:	68a3      	ldr	r3, [r4, #8]
 80071c0:	6922      	ldr	r2, [r4, #16]
 80071c2:	bf0c      	ite	eq
 80071c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80071c8:	2500      	movne	r5, #0
 80071ca:	4293      	cmp	r3, r2
 80071cc:	bfc4      	itt	gt
 80071ce:	1a9b      	subgt	r3, r3, r2
 80071d0:	18ed      	addgt	r5, r5, r3
 80071d2:	2600      	movs	r6, #0
 80071d4:	341a      	adds	r4, #26
 80071d6:	42b5      	cmp	r5, r6
 80071d8:	d11a      	bne.n	8007210 <_printf_common+0xc8>
 80071da:	2000      	movs	r0, #0
 80071dc:	e008      	b.n	80071f0 <_printf_common+0xa8>
 80071de:	2301      	movs	r3, #1
 80071e0:	4652      	mov	r2, sl
 80071e2:	4649      	mov	r1, r9
 80071e4:	4638      	mov	r0, r7
 80071e6:	47c0      	blx	r8
 80071e8:	3001      	adds	r0, #1
 80071ea:	d103      	bne.n	80071f4 <_printf_common+0xac>
 80071ec:	f04f 30ff 	mov.w	r0, #4294967295
 80071f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071f4:	3501      	adds	r5, #1
 80071f6:	e7c6      	b.n	8007186 <_printf_common+0x3e>
 80071f8:	18e1      	adds	r1, r4, r3
 80071fa:	1c5a      	adds	r2, r3, #1
 80071fc:	2030      	movs	r0, #48	; 0x30
 80071fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007202:	4422      	add	r2, r4
 8007204:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007208:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800720c:	3302      	adds	r3, #2
 800720e:	e7c7      	b.n	80071a0 <_printf_common+0x58>
 8007210:	2301      	movs	r3, #1
 8007212:	4622      	mov	r2, r4
 8007214:	4649      	mov	r1, r9
 8007216:	4638      	mov	r0, r7
 8007218:	47c0      	blx	r8
 800721a:	3001      	adds	r0, #1
 800721c:	d0e6      	beq.n	80071ec <_printf_common+0xa4>
 800721e:	3601      	adds	r6, #1
 8007220:	e7d9      	b.n	80071d6 <_printf_common+0x8e>
	...

08007224 <_printf_i>:
 8007224:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007228:	460c      	mov	r4, r1
 800722a:	4691      	mov	r9, r2
 800722c:	7e27      	ldrb	r7, [r4, #24]
 800722e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007230:	2f78      	cmp	r7, #120	; 0x78
 8007232:	4680      	mov	r8, r0
 8007234:	469a      	mov	sl, r3
 8007236:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800723a:	d807      	bhi.n	800724c <_printf_i+0x28>
 800723c:	2f62      	cmp	r7, #98	; 0x62
 800723e:	d80a      	bhi.n	8007256 <_printf_i+0x32>
 8007240:	2f00      	cmp	r7, #0
 8007242:	f000 80d8 	beq.w	80073f6 <_printf_i+0x1d2>
 8007246:	2f58      	cmp	r7, #88	; 0x58
 8007248:	f000 80a3 	beq.w	8007392 <_printf_i+0x16e>
 800724c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007250:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007254:	e03a      	b.n	80072cc <_printf_i+0xa8>
 8007256:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800725a:	2b15      	cmp	r3, #21
 800725c:	d8f6      	bhi.n	800724c <_printf_i+0x28>
 800725e:	a001      	add	r0, pc, #4	; (adr r0, 8007264 <_printf_i+0x40>)
 8007260:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007264:	080072bd 	.word	0x080072bd
 8007268:	080072d1 	.word	0x080072d1
 800726c:	0800724d 	.word	0x0800724d
 8007270:	0800724d 	.word	0x0800724d
 8007274:	0800724d 	.word	0x0800724d
 8007278:	0800724d 	.word	0x0800724d
 800727c:	080072d1 	.word	0x080072d1
 8007280:	0800724d 	.word	0x0800724d
 8007284:	0800724d 	.word	0x0800724d
 8007288:	0800724d 	.word	0x0800724d
 800728c:	0800724d 	.word	0x0800724d
 8007290:	080073dd 	.word	0x080073dd
 8007294:	08007301 	.word	0x08007301
 8007298:	080073bf 	.word	0x080073bf
 800729c:	0800724d 	.word	0x0800724d
 80072a0:	0800724d 	.word	0x0800724d
 80072a4:	080073ff 	.word	0x080073ff
 80072a8:	0800724d 	.word	0x0800724d
 80072ac:	08007301 	.word	0x08007301
 80072b0:	0800724d 	.word	0x0800724d
 80072b4:	0800724d 	.word	0x0800724d
 80072b8:	080073c7 	.word	0x080073c7
 80072bc:	680b      	ldr	r3, [r1, #0]
 80072be:	1d1a      	adds	r2, r3, #4
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	600a      	str	r2, [r1, #0]
 80072c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80072c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80072cc:	2301      	movs	r3, #1
 80072ce:	e0a3      	b.n	8007418 <_printf_i+0x1f4>
 80072d0:	6825      	ldr	r5, [r4, #0]
 80072d2:	6808      	ldr	r0, [r1, #0]
 80072d4:	062e      	lsls	r6, r5, #24
 80072d6:	f100 0304 	add.w	r3, r0, #4
 80072da:	d50a      	bpl.n	80072f2 <_printf_i+0xce>
 80072dc:	6805      	ldr	r5, [r0, #0]
 80072de:	600b      	str	r3, [r1, #0]
 80072e0:	2d00      	cmp	r5, #0
 80072e2:	da03      	bge.n	80072ec <_printf_i+0xc8>
 80072e4:	232d      	movs	r3, #45	; 0x2d
 80072e6:	426d      	negs	r5, r5
 80072e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072ec:	485e      	ldr	r0, [pc, #376]	; (8007468 <_printf_i+0x244>)
 80072ee:	230a      	movs	r3, #10
 80072f0:	e019      	b.n	8007326 <_printf_i+0x102>
 80072f2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80072f6:	6805      	ldr	r5, [r0, #0]
 80072f8:	600b      	str	r3, [r1, #0]
 80072fa:	bf18      	it	ne
 80072fc:	b22d      	sxthne	r5, r5
 80072fe:	e7ef      	b.n	80072e0 <_printf_i+0xbc>
 8007300:	680b      	ldr	r3, [r1, #0]
 8007302:	6825      	ldr	r5, [r4, #0]
 8007304:	1d18      	adds	r0, r3, #4
 8007306:	6008      	str	r0, [r1, #0]
 8007308:	0628      	lsls	r0, r5, #24
 800730a:	d501      	bpl.n	8007310 <_printf_i+0xec>
 800730c:	681d      	ldr	r5, [r3, #0]
 800730e:	e002      	b.n	8007316 <_printf_i+0xf2>
 8007310:	0669      	lsls	r1, r5, #25
 8007312:	d5fb      	bpl.n	800730c <_printf_i+0xe8>
 8007314:	881d      	ldrh	r5, [r3, #0]
 8007316:	4854      	ldr	r0, [pc, #336]	; (8007468 <_printf_i+0x244>)
 8007318:	2f6f      	cmp	r7, #111	; 0x6f
 800731a:	bf0c      	ite	eq
 800731c:	2308      	moveq	r3, #8
 800731e:	230a      	movne	r3, #10
 8007320:	2100      	movs	r1, #0
 8007322:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007326:	6866      	ldr	r6, [r4, #4]
 8007328:	60a6      	str	r6, [r4, #8]
 800732a:	2e00      	cmp	r6, #0
 800732c:	bfa2      	ittt	ge
 800732e:	6821      	ldrge	r1, [r4, #0]
 8007330:	f021 0104 	bicge.w	r1, r1, #4
 8007334:	6021      	strge	r1, [r4, #0]
 8007336:	b90d      	cbnz	r5, 800733c <_printf_i+0x118>
 8007338:	2e00      	cmp	r6, #0
 800733a:	d04d      	beq.n	80073d8 <_printf_i+0x1b4>
 800733c:	4616      	mov	r6, r2
 800733e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007342:	fb03 5711 	mls	r7, r3, r1, r5
 8007346:	5dc7      	ldrb	r7, [r0, r7]
 8007348:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800734c:	462f      	mov	r7, r5
 800734e:	42bb      	cmp	r3, r7
 8007350:	460d      	mov	r5, r1
 8007352:	d9f4      	bls.n	800733e <_printf_i+0x11a>
 8007354:	2b08      	cmp	r3, #8
 8007356:	d10b      	bne.n	8007370 <_printf_i+0x14c>
 8007358:	6823      	ldr	r3, [r4, #0]
 800735a:	07df      	lsls	r7, r3, #31
 800735c:	d508      	bpl.n	8007370 <_printf_i+0x14c>
 800735e:	6923      	ldr	r3, [r4, #16]
 8007360:	6861      	ldr	r1, [r4, #4]
 8007362:	4299      	cmp	r1, r3
 8007364:	bfde      	ittt	le
 8007366:	2330      	movle	r3, #48	; 0x30
 8007368:	f806 3c01 	strble.w	r3, [r6, #-1]
 800736c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007370:	1b92      	subs	r2, r2, r6
 8007372:	6122      	str	r2, [r4, #16]
 8007374:	f8cd a000 	str.w	sl, [sp]
 8007378:	464b      	mov	r3, r9
 800737a:	aa03      	add	r2, sp, #12
 800737c:	4621      	mov	r1, r4
 800737e:	4640      	mov	r0, r8
 8007380:	f7ff fee2 	bl	8007148 <_printf_common>
 8007384:	3001      	adds	r0, #1
 8007386:	d14c      	bne.n	8007422 <_printf_i+0x1fe>
 8007388:	f04f 30ff 	mov.w	r0, #4294967295
 800738c:	b004      	add	sp, #16
 800738e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007392:	4835      	ldr	r0, [pc, #212]	; (8007468 <_printf_i+0x244>)
 8007394:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007398:	6823      	ldr	r3, [r4, #0]
 800739a:	680e      	ldr	r6, [r1, #0]
 800739c:	061f      	lsls	r7, r3, #24
 800739e:	f856 5b04 	ldr.w	r5, [r6], #4
 80073a2:	600e      	str	r6, [r1, #0]
 80073a4:	d514      	bpl.n	80073d0 <_printf_i+0x1ac>
 80073a6:	07d9      	lsls	r1, r3, #31
 80073a8:	bf44      	itt	mi
 80073aa:	f043 0320 	orrmi.w	r3, r3, #32
 80073ae:	6023      	strmi	r3, [r4, #0]
 80073b0:	b91d      	cbnz	r5, 80073ba <_printf_i+0x196>
 80073b2:	6823      	ldr	r3, [r4, #0]
 80073b4:	f023 0320 	bic.w	r3, r3, #32
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	2310      	movs	r3, #16
 80073bc:	e7b0      	b.n	8007320 <_printf_i+0xfc>
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	f043 0320 	orr.w	r3, r3, #32
 80073c4:	6023      	str	r3, [r4, #0]
 80073c6:	2378      	movs	r3, #120	; 0x78
 80073c8:	4828      	ldr	r0, [pc, #160]	; (800746c <_printf_i+0x248>)
 80073ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80073ce:	e7e3      	b.n	8007398 <_printf_i+0x174>
 80073d0:	065e      	lsls	r6, r3, #25
 80073d2:	bf48      	it	mi
 80073d4:	b2ad      	uxthmi	r5, r5
 80073d6:	e7e6      	b.n	80073a6 <_printf_i+0x182>
 80073d8:	4616      	mov	r6, r2
 80073da:	e7bb      	b.n	8007354 <_printf_i+0x130>
 80073dc:	680b      	ldr	r3, [r1, #0]
 80073de:	6826      	ldr	r6, [r4, #0]
 80073e0:	6960      	ldr	r0, [r4, #20]
 80073e2:	1d1d      	adds	r5, r3, #4
 80073e4:	600d      	str	r5, [r1, #0]
 80073e6:	0635      	lsls	r5, r6, #24
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	d501      	bpl.n	80073f0 <_printf_i+0x1cc>
 80073ec:	6018      	str	r0, [r3, #0]
 80073ee:	e002      	b.n	80073f6 <_printf_i+0x1d2>
 80073f0:	0671      	lsls	r1, r6, #25
 80073f2:	d5fb      	bpl.n	80073ec <_printf_i+0x1c8>
 80073f4:	8018      	strh	r0, [r3, #0]
 80073f6:	2300      	movs	r3, #0
 80073f8:	6123      	str	r3, [r4, #16]
 80073fa:	4616      	mov	r6, r2
 80073fc:	e7ba      	b.n	8007374 <_printf_i+0x150>
 80073fe:	680b      	ldr	r3, [r1, #0]
 8007400:	1d1a      	adds	r2, r3, #4
 8007402:	600a      	str	r2, [r1, #0]
 8007404:	681e      	ldr	r6, [r3, #0]
 8007406:	6862      	ldr	r2, [r4, #4]
 8007408:	2100      	movs	r1, #0
 800740a:	4630      	mov	r0, r6
 800740c:	f7f8 fee8 	bl	80001e0 <memchr>
 8007410:	b108      	cbz	r0, 8007416 <_printf_i+0x1f2>
 8007412:	1b80      	subs	r0, r0, r6
 8007414:	6060      	str	r0, [r4, #4]
 8007416:	6863      	ldr	r3, [r4, #4]
 8007418:	6123      	str	r3, [r4, #16]
 800741a:	2300      	movs	r3, #0
 800741c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007420:	e7a8      	b.n	8007374 <_printf_i+0x150>
 8007422:	6923      	ldr	r3, [r4, #16]
 8007424:	4632      	mov	r2, r6
 8007426:	4649      	mov	r1, r9
 8007428:	4640      	mov	r0, r8
 800742a:	47d0      	blx	sl
 800742c:	3001      	adds	r0, #1
 800742e:	d0ab      	beq.n	8007388 <_printf_i+0x164>
 8007430:	6823      	ldr	r3, [r4, #0]
 8007432:	079b      	lsls	r3, r3, #30
 8007434:	d413      	bmi.n	800745e <_printf_i+0x23a>
 8007436:	68e0      	ldr	r0, [r4, #12]
 8007438:	9b03      	ldr	r3, [sp, #12]
 800743a:	4298      	cmp	r0, r3
 800743c:	bfb8      	it	lt
 800743e:	4618      	movlt	r0, r3
 8007440:	e7a4      	b.n	800738c <_printf_i+0x168>
 8007442:	2301      	movs	r3, #1
 8007444:	4632      	mov	r2, r6
 8007446:	4649      	mov	r1, r9
 8007448:	4640      	mov	r0, r8
 800744a:	47d0      	blx	sl
 800744c:	3001      	adds	r0, #1
 800744e:	d09b      	beq.n	8007388 <_printf_i+0x164>
 8007450:	3501      	adds	r5, #1
 8007452:	68e3      	ldr	r3, [r4, #12]
 8007454:	9903      	ldr	r1, [sp, #12]
 8007456:	1a5b      	subs	r3, r3, r1
 8007458:	42ab      	cmp	r3, r5
 800745a:	dcf2      	bgt.n	8007442 <_printf_i+0x21e>
 800745c:	e7eb      	b.n	8007436 <_printf_i+0x212>
 800745e:	2500      	movs	r5, #0
 8007460:	f104 0619 	add.w	r6, r4, #25
 8007464:	e7f5      	b.n	8007452 <_printf_i+0x22e>
 8007466:	bf00      	nop
 8007468:	0800973a 	.word	0x0800973a
 800746c:	0800974b 	.word	0x0800974b

08007470 <iprintf>:
 8007470:	b40f      	push	{r0, r1, r2, r3}
 8007472:	4b0a      	ldr	r3, [pc, #40]	; (800749c <iprintf+0x2c>)
 8007474:	b513      	push	{r0, r1, r4, lr}
 8007476:	681c      	ldr	r4, [r3, #0]
 8007478:	b124      	cbz	r4, 8007484 <iprintf+0x14>
 800747a:	69a3      	ldr	r3, [r4, #24]
 800747c:	b913      	cbnz	r3, 8007484 <iprintf+0x14>
 800747e:	4620      	mov	r0, r4
 8007480:	f001 f8d8 	bl	8008634 <__sinit>
 8007484:	ab05      	add	r3, sp, #20
 8007486:	9a04      	ldr	r2, [sp, #16]
 8007488:	68a1      	ldr	r1, [r4, #8]
 800748a:	9301      	str	r3, [sp, #4]
 800748c:	4620      	mov	r0, r4
 800748e:	f001 fe45 	bl	800911c <_vfiprintf_r>
 8007492:	b002      	add	sp, #8
 8007494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007498:	b004      	add	sp, #16
 800749a:	4770      	bx	lr
 800749c:	20000010 	.word	0x20000010

080074a0 <_puts_r>:
 80074a0:	b570      	push	{r4, r5, r6, lr}
 80074a2:	460e      	mov	r6, r1
 80074a4:	4605      	mov	r5, r0
 80074a6:	b118      	cbz	r0, 80074b0 <_puts_r+0x10>
 80074a8:	6983      	ldr	r3, [r0, #24]
 80074aa:	b90b      	cbnz	r3, 80074b0 <_puts_r+0x10>
 80074ac:	f001 f8c2 	bl	8008634 <__sinit>
 80074b0:	69ab      	ldr	r3, [r5, #24]
 80074b2:	68ac      	ldr	r4, [r5, #8]
 80074b4:	b913      	cbnz	r3, 80074bc <_puts_r+0x1c>
 80074b6:	4628      	mov	r0, r5
 80074b8:	f001 f8bc 	bl	8008634 <__sinit>
 80074bc:	4b2c      	ldr	r3, [pc, #176]	; (8007570 <_puts_r+0xd0>)
 80074be:	429c      	cmp	r4, r3
 80074c0:	d120      	bne.n	8007504 <_puts_r+0x64>
 80074c2:	686c      	ldr	r4, [r5, #4]
 80074c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80074c6:	07db      	lsls	r3, r3, #31
 80074c8:	d405      	bmi.n	80074d6 <_puts_r+0x36>
 80074ca:	89a3      	ldrh	r3, [r4, #12]
 80074cc:	0598      	lsls	r0, r3, #22
 80074ce:	d402      	bmi.n	80074d6 <_puts_r+0x36>
 80074d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074d2:	f001 f952 	bl	800877a <__retarget_lock_acquire_recursive>
 80074d6:	89a3      	ldrh	r3, [r4, #12]
 80074d8:	0719      	lsls	r1, r3, #28
 80074da:	d51d      	bpl.n	8007518 <_puts_r+0x78>
 80074dc:	6923      	ldr	r3, [r4, #16]
 80074de:	b1db      	cbz	r3, 8007518 <_puts_r+0x78>
 80074e0:	3e01      	subs	r6, #1
 80074e2:	68a3      	ldr	r3, [r4, #8]
 80074e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80074e8:	3b01      	subs	r3, #1
 80074ea:	60a3      	str	r3, [r4, #8]
 80074ec:	bb39      	cbnz	r1, 800753e <_puts_r+0x9e>
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	da38      	bge.n	8007564 <_puts_r+0xc4>
 80074f2:	4622      	mov	r2, r4
 80074f4:	210a      	movs	r1, #10
 80074f6:	4628      	mov	r0, r5
 80074f8:	f000 f848 	bl	800758c <__swbuf_r>
 80074fc:	3001      	adds	r0, #1
 80074fe:	d011      	beq.n	8007524 <_puts_r+0x84>
 8007500:	250a      	movs	r5, #10
 8007502:	e011      	b.n	8007528 <_puts_r+0x88>
 8007504:	4b1b      	ldr	r3, [pc, #108]	; (8007574 <_puts_r+0xd4>)
 8007506:	429c      	cmp	r4, r3
 8007508:	d101      	bne.n	800750e <_puts_r+0x6e>
 800750a:	68ac      	ldr	r4, [r5, #8]
 800750c:	e7da      	b.n	80074c4 <_puts_r+0x24>
 800750e:	4b1a      	ldr	r3, [pc, #104]	; (8007578 <_puts_r+0xd8>)
 8007510:	429c      	cmp	r4, r3
 8007512:	bf08      	it	eq
 8007514:	68ec      	ldreq	r4, [r5, #12]
 8007516:	e7d5      	b.n	80074c4 <_puts_r+0x24>
 8007518:	4621      	mov	r1, r4
 800751a:	4628      	mov	r0, r5
 800751c:	f000 f888 	bl	8007630 <__swsetup_r>
 8007520:	2800      	cmp	r0, #0
 8007522:	d0dd      	beq.n	80074e0 <_puts_r+0x40>
 8007524:	f04f 35ff 	mov.w	r5, #4294967295
 8007528:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800752a:	07da      	lsls	r2, r3, #31
 800752c:	d405      	bmi.n	800753a <_puts_r+0x9a>
 800752e:	89a3      	ldrh	r3, [r4, #12]
 8007530:	059b      	lsls	r3, r3, #22
 8007532:	d402      	bmi.n	800753a <_puts_r+0x9a>
 8007534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007536:	f001 f921 	bl	800877c <__retarget_lock_release_recursive>
 800753a:	4628      	mov	r0, r5
 800753c:	bd70      	pop	{r4, r5, r6, pc}
 800753e:	2b00      	cmp	r3, #0
 8007540:	da04      	bge.n	800754c <_puts_r+0xac>
 8007542:	69a2      	ldr	r2, [r4, #24]
 8007544:	429a      	cmp	r2, r3
 8007546:	dc06      	bgt.n	8007556 <_puts_r+0xb6>
 8007548:	290a      	cmp	r1, #10
 800754a:	d004      	beq.n	8007556 <_puts_r+0xb6>
 800754c:	6823      	ldr	r3, [r4, #0]
 800754e:	1c5a      	adds	r2, r3, #1
 8007550:	6022      	str	r2, [r4, #0]
 8007552:	7019      	strb	r1, [r3, #0]
 8007554:	e7c5      	b.n	80074e2 <_puts_r+0x42>
 8007556:	4622      	mov	r2, r4
 8007558:	4628      	mov	r0, r5
 800755a:	f000 f817 	bl	800758c <__swbuf_r>
 800755e:	3001      	adds	r0, #1
 8007560:	d1bf      	bne.n	80074e2 <_puts_r+0x42>
 8007562:	e7df      	b.n	8007524 <_puts_r+0x84>
 8007564:	6823      	ldr	r3, [r4, #0]
 8007566:	250a      	movs	r5, #10
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	6022      	str	r2, [r4, #0]
 800756c:	701d      	strb	r5, [r3, #0]
 800756e:	e7db      	b.n	8007528 <_puts_r+0x88>
 8007570:	08009810 	.word	0x08009810
 8007574:	08009830 	.word	0x08009830
 8007578:	080097f0 	.word	0x080097f0

0800757c <puts>:
 800757c:	4b02      	ldr	r3, [pc, #8]	; (8007588 <puts+0xc>)
 800757e:	4601      	mov	r1, r0
 8007580:	6818      	ldr	r0, [r3, #0]
 8007582:	f7ff bf8d 	b.w	80074a0 <_puts_r>
 8007586:	bf00      	nop
 8007588:	20000010 	.word	0x20000010

0800758c <__swbuf_r>:
 800758c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800758e:	460e      	mov	r6, r1
 8007590:	4614      	mov	r4, r2
 8007592:	4605      	mov	r5, r0
 8007594:	b118      	cbz	r0, 800759e <__swbuf_r+0x12>
 8007596:	6983      	ldr	r3, [r0, #24]
 8007598:	b90b      	cbnz	r3, 800759e <__swbuf_r+0x12>
 800759a:	f001 f84b 	bl	8008634 <__sinit>
 800759e:	4b21      	ldr	r3, [pc, #132]	; (8007624 <__swbuf_r+0x98>)
 80075a0:	429c      	cmp	r4, r3
 80075a2:	d12b      	bne.n	80075fc <__swbuf_r+0x70>
 80075a4:	686c      	ldr	r4, [r5, #4]
 80075a6:	69a3      	ldr	r3, [r4, #24]
 80075a8:	60a3      	str	r3, [r4, #8]
 80075aa:	89a3      	ldrh	r3, [r4, #12]
 80075ac:	071a      	lsls	r2, r3, #28
 80075ae:	d52f      	bpl.n	8007610 <__swbuf_r+0x84>
 80075b0:	6923      	ldr	r3, [r4, #16]
 80075b2:	b36b      	cbz	r3, 8007610 <__swbuf_r+0x84>
 80075b4:	6923      	ldr	r3, [r4, #16]
 80075b6:	6820      	ldr	r0, [r4, #0]
 80075b8:	1ac0      	subs	r0, r0, r3
 80075ba:	6963      	ldr	r3, [r4, #20]
 80075bc:	b2f6      	uxtb	r6, r6
 80075be:	4283      	cmp	r3, r0
 80075c0:	4637      	mov	r7, r6
 80075c2:	dc04      	bgt.n	80075ce <__swbuf_r+0x42>
 80075c4:	4621      	mov	r1, r4
 80075c6:	4628      	mov	r0, r5
 80075c8:	f000 ffa0 	bl	800850c <_fflush_r>
 80075cc:	bb30      	cbnz	r0, 800761c <__swbuf_r+0x90>
 80075ce:	68a3      	ldr	r3, [r4, #8]
 80075d0:	3b01      	subs	r3, #1
 80075d2:	60a3      	str	r3, [r4, #8]
 80075d4:	6823      	ldr	r3, [r4, #0]
 80075d6:	1c5a      	adds	r2, r3, #1
 80075d8:	6022      	str	r2, [r4, #0]
 80075da:	701e      	strb	r6, [r3, #0]
 80075dc:	6963      	ldr	r3, [r4, #20]
 80075de:	3001      	adds	r0, #1
 80075e0:	4283      	cmp	r3, r0
 80075e2:	d004      	beq.n	80075ee <__swbuf_r+0x62>
 80075e4:	89a3      	ldrh	r3, [r4, #12]
 80075e6:	07db      	lsls	r3, r3, #31
 80075e8:	d506      	bpl.n	80075f8 <__swbuf_r+0x6c>
 80075ea:	2e0a      	cmp	r6, #10
 80075ec:	d104      	bne.n	80075f8 <__swbuf_r+0x6c>
 80075ee:	4621      	mov	r1, r4
 80075f0:	4628      	mov	r0, r5
 80075f2:	f000 ff8b 	bl	800850c <_fflush_r>
 80075f6:	b988      	cbnz	r0, 800761c <__swbuf_r+0x90>
 80075f8:	4638      	mov	r0, r7
 80075fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075fc:	4b0a      	ldr	r3, [pc, #40]	; (8007628 <__swbuf_r+0x9c>)
 80075fe:	429c      	cmp	r4, r3
 8007600:	d101      	bne.n	8007606 <__swbuf_r+0x7a>
 8007602:	68ac      	ldr	r4, [r5, #8]
 8007604:	e7cf      	b.n	80075a6 <__swbuf_r+0x1a>
 8007606:	4b09      	ldr	r3, [pc, #36]	; (800762c <__swbuf_r+0xa0>)
 8007608:	429c      	cmp	r4, r3
 800760a:	bf08      	it	eq
 800760c:	68ec      	ldreq	r4, [r5, #12]
 800760e:	e7ca      	b.n	80075a6 <__swbuf_r+0x1a>
 8007610:	4621      	mov	r1, r4
 8007612:	4628      	mov	r0, r5
 8007614:	f000 f80c 	bl	8007630 <__swsetup_r>
 8007618:	2800      	cmp	r0, #0
 800761a:	d0cb      	beq.n	80075b4 <__swbuf_r+0x28>
 800761c:	f04f 37ff 	mov.w	r7, #4294967295
 8007620:	e7ea      	b.n	80075f8 <__swbuf_r+0x6c>
 8007622:	bf00      	nop
 8007624:	08009810 	.word	0x08009810
 8007628:	08009830 	.word	0x08009830
 800762c:	080097f0 	.word	0x080097f0

08007630 <__swsetup_r>:
 8007630:	4b32      	ldr	r3, [pc, #200]	; (80076fc <__swsetup_r+0xcc>)
 8007632:	b570      	push	{r4, r5, r6, lr}
 8007634:	681d      	ldr	r5, [r3, #0]
 8007636:	4606      	mov	r6, r0
 8007638:	460c      	mov	r4, r1
 800763a:	b125      	cbz	r5, 8007646 <__swsetup_r+0x16>
 800763c:	69ab      	ldr	r3, [r5, #24]
 800763e:	b913      	cbnz	r3, 8007646 <__swsetup_r+0x16>
 8007640:	4628      	mov	r0, r5
 8007642:	f000 fff7 	bl	8008634 <__sinit>
 8007646:	4b2e      	ldr	r3, [pc, #184]	; (8007700 <__swsetup_r+0xd0>)
 8007648:	429c      	cmp	r4, r3
 800764a:	d10f      	bne.n	800766c <__swsetup_r+0x3c>
 800764c:	686c      	ldr	r4, [r5, #4]
 800764e:	89a3      	ldrh	r3, [r4, #12]
 8007650:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007654:	0719      	lsls	r1, r3, #28
 8007656:	d42c      	bmi.n	80076b2 <__swsetup_r+0x82>
 8007658:	06dd      	lsls	r5, r3, #27
 800765a:	d411      	bmi.n	8007680 <__swsetup_r+0x50>
 800765c:	2309      	movs	r3, #9
 800765e:	6033      	str	r3, [r6, #0]
 8007660:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007664:	81a3      	strh	r3, [r4, #12]
 8007666:	f04f 30ff 	mov.w	r0, #4294967295
 800766a:	e03e      	b.n	80076ea <__swsetup_r+0xba>
 800766c:	4b25      	ldr	r3, [pc, #148]	; (8007704 <__swsetup_r+0xd4>)
 800766e:	429c      	cmp	r4, r3
 8007670:	d101      	bne.n	8007676 <__swsetup_r+0x46>
 8007672:	68ac      	ldr	r4, [r5, #8]
 8007674:	e7eb      	b.n	800764e <__swsetup_r+0x1e>
 8007676:	4b24      	ldr	r3, [pc, #144]	; (8007708 <__swsetup_r+0xd8>)
 8007678:	429c      	cmp	r4, r3
 800767a:	bf08      	it	eq
 800767c:	68ec      	ldreq	r4, [r5, #12]
 800767e:	e7e6      	b.n	800764e <__swsetup_r+0x1e>
 8007680:	0758      	lsls	r0, r3, #29
 8007682:	d512      	bpl.n	80076aa <__swsetup_r+0x7a>
 8007684:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007686:	b141      	cbz	r1, 800769a <__swsetup_r+0x6a>
 8007688:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800768c:	4299      	cmp	r1, r3
 800768e:	d002      	beq.n	8007696 <__swsetup_r+0x66>
 8007690:	4630      	mov	r0, r6
 8007692:	f001 fc6f 	bl	8008f74 <_free_r>
 8007696:	2300      	movs	r3, #0
 8007698:	6363      	str	r3, [r4, #52]	; 0x34
 800769a:	89a3      	ldrh	r3, [r4, #12]
 800769c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80076a0:	81a3      	strh	r3, [r4, #12]
 80076a2:	2300      	movs	r3, #0
 80076a4:	6063      	str	r3, [r4, #4]
 80076a6:	6923      	ldr	r3, [r4, #16]
 80076a8:	6023      	str	r3, [r4, #0]
 80076aa:	89a3      	ldrh	r3, [r4, #12]
 80076ac:	f043 0308 	orr.w	r3, r3, #8
 80076b0:	81a3      	strh	r3, [r4, #12]
 80076b2:	6923      	ldr	r3, [r4, #16]
 80076b4:	b94b      	cbnz	r3, 80076ca <__swsetup_r+0x9a>
 80076b6:	89a3      	ldrh	r3, [r4, #12]
 80076b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80076bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076c0:	d003      	beq.n	80076ca <__swsetup_r+0x9a>
 80076c2:	4621      	mov	r1, r4
 80076c4:	4630      	mov	r0, r6
 80076c6:	f001 f87f 	bl	80087c8 <__smakebuf_r>
 80076ca:	89a0      	ldrh	r0, [r4, #12]
 80076cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80076d0:	f010 0301 	ands.w	r3, r0, #1
 80076d4:	d00a      	beq.n	80076ec <__swsetup_r+0xbc>
 80076d6:	2300      	movs	r3, #0
 80076d8:	60a3      	str	r3, [r4, #8]
 80076da:	6963      	ldr	r3, [r4, #20]
 80076dc:	425b      	negs	r3, r3
 80076de:	61a3      	str	r3, [r4, #24]
 80076e0:	6923      	ldr	r3, [r4, #16]
 80076e2:	b943      	cbnz	r3, 80076f6 <__swsetup_r+0xc6>
 80076e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80076e8:	d1ba      	bne.n	8007660 <__swsetup_r+0x30>
 80076ea:	bd70      	pop	{r4, r5, r6, pc}
 80076ec:	0781      	lsls	r1, r0, #30
 80076ee:	bf58      	it	pl
 80076f0:	6963      	ldrpl	r3, [r4, #20]
 80076f2:	60a3      	str	r3, [r4, #8]
 80076f4:	e7f4      	b.n	80076e0 <__swsetup_r+0xb0>
 80076f6:	2000      	movs	r0, #0
 80076f8:	e7f7      	b.n	80076ea <__swsetup_r+0xba>
 80076fa:	bf00      	nop
 80076fc:	20000010 	.word	0x20000010
 8007700:	08009810 	.word	0x08009810
 8007704:	08009830 	.word	0x08009830
 8007708:	080097f0 	.word	0x080097f0

0800770c <quorem>:
 800770c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007710:	6903      	ldr	r3, [r0, #16]
 8007712:	690c      	ldr	r4, [r1, #16]
 8007714:	42a3      	cmp	r3, r4
 8007716:	4607      	mov	r7, r0
 8007718:	f2c0 8081 	blt.w	800781e <quorem+0x112>
 800771c:	3c01      	subs	r4, #1
 800771e:	f101 0814 	add.w	r8, r1, #20
 8007722:	f100 0514 	add.w	r5, r0, #20
 8007726:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800772a:	9301      	str	r3, [sp, #4]
 800772c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007730:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007734:	3301      	adds	r3, #1
 8007736:	429a      	cmp	r2, r3
 8007738:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800773c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007740:	fbb2 f6f3 	udiv	r6, r2, r3
 8007744:	d331      	bcc.n	80077aa <quorem+0x9e>
 8007746:	f04f 0e00 	mov.w	lr, #0
 800774a:	4640      	mov	r0, r8
 800774c:	46ac      	mov	ip, r5
 800774e:	46f2      	mov	sl, lr
 8007750:	f850 2b04 	ldr.w	r2, [r0], #4
 8007754:	b293      	uxth	r3, r2
 8007756:	fb06 e303 	mla	r3, r6, r3, lr
 800775a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800775e:	b29b      	uxth	r3, r3
 8007760:	ebaa 0303 	sub.w	r3, sl, r3
 8007764:	0c12      	lsrs	r2, r2, #16
 8007766:	f8dc a000 	ldr.w	sl, [ip]
 800776a:	fb06 e202 	mla	r2, r6, r2, lr
 800776e:	fa13 f38a 	uxtah	r3, r3, sl
 8007772:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007776:	fa1f fa82 	uxth.w	sl, r2
 800777a:	f8dc 2000 	ldr.w	r2, [ip]
 800777e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007782:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007786:	b29b      	uxth	r3, r3
 8007788:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800778c:	4581      	cmp	r9, r0
 800778e:	f84c 3b04 	str.w	r3, [ip], #4
 8007792:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007796:	d2db      	bcs.n	8007750 <quorem+0x44>
 8007798:	f855 300b 	ldr.w	r3, [r5, fp]
 800779c:	b92b      	cbnz	r3, 80077aa <quorem+0x9e>
 800779e:	9b01      	ldr	r3, [sp, #4]
 80077a0:	3b04      	subs	r3, #4
 80077a2:	429d      	cmp	r5, r3
 80077a4:	461a      	mov	r2, r3
 80077a6:	d32e      	bcc.n	8007806 <quorem+0xfa>
 80077a8:	613c      	str	r4, [r7, #16]
 80077aa:	4638      	mov	r0, r7
 80077ac:	f001 fad2 	bl	8008d54 <__mcmp>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	db24      	blt.n	80077fe <quorem+0xf2>
 80077b4:	3601      	adds	r6, #1
 80077b6:	4628      	mov	r0, r5
 80077b8:	f04f 0c00 	mov.w	ip, #0
 80077bc:	f858 2b04 	ldr.w	r2, [r8], #4
 80077c0:	f8d0 e000 	ldr.w	lr, [r0]
 80077c4:	b293      	uxth	r3, r2
 80077c6:	ebac 0303 	sub.w	r3, ip, r3
 80077ca:	0c12      	lsrs	r2, r2, #16
 80077cc:	fa13 f38e 	uxtah	r3, r3, lr
 80077d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80077d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80077d8:	b29b      	uxth	r3, r3
 80077da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077de:	45c1      	cmp	r9, r8
 80077e0:	f840 3b04 	str.w	r3, [r0], #4
 80077e4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80077e8:	d2e8      	bcs.n	80077bc <quorem+0xb0>
 80077ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077f2:	b922      	cbnz	r2, 80077fe <quorem+0xf2>
 80077f4:	3b04      	subs	r3, #4
 80077f6:	429d      	cmp	r5, r3
 80077f8:	461a      	mov	r2, r3
 80077fa:	d30a      	bcc.n	8007812 <quorem+0x106>
 80077fc:	613c      	str	r4, [r7, #16]
 80077fe:	4630      	mov	r0, r6
 8007800:	b003      	add	sp, #12
 8007802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007806:	6812      	ldr	r2, [r2, #0]
 8007808:	3b04      	subs	r3, #4
 800780a:	2a00      	cmp	r2, #0
 800780c:	d1cc      	bne.n	80077a8 <quorem+0x9c>
 800780e:	3c01      	subs	r4, #1
 8007810:	e7c7      	b.n	80077a2 <quorem+0x96>
 8007812:	6812      	ldr	r2, [r2, #0]
 8007814:	3b04      	subs	r3, #4
 8007816:	2a00      	cmp	r2, #0
 8007818:	d1f0      	bne.n	80077fc <quorem+0xf0>
 800781a:	3c01      	subs	r4, #1
 800781c:	e7eb      	b.n	80077f6 <quorem+0xea>
 800781e:	2000      	movs	r0, #0
 8007820:	e7ee      	b.n	8007800 <quorem+0xf4>
 8007822:	0000      	movs	r0, r0
 8007824:	0000      	movs	r0, r0
	...

08007828 <_dtoa_r>:
 8007828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800782c:	ed2d 8b02 	vpush	{d8}
 8007830:	ec57 6b10 	vmov	r6, r7, d0
 8007834:	b095      	sub	sp, #84	; 0x54
 8007836:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007838:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800783c:	9105      	str	r1, [sp, #20]
 800783e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007842:	4604      	mov	r4, r0
 8007844:	9209      	str	r2, [sp, #36]	; 0x24
 8007846:	930f      	str	r3, [sp, #60]	; 0x3c
 8007848:	b975      	cbnz	r5, 8007868 <_dtoa_r+0x40>
 800784a:	2010      	movs	r0, #16
 800784c:	f000 fffc 	bl	8008848 <malloc>
 8007850:	4602      	mov	r2, r0
 8007852:	6260      	str	r0, [r4, #36]	; 0x24
 8007854:	b920      	cbnz	r0, 8007860 <_dtoa_r+0x38>
 8007856:	4bb2      	ldr	r3, [pc, #712]	; (8007b20 <_dtoa_r+0x2f8>)
 8007858:	21ea      	movs	r1, #234	; 0xea
 800785a:	48b2      	ldr	r0, [pc, #712]	; (8007b24 <_dtoa_r+0x2fc>)
 800785c:	f001 fdf4 	bl	8009448 <__assert_func>
 8007860:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007864:	6005      	str	r5, [r0, #0]
 8007866:	60c5      	str	r5, [r0, #12]
 8007868:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800786a:	6819      	ldr	r1, [r3, #0]
 800786c:	b151      	cbz	r1, 8007884 <_dtoa_r+0x5c>
 800786e:	685a      	ldr	r2, [r3, #4]
 8007870:	604a      	str	r2, [r1, #4]
 8007872:	2301      	movs	r3, #1
 8007874:	4093      	lsls	r3, r2
 8007876:	608b      	str	r3, [r1, #8]
 8007878:	4620      	mov	r0, r4
 800787a:	f001 f82d 	bl	80088d8 <_Bfree>
 800787e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007880:	2200      	movs	r2, #0
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	1e3b      	subs	r3, r7, #0
 8007886:	bfb9      	ittee	lt
 8007888:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800788c:	9303      	strlt	r3, [sp, #12]
 800788e:	2300      	movge	r3, #0
 8007890:	f8c8 3000 	strge.w	r3, [r8]
 8007894:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007898:	4ba3      	ldr	r3, [pc, #652]	; (8007b28 <_dtoa_r+0x300>)
 800789a:	bfbc      	itt	lt
 800789c:	2201      	movlt	r2, #1
 800789e:	f8c8 2000 	strlt.w	r2, [r8]
 80078a2:	ea33 0309 	bics.w	r3, r3, r9
 80078a6:	d11b      	bne.n	80078e0 <_dtoa_r+0xb8>
 80078a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80078ae:	6013      	str	r3, [r2, #0]
 80078b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078b4:	4333      	orrs	r3, r6
 80078b6:	f000 857a 	beq.w	80083ae <_dtoa_r+0xb86>
 80078ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078bc:	b963      	cbnz	r3, 80078d8 <_dtoa_r+0xb0>
 80078be:	4b9b      	ldr	r3, [pc, #620]	; (8007b2c <_dtoa_r+0x304>)
 80078c0:	e024      	b.n	800790c <_dtoa_r+0xe4>
 80078c2:	4b9b      	ldr	r3, [pc, #620]	; (8007b30 <_dtoa_r+0x308>)
 80078c4:	9300      	str	r3, [sp, #0]
 80078c6:	3308      	adds	r3, #8
 80078c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80078ca:	6013      	str	r3, [r2, #0]
 80078cc:	9800      	ldr	r0, [sp, #0]
 80078ce:	b015      	add	sp, #84	; 0x54
 80078d0:	ecbd 8b02 	vpop	{d8}
 80078d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d8:	4b94      	ldr	r3, [pc, #592]	; (8007b2c <_dtoa_r+0x304>)
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	3303      	adds	r3, #3
 80078de:	e7f3      	b.n	80078c8 <_dtoa_r+0xa0>
 80078e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80078e4:	2200      	movs	r2, #0
 80078e6:	ec51 0b17 	vmov	r0, r1, d7
 80078ea:	2300      	movs	r3, #0
 80078ec:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80078f0:	f7f9 f8ea 	bl	8000ac8 <__aeabi_dcmpeq>
 80078f4:	4680      	mov	r8, r0
 80078f6:	b158      	cbz	r0, 8007910 <_dtoa_r+0xe8>
 80078f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80078fa:	2301      	movs	r3, #1
 80078fc:	6013      	str	r3, [r2, #0]
 80078fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007900:	2b00      	cmp	r3, #0
 8007902:	f000 8551 	beq.w	80083a8 <_dtoa_r+0xb80>
 8007906:	488b      	ldr	r0, [pc, #556]	; (8007b34 <_dtoa_r+0x30c>)
 8007908:	6018      	str	r0, [r3, #0]
 800790a:	1e43      	subs	r3, r0, #1
 800790c:	9300      	str	r3, [sp, #0]
 800790e:	e7dd      	b.n	80078cc <_dtoa_r+0xa4>
 8007910:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007914:	aa12      	add	r2, sp, #72	; 0x48
 8007916:	a913      	add	r1, sp, #76	; 0x4c
 8007918:	4620      	mov	r0, r4
 800791a:	f001 fabf 	bl	8008e9c <__d2b>
 800791e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007922:	4683      	mov	fp, r0
 8007924:	2d00      	cmp	r5, #0
 8007926:	d07c      	beq.n	8007a22 <_dtoa_r+0x1fa>
 8007928:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800792a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800792e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007932:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007936:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800793a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800793e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007942:	4b7d      	ldr	r3, [pc, #500]	; (8007b38 <_dtoa_r+0x310>)
 8007944:	2200      	movs	r2, #0
 8007946:	4630      	mov	r0, r6
 8007948:	4639      	mov	r1, r7
 800794a:	f7f8 fc9d 	bl	8000288 <__aeabi_dsub>
 800794e:	a36e      	add	r3, pc, #440	; (adr r3, 8007b08 <_dtoa_r+0x2e0>)
 8007950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007954:	f7f8 fe50 	bl	80005f8 <__aeabi_dmul>
 8007958:	a36d      	add	r3, pc, #436	; (adr r3, 8007b10 <_dtoa_r+0x2e8>)
 800795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795e:	f7f8 fc95 	bl	800028c <__adddf3>
 8007962:	4606      	mov	r6, r0
 8007964:	4628      	mov	r0, r5
 8007966:	460f      	mov	r7, r1
 8007968:	f7f8 fddc 	bl	8000524 <__aeabi_i2d>
 800796c:	a36a      	add	r3, pc, #424	; (adr r3, 8007b18 <_dtoa_r+0x2f0>)
 800796e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007972:	f7f8 fe41 	bl	80005f8 <__aeabi_dmul>
 8007976:	4602      	mov	r2, r0
 8007978:	460b      	mov	r3, r1
 800797a:	4630      	mov	r0, r6
 800797c:	4639      	mov	r1, r7
 800797e:	f7f8 fc85 	bl	800028c <__adddf3>
 8007982:	4606      	mov	r6, r0
 8007984:	460f      	mov	r7, r1
 8007986:	f7f9 f8e7 	bl	8000b58 <__aeabi_d2iz>
 800798a:	2200      	movs	r2, #0
 800798c:	4682      	mov	sl, r0
 800798e:	2300      	movs	r3, #0
 8007990:	4630      	mov	r0, r6
 8007992:	4639      	mov	r1, r7
 8007994:	f7f9 f8a2 	bl	8000adc <__aeabi_dcmplt>
 8007998:	b148      	cbz	r0, 80079ae <_dtoa_r+0x186>
 800799a:	4650      	mov	r0, sl
 800799c:	f7f8 fdc2 	bl	8000524 <__aeabi_i2d>
 80079a0:	4632      	mov	r2, r6
 80079a2:	463b      	mov	r3, r7
 80079a4:	f7f9 f890 	bl	8000ac8 <__aeabi_dcmpeq>
 80079a8:	b908      	cbnz	r0, 80079ae <_dtoa_r+0x186>
 80079aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079ae:	f1ba 0f16 	cmp.w	sl, #22
 80079b2:	d854      	bhi.n	8007a5e <_dtoa_r+0x236>
 80079b4:	4b61      	ldr	r3, [pc, #388]	; (8007b3c <_dtoa_r+0x314>)
 80079b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80079ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80079c2:	f7f9 f88b 	bl	8000adc <__aeabi_dcmplt>
 80079c6:	2800      	cmp	r0, #0
 80079c8:	d04b      	beq.n	8007a62 <_dtoa_r+0x23a>
 80079ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079ce:	2300      	movs	r3, #0
 80079d0:	930e      	str	r3, [sp, #56]	; 0x38
 80079d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80079d4:	1b5d      	subs	r5, r3, r5
 80079d6:	1e6b      	subs	r3, r5, #1
 80079d8:	9304      	str	r3, [sp, #16]
 80079da:	bf43      	ittte	mi
 80079dc:	2300      	movmi	r3, #0
 80079de:	f1c5 0801 	rsbmi	r8, r5, #1
 80079e2:	9304      	strmi	r3, [sp, #16]
 80079e4:	f04f 0800 	movpl.w	r8, #0
 80079e8:	f1ba 0f00 	cmp.w	sl, #0
 80079ec:	db3b      	blt.n	8007a66 <_dtoa_r+0x23e>
 80079ee:	9b04      	ldr	r3, [sp, #16]
 80079f0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80079f4:	4453      	add	r3, sl
 80079f6:	9304      	str	r3, [sp, #16]
 80079f8:	2300      	movs	r3, #0
 80079fa:	9306      	str	r3, [sp, #24]
 80079fc:	9b05      	ldr	r3, [sp, #20]
 80079fe:	2b09      	cmp	r3, #9
 8007a00:	d869      	bhi.n	8007ad6 <_dtoa_r+0x2ae>
 8007a02:	2b05      	cmp	r3, #5
 8007a04:	bfc4      	itt	gt
 8007a06:	3b04      	subgt	r3, #4
 8007a08:	9305      	strgt	r3, [sp, #20]
 8007a0a:	9b05      	ldr	r3, [sp, #20]
 8007a0c:	f1a3 0302 	sub.w	r3, r3, #2
 8007a10:	bfcc      	ite	gt
 8007a12:	2500      	movgt	r5, #0
 8007a14:	2501      	movle	r5, #1
 8007a16:	2b03      	cmp	r3, #3
 8007a18:	d869      	bhi.n	8007aee <_dtoa_r+0x2c6>
 8007a1a:	e8df f003 	tbb	[pc, r3]
 8007a1e:	4e2c      	.short	0x4e2c
 8007a20:	5a4c      	.short	0x5a4c
 8007a22:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007a26:	441d      	add	r5, r3
 8007a28:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007a2c:	2b20      	cmp	r3, #32
 8007a2e:	bfc1      	itttt	gt
 8007a30:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007a34:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007a38:	fa09 f303 	lslgt.w	r3, r9, r3
 8007a3c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007a40:	bfda      	itte	le
 8007a42:	f1c3 0320 	rsble	r3, r3, #32
 8007a46:	fa06 f003 	lslle.w	r0, r6, r3
 8007a4a:	4318      	orrgt	r0, r3
 8007a4c:	f7f8 fd5a 	bl	8000504 <__aeabi_ui2d>
 8007a50:	2301      	movs	r3, #1
 8007a52:	4606      	mov	r6, r0
 8007a54:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007a58:	3d01      	subs	r5, #1
 8007a5a:	9310      	str	r3, [sp, #64]	; 0x40
 8007a5c:	e771      	b.n	8007942 <_dtoa_r+0x11a>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e7b6      	b.n	80079d0 <_dtoa_r+0x1a8>
 8007a62:	900e      	str	r0, [sp, #56]	; 0x38
 8007a64:	e7b5      	b.n	80079d2 <_dtoa_r+0x1aa>
 8007a66:	f1ca 0300 	rsb	r3, sl, #0
 8007a6a:	9306      	str	r3, [sp, #24]
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	eba8 080a 	sub.w	r8, r8, sl
 8007a72:	930d      	str	r3, [sp, #52]	; 0x34
 8007a74:	e7c2      	b.n	80079fc <_dtoa_r+0x1d4>
 8007a76:	2300      	movs	r3, #0
 8007a78:	9308      	str	r3, [sp, #32]
 8007a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	dc39      	bgt.n	8007af4 <_dtoa_r+0x2cc>
 8007a80:	f04f 0901 	mov.w	r9, #1
 8007a84:	f8cd 9004 	str.w	r9, [sp, #4]
 8007a88:	464b      	mov	r3, r9
 8007a8a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007a8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007a90:	2200      	movs	r2, #0
 8007a92:	6042      	str	r2, [r0, #4]
 8007a94:	2204      	movs	r2, #4
 8007a96:	f102 0614 	add.w	r6, r2, #20
 8007a9a:	429e      	cmp	r6, r3
 8007a9c:	6841      	ldr	r1, [r0, #4]
 8007a9e:	d92f      	bls.n	8007b00 <_dtoa_r+0x2d8>
 8007aa0:	4620      	mov	r0, r4
 8007aa2:	f000 fed9 	bl	8008858 <_Balloc>
 8007aa6:	9000      	str	r0, [sp, #0]
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	d14b      	bne.n	8007b44 <_dtoa_r+0x31c>
 8007aac:	4b24      	ldr	r3, [pc, #144]	; (8007b40 <_dtoa_r+0x318>)
 8007aae:	4602      	mov	r2, r0
 8007ab0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007ab4:	e6d1      	b.n	800785a <_dtoa_r+0x32>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e7de      	b.n	8007a78 <_dtoa_r+0x250>
 8007aba:	2300      	movs	r3, #0
 8007abc:	9308      	str	r3, [sp, #32]
 8007abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac0:	eb0a 0903 	add.w	r9, sl, r3
 8007ac4:	f109 0301 	add.w	r3, r9, #1
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	9301      	str	r3, [sp, #4]
 8007acc:	bfb8      	it	lt
 8007ace:	2301      	movlt	r3, #1
 8007ad0:	e7dd      	b.n	8007a8e <_dtoa_r+0x266>
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e7f2      	b.n	8007abc <_dtoa_r+0x294>
 8007ad6:	2501      	movs	r5, #1
 8007ad8:	2300      	movs	r3, #0
 8007ada:	9305      	str	r3, [sp, #20]
 8007adc:	9508      	str	r5, [sp, #32]
 8007ade:	f04f 39ff 	mov.w	r9, #4294967295
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f8cd 9004 	str.w	r9, [sp, #4]
 8007ae8:	2312      	movs	r3, #18
 8007aea:	9209      	str	r2, [sp, #36]	; 0x24
 8007aec:	e7cf      	b.n	8007a8e <_dtoa_r+0x266>
 8007aee:	2301      	movs	r3, #1
 8007af0:	9308      	str	r3, [sp, #32]
 8007af2:	e7f4      	b.n	8007ade <_dtoa_r+0x2b6>
 8007af4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007af8:	f8cd 9004 	str.w	r9, [sp, #4]
 8007afc:	464b      	mov	r3, r9
 8007afe:	e7c6      	b.n	8007a8e <_dtoa_r+0x266>
 8007b00:	3101      	adds	r1, #1
 8007b02:	6041      	str	r1, [r0, #4]
 8007b04:	0052      	lsls	r2, r2, #1
 8007b06:	e7c6      	b.n	8007a96 <_dtoa_r+0x26e>
 8007b08:	636f4361 	.word	0x636f4361
 8007b0c:	3fd287a7 	.word	0x3fd287a7
 8007b10:	8b60c8b3 	.word	0x8b60c8b3
 8007b14:	3fc68a28 	.word	0x3fc68a28
 8007b18:	509f79fb 	.word	0x509f79fb
 8007b1c:	3fd34413 	.word	0x3fd34413
 8007b20:	08009769 	.word	0x08009769
 8007b24:	08009780 	.word	0x08009780
 8007b28:	7ff00000 	.word	0x7ff00000
 8007b2c:	08009765 	.word	0x08009765
 8007b30:	0800975c 	.word	0x0800975c
 8007b34:	08009739 	.word	0x08009739
 8007b38:	3ff80000 	.word	0x3ff80000
 8007b3c:	080098d8 	.word	0x080098d8
 8007b40:	080097df 	.word	0x080097df
 8007b44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b46:	9a00      	ldr	r2, [sp, #0]
 8007b48:	601a      	str	r2, [r3, #0]
 8007b4a:	9b01      	ldr	r3, [sp, #4]
 8007b4c:	2b0e      	cmp	r3, #14
 8007b4e:	f200 80ad 	bhi.w	8007cac <_dtoa_r+0x484>
 8007b52:	2d00      	cmp	r5, #0
 8007b54:	f000 80aa 	beq.w	8007cac <_dtoa_r+0x484>
 8007b58:	f1ba 0f00 	cmp.w	sl, #0
 8007b5c:	dd36      	ble.n	8007bcc <_dtoa_r+0x3a4>
 8007b5e:	4ac3      	ldr	r2, [pc, #780]	; (8007e6c <_dtoa_r+0x644>)
 8007b60:	f00a 030f 	and.w	r3, sl, #15
 8007b64:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007b68:	ed93 7b00 	vldr	d7, [r3]
 8007b6c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007b70:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007b74:	eeb0 8a47 	vmov.f32	s16, s14
 8007b78:	eef0 8a67 	vmov.f32	s17, s15
 8007b7c:	d016      	beq.n	8007bac <_dtoa_r+0x384>
 8007b7e:	4bbc      	ldr	r3, [pc, #752]	; (8007e70 <_dtoa_r+0x648>)
 8007b80:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007b84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b88:	f7f8 fe60 	bl	800084c <__aeabi_ddiv>
 8007b8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b90:	f007 070f 	and.w	r7, r7, #15
 8007b94:	2503      	movs	r5, #3
 8007b96:	4eb6      	ldr	r6, [pc, #728]	; (8007e70 <_dtoa_r+0x648>)
 8007b98:	b957      	cbnz	r7, 8007bb0 <_dtoa_r+0x388>
 8007b9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b9e:	ec53 2b18 	vmov	r2, r3, d8
 8007ba2:	f7f8 fe53 	bl	800084c <__aeabi_ddiv>
 8007ba6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007baa:	e029      	b.n	8007c00 <_dtoa_r+0x3d8>
 8007bac:	2502      	movs	r5, #2
 8007bae:	e7f2      	b.n	8007b96 <_dtoa_r+0x36e>
 8007bb0:	07f9      	lsls	r1, r7, #31
 8007bb2:	d508      	bpl.n	8007bc6 <_dtoa_r+0x39e>
 8007bb4:	ec51 0b18 	vmov	r0, r1, d8
 8007bb8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007bbc:	f7f8 fd1c 	bl	80005f8 <__aeabi_dmul>
 8007bc0:	ec41 0b18 	vmov	d8, r0, r1
 8007bc4:	3501      	adds	r5, #1
 8007bc6:	107f      	asrs	r7, r7, #1
 8007bc8:	3608      	adds	r6, #8
 8007bca:	e7e5      	b.n	8007b98 <_dtoa_r+0x370>
 8007bcc:	f000 80a6 	beq.w	8007d1c <_dtoa_r+0x4f4>
 8007bd0:	f1ca 0600 	rsb	r6, sl, #0
 8007bd4:	4ba5      	ldr	r3, [pc, #660]	; (8007e6c <_dtoa_r+0x644>)
 8007bd6:	4fa6      	ldr	r7, [pc, #664]	; (8007e70 <_dtoa_r+0x648>)
 8007bd8:	f006 020f 	and.w	r2, r6, #15
 8007bdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007be8:	f7f8 fd06 	bl	80005f8 <__aeabi_dmul>
 8007bec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bf0:	1136      	asrs	r6, r6, #4
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	2502      	movs	r5, #2
 8007bf6:	2e00      	cmp	r6, #0
 8007bf8:	f040 8085 	bne.w	8007d06 <_dtoa_r+0x4de>
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1d2      	bne.n	8007ba6 <_dtoa_r+0x37e>
 8007c00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 808c 	beq.w	8007d20 <_dtoa_r+0x4f8>
 8007c08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007c0c:	4b99      	ldr	r3, [pc, #612]	; (8007e74 <_dtoa_r+0x64c>)
 8007c0e:	2200      	movs	r2, #0
 8007c10:	4630      	mov	r0, r6
 8007c12:	4639      	mov	r1, r7
 8007c14:	f7f8 ff62 	bl	8000adc <__aeabi_dcmplt>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	f000 8081 	beq.w	8007d20 <_dtoa_r+0x4f8>
 8007c1e:	9b01      	ldr	r3, [sp, #4]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d07d      	beq.n	8007d20 <_dtoa_r+0x4f8>
 8007c24:	f1b9 0f00 	cmp.w	r9, #0
 8007c28:	dd3c      	ble.n	8007ca4 <_dtoa_r+0x47c>
 8007c2a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007c2e:	9307      	str	r3, [sp, #28]
 8007c30:	2200      	movs	r2, #0
 8007c32:	4b91      	ldr	r3, [pc, #580]	; (8007e78 <_dtoa_r+0x650>)
 8007c34:	4630      	mov	r0, r6
 8007c36:	4639      	mov	r1, r7
 8007c38:	f7f8 fcde 	bl	80005f8 <__aeabi_dmul>
 8007c3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c40:	3501      	adds	r5, #1
 8007c42:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007c46:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	f7f8 fc6a 	bl	8000524 <__aeabi_i2d>
 8007c50:	4632      	mov	r2, r6
 8007c52:	463b      	mov	r3, r7
 8007c54:	f7f8 fcd0 	bl	80005f8 <__aeabi_dmul>
 8007c58:	4b88      	ldr	r3, [pc, #544]	; (8007e7c <_dtoa_r+0x654>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f7f8 fb16 	bl	800028c <__adddf3>
 8007c60:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007c64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c68:	9303      	str	r3, [sp, #12]
 8007c6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d15c      	bne.n	8007d2a <_dtoa_r+0x502>
 8007c70:	4b83      	ldr	r3, [pc, #524]	; (8007e80 <_dtoa_r+0x658>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	4630      	mov	r0, r6
 8007c76:	4639      	mov	r1, r7
 8007c78:	f7f8 fb06 	bl	8000288 <__aeabi_dsub>
 8007c7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c80:	4606      	mov	r6, r0
 8007c82:	460f      	mov	r7, r1
 8007c84:	f7f8 ff48 	bl	8000b18 <__aeabi_dcmpgt>
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	f040 8296 	bne.w	80081ba <_dtoa_r+0x992>
 8007c8e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007c92:	4630      	mov	r0, r6
 8007c94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c98:	4639      	mov	r1, r7
 8007c9a:	f7f8 ff1f 	bl	8000adc <__aeabi_dcmplt>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	f040 8288 	bne.w	80081b4 <_dtoa_r+0x98c>
 8007ca4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007ca8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007cac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f2c0 8158 	blt.w	8007f64 <_dtoa_r+0x73c>
 8007cb4:	f1ba 0f0e 	cmp.w	sl, #14
 8007cb8:	f300 8154 	bgt.w	8007f64 <_dtoa_r+0x73c>
 8007cbc:	4b6b      	ldr	r3, [pc, #428]	; (8007e6c <_dtoa_r+0x644>)
 8007cbe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007cc2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f280 80e3 	bge.w	8007e94 <_dtoa_r+0x66c>
 8007cce:	9b01      	ldr	r3, [sp, #4]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f300 80df 	bgt.w	8007e94 <_dtoa_r+0x66c>
 8007cd6:	f040 826d 	bne.w	80081b4 <_dtoa_r+0x98c>
 8007cda:	4b69      	ldr	r3, [pc, #420]	; (8007e80 <_dtoa_r+0x658>)
 8007cdc:	2200      	movs	r2, #0
 8007cde:	4640      	mov	r0, r8
 8007ce0:	4649      	mov	r1, r9
 8007ce2:	f7f8 fc89 	bl	80005f8 <__aeabi_dmul>
 8007ce6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cea:	f7f8 ff0b 	bl	8000b04 <__aeabi_dcmpge>
 8007cee:	9e01      	ldr	r6, [sp, #4]
 8007cf0:	4637      	mov	r7, r6
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	f040 8243 	bne.w	800817e <_dtoa_r+0x956>
 8007cf8:	9d00      	ldr	r5, [sp, #0]
 8007cfa:	2331      	movs	r3, #49	; 0x31
 8007cfc:	f805 3b01 	strb.w	r3, [r5], #1
 8007d00:	f10a 0a01 	add.w	sl, sl, #1
 8007d04:	e23f      	b.n	8008186 <_dtoa_r+0x95e>
 8007d06:	07f2      	lsls	r2, r6, #31
 8007d08:	d505      	bpl.n	8007d16 <_dtoa_r+0x4ee>
 8007d0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d0e:	f7f8 fc73 	bl	80005f8 <__aeabi_dmul>
 8007d12:	3501      	adds	r5, #1
 8007d14:	2301      	movs	r3, #1
 8007d16:	1076      	asrs	r6, r6, #1
 8007d18:	3708      	adds	r7, #8
 8007d1a:	e76c      	b.n	8007bf6 <_dtoa_r+0x3ce>
 8007d1c:	2502      	movs	r5, #2
 8007d1e:	e76f      	b.n	8007c00 <_dtoa_r+0x3d8>
 8007d20:	9b01      	ldr	r3, [sp, #4]
 8007d22:	f8cd a01c 	str.w	sl, [sp, #28]
 8007d26:	930c      	str	r3, [sp, #48]	; 0x30
 8007d28:	e78d      	b.n	8007c46 <_dtoa_r+0x41e>
 8007d2a:	9900      	ldr	r1, [sp, #0]
 8007d2c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007d2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d30:	4b4e      	ldr	r3, [pc, #312]	; (8007e6c <_dtoa_r+0x644>)
 8007d32:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d36:	4401      	add	r1, r0
 8007d38:	9102      	str	r1, [sp, #8]
 8007d3a:	9908      	ldr	r1, [sp, #32]
 8007d3c:	eeb0 8a47 	vmov.f32	s16, s14
 8007d40:	eef0 8a67 	vmov.f32	s17, s15
 8007d44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d4c:	2900      	cmp	r1, #0
 8007d4e:	d045      	beq.n	8007ddc <_dtoa_r+0x5b4>
 8007d50:	494c      	ldr	r1, [pc, #304]	; (8007e84 <_dtoa_r+0x65c>)
 8007d52:	2000      	movs	r0, #0
 8007d54:	f7f8 fd7a 	bl	800084c <__aeabi_ddiv>
 8007d58:	ec53 2b18 	vmov	r2, r3, d8
 8007d5c:	f7f8 fa94 	bl	8000288 <__aeabi_dsub>
 8007d60:	9d00      	ldr	r5, [sp, #0]
 8007d62:	ec41 0b18 	vmov	d8, r0, r1
 8007d66:	4639      	mov	r1, r7
 8007d68:	4630      	mov	r0, r6
 8007d6a:	f7f8 fef5 	bl	8000b58 <__aeabi_d2iz>
 8007d6e:	900c      	str	r0, [sp, #48]	; 0x30
 8007d70:	f7f8 fbd8 	bl	8000524 <__aeabi_i2d>
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	4630      	mov	r0, r6
 8007d7a:	4639      	mov	r1, r7
 8007d7c:	f7f8 fa84 	bl	8000288 <__aeabi_dsub>
 8007d80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d82:	3330      	adds	r3, #48	; 0x30
 8007d84:	f805 3b01 	strb.w	r3, [r5], #1
 8007d88:	ec53 2b18 	vmov	r2, r3, d8
 8007d8c:	4606      	mov	r6, r0
 8007d8e:	460f      	mov	r7, r1
 8007d90:	f7f8 fea4 	bl	8000adc <__aeabi_dcmplt>
 8007d94:	2800      	cmp	r0, #0
 8007d96:	d165      	bne.n	8007e64 <_dtoa_r+0x63c>
 8007d98:	4632      	mov	r2, r6
 8007d9a:	463b      	mov	r3, r7
 8007d9c:	4935      	ldr	r1, [pc, #212]	; (8007e74 <_dtoa_r+0x64c>)
 8007d9e:	2000      	movs	r0, #0
 8007da0:	f7f8 fa72 	bl	8000288 <__aeabi_dsub>
 8007da4:	ec53 2b18 	vmov	r2, r3, d8
 8007da8:	f7f8 fe98 	bl	8000adc <__aeabi_dcmplt>
 8007dac:	2800      	cmp	r0, #0
 8007dae:	f040 80b9 	bne.w	8007f24 <_dtoa_r+0x6fc>
 8007db2:	9b02      	ldr	r3, [sp, #8]
 8007db4:	429d      	cmp	r5, r3
 8007db6:	f43f af75 	beq.w	8007ca4 <_dtoa_r+0x47c>
 8007dba:	4b2f      	ldr	r3, [pc, #188]	; (8007e78 <_dtoa_r+0x650>)
 8007dbc:	ec51 0b18 	vmov	r0, r1, d8
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f7f8 fc19 	bl	80005f8 <__aeabi_dmul>
 8007dc6:	4b2c      	ldr	r3, [pc, #176]	; (8007e78 <_dtoa_r+0x650>)
 8007dc8:	ec41 0b18 	vmov	d8, r0, r1
 8007dcc:	2200      	movs	r2, #0
 8007dce:	4630      	mov	r0, r6
 8007dd0:	4639      	mov	r1, r7
 8007dd2:	f7f8 fc11 	bl	80005f8 <__aeabi_dmul>
 8007dd6:	4606      	mov	r6, r0
 8007dd8:	460f      	mov	r7, r1
 8007dda:	e7c4      	b.n	8007d66 <_dtoa_r+0x53e>
 8007ddc:	ec51 0b17 	vmov	r0, r1, d7
 8007de0:	f7f8 fc0a 	bl	80005f8 <__aeabi_dmul>
 8007de4:	9b02      	ldr	r3, [sp, #8]
 8007de6:	9d00      	ldr	r5, [sp, #0]
 8007de8:	930c      	str	r3, [sp, #48]	; 0x30
 8007dea:	ec41 0b18 	vmov	d8, r0, r1
 8007dee:	4639      	mov	r1, r7
 8007df0:	4630      	mov	r0, r6
 8007df2:	f7f8 feb1 	bl	8000b58 <__aeabi_d2iz>
 8007df6:	9011      	str	r0, [sp, #68]	; 0x44
 8007df8:	f7f8 fb94 	bl	8000524 <__aeabi_i2d>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	460b      	mov	r3, r1
 8007e00:	4630      	mov	r0, r6
 8007e02:	4639      	mov	r1, r7
 8007e04:	f7f8 fa40 	bl	8000288 <__aeabi_dsub>
 8007e08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e0a:	3330      	adds	r3, #48	; 0x30
 8007e0c:	f805 3b01 	strb.w	r3, [r5], #1
 8007e10:	9b02      	ldr	r3, [sp, #8]
 8007e12:	429d      	cmp	r5, r3
 8007e14:	4606      	mov	r6, r0
 8007e16:	460f      	mov	r7, r1
 8007e18:	f04f 0200 	mov.w	r2, #0
 8007e1c:	d134      	bne.n	8007e88 <_dtoa_r+0x660>
 8007e1e:	4b19      	ldr	r3, [pc, #100]	; (8007e84 <_dtoa_r+0x65c>)
 8007e20:	ec51 0b18 	vmov	r0, r1, d8
 8007e24:	f7f8 fa32 	bl	800028c <__adddf3>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	4630      	mov	r0, r6
 8007e2e:	4639      	mov	r1, r7
 8007e30:	f7f8 fe72 	bl	8000b18 <__aeabi_dcmpgt>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	d175      	bne.n	8007f24 <_dtoa_r+0x6fc>
 8007e38:	ec53 2b18 	vmov	r2, r3, d8
 8007e3c:	4911      	ldr	r1, [pc, #68]	; (8007e84 <_dtoa_r+0x65c>)
 8007e3e:	2000      	movs	r0, #0
 8007e40:	f7f8 fa22 	bl	8000288 <__aeabi_dsub>
 8007e44:	4602      	mov	r2, r0
 8007e46:	460b      	mov	r3, r1
 8007e48:	4630      	mov	r0, r6
 8007e4a:	4639      	mov	r1, r7
 8007e4c:	f7f8 fe46 	bl	8000adc <__aeabi_dcmplt>
 8007e50:	2800      	cmp	r0, #0
 8007e52:	f43f af27 	beq.w	8007ca4 <_dtoa_r+0x47c>
 8007e56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e58:	1e6b      	subs	r3, r5, #1
 8007e5a:	930c      	str	r3, [sp, #48]	; 0x30
 8007e5c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007e60:	2b30      	cmp	r3, #48	; 0x30
 8007e62:	d0f8      	beq.n	8007e56 <_dtoa_r+0x62e>
 8007e64:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007e68:	e04a      	b.n	8007f00 <_dtoa_r+0x6d8>
 8007e6a:	bf00      	nop
 8007e6c:	080098d8 	.word	0x080098d8
 8007e70:	080098b0 	.word	0x080098b0
 8007e74:	3ff00000 	.word	0x3ff00000
 8007e78:	40240000 	.word	0x40240000
 8007e7c:	401c0000 	.word	0x401c0000
 8007e80:	40140000 	.word	0x40140000
 8007e84:	3fe00000 	.word	0x3fe00000
 8007e88:	4baf      	ldr	r3, [pc, #700]	; (8008148 <_dtoa_r+0x920>)
 8007e8a:	f7f8 fbb5 	bl	80005f8 <__aeabi_dmul>
 8007e8e:	4606      	mov	r6, r0
 8007e90:	460f      	mov	r7, r1
 8007e92:	e7ac      	b.n	8007dee <_dtoa_r+0x5c6>
 8007e94:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007e98:	9d00      	ldr	r5, [sp, #0]
 8007e9a:	4642      	mov	r2, r8
 8007e9c:	464b      	mov	r3, r9
 8007e9e:	4630      	mov	r0, r6
 8007ea0:	4639      	mov	r1, r7
 8007ea2:	f7f8 fcd3 	bl	800084c <__aeabi_ddiv>
 8007ea6:	f7f8 fe57 	bl	8000b58 <__aeabi_d2iz>
 8007eaa:	9002      	str	r0, [sp, #8]
 8007eac:	f7f8 fb3a 	bl	8000524 <__aeabi_i2d>
 8007eb0:	4642      	mov	r2, r8
 8007eb2:	464b      	mov	r3, r9
 8007eb4:	f7f8 fba0 	bl	80005f8 <__aeabi_dmul>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	460b      	mov	r3, r1
 8007ebc:	4630      	mov	r0, r6
 8007ebe:	4639      	mov	r1, r7
 8007ec0:	f7f8 f9e2 	bl	8000288 <__aeabi_dsub>
 8007ec4:	9e02      	ldr	r6, [sp, #8]
 8007ec6:	9f01      	ldr	r7, [sp, #4]
 8007ec8:	3630      	adds	r6, #48	; 0x30
 8007eca:	f805 6b01 	strb.w	r6, [r5], #1
 8007ece:	9e00      	ldr	r6, [sp, #0]
 8007ed0:	1bae      	subs	r6, r5, r6
 8007ed2:	42b7      	cmp	r7, r6
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	d137      	bne.n	8007f4a <_dtoa_r+0x722>
 8007eda:	f7f8 f9d7 	bl	800028c <__adddf3>
 8007ede:	4642      	mov	r2, r8
 8007ee0:	464b      	mov	r3, r9
 8007ee2:	4606      	mov	r6, r0
 8007ee4:	460f      	mov	r7, r1
 8007ee6:	f7f8 fe17 	bl	8000b18 <__aeabi_dcmpgt>
 8007eea:	b9c8      	cbnz	r0, 8007f20 <_dtoa_r+0x6f8>
 8007eec:	4642      	mov	r2, r8
 8007eee:	464b      	mov	r3, r9
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	4639      	mov	r1, r7
 8007ef4:	f7f8 fde8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ef8:	b110      	cbz	r0, 8007f00 <_dtoa_r+0x6d8>
 8007efa:	9b02      	ldr	r3, [sp, #8]
 8007efc:	07d9      	lsls	r1, r3, #31
 8007efe:	d40f      	bmi.n	8007f20 <_dtoa_r+0x6f8>
 8007f00:	4620      	mov	r0, r4
 8007f02:	4659      	mov	r1, fp
 8007f04:	f000 fce8 	bl	80088d8 <_Bfree>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	702b      	strb	r3, [r5, #0]
 8007f0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007f0e:	f10a 0001 	add.w	r0, sl, #1
 8007f12:	6018      	str	r0, [r3, #0]
 8007f14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	f43f acd8 	beq.w	80078cc <_dtoa_r+0xa4>
 8007f1c:	601d      	str	r5, [r3, #0]
 8007f1e:	e4d5      	b.n	80078cc <_dtoa_r+0xa4>
 8007f20:	f8cd a01c 	str.w	sl, [sp, #28]
 8007f24:	462b      	mov	r3, r5
 8007f26:	461d      	mov	r5, r3
 8007f28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f2c:	2a39      	cmp	r2, #57	; 0x39
 8007f2e:	d108      	bne.n	8007f42 <_dtoa_r+0x71a>
 8007f30:	9a00      	ldr	r2, [sp, #0]
 8007f32:	429a      	cmp	r2, r3
 8007f34:	d1f7      	bne.n	8007f26 <_dtoa_r+0x6fe>
 8007f36:	9a07      	ldr	r2, [sp, #28]
 8007f38:	9900      	ldr	r1, [sp, #0]
 8007f3a:	3201      	adds	r2, #1
 8007f3c:	9207      	str	r2, [sp, #28]
 8007f3e:	2230      	movs	r2, #48	; 0x30
 8007f40:	700a      	strb	r2, [r1, #0]
 8007f42:	781a      	ldrb	r2, [r3, #0]
 8007f44:	3201      	adds	r2, #1
 8007f46:	701a      	strb	r2, [r3, #0]
 8007f48:	e78c      	b.n	8007e64 <_dtoa_r+0x63c>
 8007f4a:	4b7f      	ldr	r3, [pc, #508]	; (8008148 <_dtoa_r+0x920>)
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f7f8 fb53 	bl	80005f8 <__aeabi_dmul>
 8007f52:	2200      	movs	r2, #0
 8007f54:	2300      	movs	r3, #0
 8007f56:	4606      	mov	r6, r0
 8007f58:	460f      	mov	r7, r1
 8007f5a:	f7f8 fdb5 	bl	8000ac8 <__aeabi_dcmpeq>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	d09b      	beq.n	8007e9a <_dtoa_r+0x672>
 8007f62:	e7cd      	b.n	8007f00 <_dtoa_r+0x6d8>
 8007f64:	9a08      	ldr	r2, [sp, #32]
 8007f66:	2a00      	cmp	r2, #0
 8007f68:	f000 80c4 	beq.w	80080f4 <_dtoa_r+0x8cc>
 8007f6c:	9a05      	ldr	r2, [sp, #20]
 8007f6e:	2a01      	cmp	r2, #1
 8007f70:	f300 80a8 	bgt.w	80080c4 <_dtoa_r+0x89c>
 8007f74:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007f76:	2a00      	cmp	r2, #0
 8007f78:	f000 80a0 	beq.w	80080bc <_dtoa_r+0x894>
 8007f7c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007f80:	9e06      	ldr	r6, [sp, #24]
 8007f82:	4645      	mov	r5, r8
 8007f84:	9a04      	ldr	r2, [sp, #16]
 8007f86:	2101      	movs	r1, #1
 8007f88:	441a      	add	r2, r3
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	4498      	add	r8, r3
 8007f8e:	9204      	str	r2, [sp, #16]
 8007f90:	f000 fd5e 	bl	8008a50 <__i2b>
 8007f94:	4607      	mov	r7, r0
 8007f96:	2d00      	cmp	r5, #0
 8007f98:	dd0b      	ble.n	8007fb2 <_dtoa_r+0x78a>
 8007f9a:	9b04      	ldr	r3, [sp, #16]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	dd08      	ble.n	8007fb2 <_dtoa_r+0x78a>
 8007fa0:	42ab      	cmp	r3, r5
 8007fa2:	9a04      	ldr	r2, [sp, #16]
 8007fa4:	bfa8      	it	ge
 8007fa6:	462b      	movge	r3, r5
 8007fa8:	eba8 0803 	sub.w	r8, r8, r3
 8007fac:	1aed      	subs	r5, r5, r3
 8007fae:	1ad3      	subs	r3, r2, r3
 8007fb0:	9304      	str	r3, [sp, #16]
 8007fb2:	9b06      	ldr	r3, [sp, #24]
 8007fb4:	b1fb      	cbz	r3, 8007ff6 <_dtoa_r+0x7ce>
 8007fb6:	9b08      	ldr	r3, [sp, #32]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	f000 809f 	beq.w	80080fc <_dtoa_r+0x8d4>
 8007fbe:	2e00      	cmp	r6, #0
 8007fc0:	dd11      	ble.n	8007fe6 <_dtoa_r+0x7be>
 8007fc2:	4639      	mov	r1, r7
 8007fc4:	4632      	mov	r2, r6
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	f000 fdfe 	bl	8008bc8 <__pow5mult>
 8007fcc:	465a      	mov	r2, fp
 8007fce:	4601      	mov	r1, r0
 8007fd0:	4607      	mov	r7, r0
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	f000 fd52 	bl	8008a7c <__multiply>
 8007fd8:	4659      	mov	r1, fp
 8007fda:	9007      	str	r0, [sp, #28]
 8007fdc:	4620      	mov	r0, r4
 8007fde:	f000 fc7b 	bl	80088d8 <_Bfree>
 8007fe2:	9b07      	ldr	r3, [sp, #28]
 8007fe4:	469b      	mov	fp, r3
 8007fe6:	9b06      	ldr	r3, [sp, #24]
 8007fe8:	1b9a      	subs	r2, r3, r6
 8007fea:	d004      	beq.n	8007ff6 <_dtoa_r+0x7ce>
 8007fec:	4659      	mov	r1, fp
 8007fee:	4620      	mov	r0, r4
 8007ff0:	f000 fdea 	bl	8008bc8 <__pow5mult>
 8007ff4:	4683      	mov	fp, r0
 8007ff6:	2101      	movs	r1, #1
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	f000 fd29 	bl	8008a50 <__i2b>
 8007ffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008000:	2b00      	cmp	r3, #0
 8008002:	4606      	mov	r6, r0
 8008004:	dd7c      	ble.n	8008100 <_dtoa_r+0x8d8>
 8008006:	461a      	mov	r2, r3
 8008008:	4601      	mov	r1, r0
 800800a:	4620      	mov	r0, r4
 800800c:	f000 fddc 	bl	8008bc8 <__pow5mult>
 8008010:	9b05      	ldr	r3, [sp, #20]
 8008012:	2b01      	cmp	r3, #1
 8008014:	4606      	mov	r6, r0
 8008016:	dd76      	ble.n	8008106 <_dtoa_r+0x8de>
 8008018:	2300      	movs	r3, #0
 800801a:	9306      	str	r3, [sp, #24]
 800801c:	6933      	ldr	r3, [r6, #16]
 800801e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008022:	6918      	ldr	r0, [r3, #16]
 8008024:	f000 fcc4 	bl	80089b0 <__hi0bits>
 8008028:	f1c0 0020 	rsb	r0, r0, #32
 800802c:	9b04      	ldr	r3, [sp, #16]
 800802e:	4418      	add	r0, r3
 8008030:	f010 001f 	ands.w	r0, r0, #31
 8008034:	f000 8086 	beq.w	8008144 <_dtoa_r+0x91c>
 8008038:	f1c0 0320 	rsb	r3, r0, #32
 800803c:	2b04      	cmp	r3, #4
 800803e:	dd7f      	ble.n	8008140 <_dtoa_r+0x918>
 8008040:	f1c0 001c 	rsb	r0, r0, #28
 8008044:	9b04      	ldr	r3, [sp, #16]
 8008046:	4403      	add	r3, r0
 8008048:	4480      	add	r8, r0
 800804a:	4405      	add	r5, r0
 800804c:	9304      	str	r3, [sp, #16]
 800804e:	f1b8 0f00 	cmp.w	r8, #0
 8008052:	dd05      	ble.n	8008060 <_dtoa_r+0x838>
 8008054:	4659      	mov	r1, fp
 8008056:	4642      	mov	r2, r8
 8008058:	4620      	mov	r0, r4
 800805a:	f000 fe0f 	bl	8008c7c <__lshift>
 800805e:	4683      	mov	fp, r0
 8008060:	9b04      	ldr	r3, [sp, #16]
 8008062:	2b00      	cmp	r3, #0
 8008064:	dd05      	ble.n	8008072 <_dtoa_r+0x84a>
 8008066:	4631      	mov	r1, r6
 8008068:	461a      	mov	r2, r3
 800806a:	4620      	mov	r0, r4
 800806c:	f000 fe06 	bl	8008c7c <__lshift>
 8008070:	4606      	mov	r6, r0
 8008072:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008074:	2b00      	cmp	r3, #0
 8008076:	d069      	beq.n	800814c <_dtoa_r+0x924>
 8008078:	4631      	mov	r1, r6
 800807a:	4658      	mov	r0, fp
 800807c:	f000 fe6a 	bl	8008d54 <__mcmp>
 8008080:	2800      	cmp	r0, #0
 8008082:	da63      	bge.n	800814c <_dtoa_r+0x924>
 8008084:	2300      	movs	r3, #0
 8008086:	4659      	mov	r1, fp
 8008088:	220a      	movs	r2, #10
 800808a:	4620      	mov	r0, r4
 800808c:	f000 fc46 	bl	800891c <__multadd>
 8008090:	9b08      	ldr	r3, [sp, #32]
 8008092:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008096:	4683      	mov	fp, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 818f 	beq.w	80083bc <_dtoa_r+0xb94>
 800809e:	4639      	mov	r1, r7
 80080a0:	2300      	movs	r3, #0
 80080a2:	220a      	movs	r2, #10
 80080a4:	4620      	mov	r0, r4
 80080a6:	f000 fc39 	bl	800891c <__multadd>
 80080aa:	f1b9 0f00 	cmp.w	r9, #0
 80080ae:	4607      	mov	r7, r0
 80080b0:	f300 808e 	bgt.w	80081d0 <_dtoa_r+0x9a8>
 80080b4:	9b05      	ldr	r3, [sp, #20]
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	dc50      	bgt.n	800815c <_dtoa_r+0x934>
 80080ba:	e089      	b.n	80081d0 <_dtoa_r+0x9a8>
 80080bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80080be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80080c2:	e75d      	b.n	8007f80 <_dtoa_r+0x758>
 80080c4:	9b01      	ldr	r3, [sp, #4]
 80080c6:	1e5e      	subs	r6, r3, #1
 80080c8:	9b06      	ldr	r3, [sp, #24]
 80080ca:	42b3      	cmp	r3, r6
 80080cc:	bfbf      	itttt	lt
 80080ce:	9b06      	ldrlt	r3, [sp, #24]
 80080d0:	9606      	strlt	r6, [sp, #24]
 80080d2:	1af2      	sublt	r2, r6, r3
 80080d4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80080d6:	bfb6      	itet	lt
 80080d8:	189b      	addlt	r3, r3, r2
 80080da:	1b9e      	subge	r6, r3, r6
 80080dc:	930d      	strlt	r3, [sp, #52]	; 0x34
 80080de:	9b01      	ldr	r3, [sp, #4]
 80080e0:	bfb8      	it	lt
 80080e2:	2600      	movlt	r6, #0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	bfb5      	itete	lt
 80080e8:	eba8 0503 	sublt.w	r5, r8, r3
 80080ec:	9b01      	ldrge	r3, [sp, #4]
 80080ee:	2300      	movlt	r3, #0
 80080f0:	4645      	movge	r5, r8
 80080f2:	e747      	b.n	8007f84 <_dtoa_r+0x75c>
 80080f4:	9e06      	ldr	r6, [sp, #24]
 80080f6:	9f08      	ldr	r7, [sp, #32]
 80080f8:	4645      	mov	r5, r8
 80080fa:	e74c      	b.n	8007f96 <_dtoa_r+0x76e>
 80080fc:	9a06      	ldr	r2, [sp, #24]
 80080fe:	e775      	b.n	8007fec <_dtoa_r+0x7c4>
 8008100:	9b05      	ldr	r3, [sp, #20]
 8008102:	2b01      	cmp	r3, #1
 8008104:	dc18      	bgt.n	8008138 <_dtoa_r+0x910>
 8008106:	9b02      	ldr	r3, [sp, #8]
 8008108:	b9b3      	cbnz	r3, 8008138 <_dtoa_r+0x910>
 800810a:	9b03      	ldr	r3, [sp, #12]
 800810c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008110:	b9a3      	cbnz	r3, 800813c <_dtoa_r+0x914>
 8008112:	9b03      	ldr	r3, [sp, #12]
 8008114:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008118:	0d1b      	lsrs	r3, r3, #20
 800811a:	051b      	lsls	r3, r3, #20
 800811c:	b12b      	cbz	r3, 800812a <_dtoa_r+0x902>
 800811e:	9b04      	ldr	r3, [sp, #16]
 8008120:	3301      	adds	r3, #1
 8008122:	9304      	str	r3, [sp, #16]
 8008124:	f108 0801 	add.w	r8, r8, #1
 8008128:	2301      	movs	r3, #1
 800812a:	9306      	str	r3, [sp, #24]
 800812c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800812e:	2b00      	cmp	r3, #0
 8008130:	f47f af74 	bne.w	800801c <_dtoa_r+0x7f4>
 8008134:	2001      	movs	r0, #1
 8008136:	e779      	b.n	800802c <_dtoa_r+0x804>
 8008138:	2300      	movs	r3, #0
 800813a:	e7f6      	b.n	800812a <_dtoa_r+0x902>
 800813c:	9b02      	ldr	r3, [sp, #8]
 800813e:	e7f4      	b.n	800812a <_dtoa_r+0x902>
 8008140:	d085      	beq.n	800804e <_dtoa_r+0x826>
 8008142:	4618      	mov	r0, r3
 8008144:	301c      	adds	r0, #28
 8008146:	e77d      	b.n	8008044 <_dtoa_r+0x81c>
 8008148:	40240000 	.word	0x40240000
 800814c:	9b01      	ldr	r3, [sp, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	dc38      	bgt.n	80081c4 <_dtoa_r+0x99c>
 8008152:	9b05      	ldr	r3, [sp, #20]
 8008154:	2b02      	cmp	r3, #2
 8008156:	dd35      	ble.n	80081c4 <_dtoa_r+0x99c>
 8008158:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800815c:	f1b9 0f00 	cmp.w	r9, #0
 8008160:	d10d      	bne.n	800817e <_dtoa_r+0x956>
 8008162:	4631      	mov	r1, r6
 8008164:	464b      	mov	r3, r9
 8008166:	2205      	movs	r2, #5
 8008168:	4620      	mov	r0, r4
 800816a:	f000 fbd7 	bl	800891c <__multadd>
 800816e:	4601      	mov	r1, r0
 8008170:	4606      	mov	r6, r0
 8008172:	4658      	mov	r0, fp
 8008174:	f000 fdee 	bl	8008d54 <__mcmp>
 8008178:	2800      	cmp	r0, #0
 800817a:	f73f adbd 	bgt.w	8007cf8 <_dtoa_r+0x4d0>
 800817e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008180:	9d00      	ldr	r5, [sp, #0]
 8008182:	ea6f 0a03 	mvn.w	sl, r3
 8008186:	f04f 0800 	mov.w	r8, #0
 800818a:	4631      	mov	r1, r6
 800818c:	4620      	mov	r0, r4
 800818e:	f000 fba3 	bl	80088d8 <_Bfree>
 8008192:	2f00      	cmp	r7, #0
 8008194:	f43f aeb4 	beq.w	8007f00 <_dtoa_r+0x6d8>
 8008198:	f1b8 0f00 	cmp.w	r8, #0
 800819c:	d005      	beq.n	80081aa <_dtoa_r+0x982>
 800819e:	45b8      	cmp	r8, r7
 80081a0:	d003      	beq.n	80081aa <_dtoa_r+0x982>
 80081a2:	4641      	mov	r1, r8
 80081a4:	4620      	mov	r0, r4
 80081a6:	f000 fb97 	bl	80088d8 <_Bfree>
 80081aa:	4639      	mov	r1, r7
 80081ac:	4620      	mov	r0, r4
 80081ae:	f000 fb93 	bl	80088d8 <_Bfree>
 80081b2:	e6a5      	b.n	8007f00 <_dtoa_r+0x6d8>
 80081b4:	2600      	movs	r6, #0
 80081b6:	4637      	mov	r7, r6
 80081b8:	e7e1      	b.n	800817e <_dtoa_r+0x956>
 80081ba:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80081bc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80081c0:	4637      	mov	r7, r6
 80081c2:	e599      	b.n	8007cf8 <_dtoa_r+0x4d0>
 80081c4:	9b08      	ldr	r3, [sp, #32]
 80081c6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f000 80fd 	beq.w	80083ca <_dtoa_r+0xba2>
 80081d0:	2d00      	cmp	r5, #0
 80081d2:	dd05      	ble.n	80081e0 <_dtoa_r+0x9b8>
 80081d4:	4639      	mov	r1, r7
 80081d6:	462a      	mov	r2, r5
 80081d8:	4620      	mov	r0, r4
 80081da:	f000 fd4f 	bl	8008c7c <__lshift>
 80081de:	4607      	mov	r7, r0
 80081e0:	9b06      	ldr	r3, [sp, #24]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d05c      	beq.n	80082a0 <_dtoa_r+0xa78>
 80081e6:	6879      	ldr	r1, [r7, #4]
 80081e8:	4620      	mov	r0, r4
 80081ea:	f000 fb35 	bl	8008858 <_Balloc>
 80081ee:	4605      	mov	r5, r0
 80081f0:	b928      	cbnz	r0, 80081fe <_dtoa_r+0x9d6>
 80081f2:	4b80      	ldr	r3, [pc, #512]	; (80083f4 <_dtoa_r+0xbcc>)
 80081f4:	4602      	mov	r2, r0
 80081f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80081fa:	f7ff bb2e 	b.w	800785a <_dtoa_r+0x32>
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	3202      	adds	r2, #2
 8008202:	0092      	lsls	r2, r2, #2
 8008204:	f107 010c 	add.w	r1, r7, #12
 8008208:	300c      	adds	r0, #12
 800820a:	f7fe fcb1 	bl	8006b70 <memcpy>
 800820e:	2201      	movs	r2, #1
 8008210:	4629      	mov	r1, r5
 8008212:	4620      	mov	r0, r4
 8008214:	f000 fd32 	bl	8008c7c <__lshift>
 8008218:	9b00      	ldr	r3, [sp, #0]
 800821a:	3301      	adds	r3, #1
 800821c:	9301      	str	r3, [sp, #4]
 800821e:	9b00      	ldr	r3, [sp, #0]
 8008220:	444b      	add	r3, r9
 8008222:	9307      	str	r3, [sp, #28]
 8008224:	9b02      	ldr	r3, [sp, #8]
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	46b8      	mov	r8, r7
 800822c:	9306      	str	r3, [sp, #24]
 800822e:	4607      	mov	r7, r0
 8008230:	9b01      	ldr	r3, [sp, #4]
 8008232:	4631      	mov	r1, r6
 8008234:	3b01      	subs	r3, #1
 8008236:	4658      	mov	r0, fp
 8008238:	9302      	str	r3, [sp, #8]
 800823a:	f7ff fa67 	bl	800770c <quorem>
 800823e:	4603      	mov	r3, r0
 8008240:	3330      	adds	r3, #48	; 0x30
 8008242:	9004      	str	r0, [sp, #16]
 8008244:	4641      	mov	r1, r8
 8008246:	4658      	mov	r0, fp
 8008248:	9308      	str	r3, [sp, #32]
 800824a:	f000 fd83 	bl	8008d54 <__mcmp>
 800824e:	463a      	mov	r2, r7
 8008250:	4681      	mov	r9, r0
 8008252:	4631      	mov	r1, r6
 8008254:	4620      	mov	r0, r4
 8008256:	f000 fd99 	bl	8008d8c <__mdiff>
 800825a:	68c2      	ldr	r2, [r0, #12]
 800825c:	9b08      	ldr	r3, [sp, #32]
 800825e:	4605      	mov	r5, r0
 8008260:	bb02      	cbnz	r2, 80082a4 <_dtoa_r+0xa7c>
 8008262:	4601      	mov	r1, r0
 8008264:	4658      	mov	r0, fp
 8008266:	f000 fd75 	bl	8008d54 <__mcmp>
 800826a:	9b08      	ldr	r3, [sp, #32]
 800826c:	4602      	mov	r2, r0
 800826e:	4629      	mov	r1, r5
 8008270:	4620      	mov	r0, r4
 8008272:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008276:	f000 fb2f 	bl	80088d8 <_Bfree>
 800827a:	9b05      	ldr	r3, [sp, #20]
 800827c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800827e:	9d01      	ldr	r5, [sp, #4]
 8008280:	ea43 0102 	orr.w	r1, r3, r2
 8008284:	9b06      	ldr	r3, [sp, #24]
 8008286:	430b      	orrs	r3, r1
 8008288:	9b08      	ldr	r3, [sp, #32]
 800828a:	d10d      	bne.n	80082a8 <_dtoa_r+0xa80>
 800828c:	2b39      	cmp	r3, #57	; 0x39
 800828e:	d029      	beq.n	80082e4 <_dtoa_r+0xabc>
 8008290:	f1b9 0f00 	cmp.w	r9, #0
 8008294:	dd01      	ble.n	800829a <_dtoa_r+0xa72>
 8008296:	9b04      	ldr	r3, [sp, #16]
 8008298:	3331      	adds	r3, #49	; 0x31
 800829a:	9a02      	ldr	r2, [sp, #8]
 800829c:	7013      	strb	r3, [r2, #0]
 800829e:	e774      	b.n	800818a <_dtoa_r+0x962>
 80082a0:	4638      	mov	r0, r7
 80082a2:	e7b9      	b.n	8008218 <_dtoa_r+0x9f0>
 80082a4:	2201      	movs	r2, #1
 80082a6:	e7e2      	b.n	800826e <_dtoa_r+0xa46>
 80082a8:	f1b9 0f00 	cmp.w	r9, #0
 80082ac:	db06      	blt.n	80082bc <_dtoa_r+0xa94>
 80082ae:	9905      	ldr	r1, [sp, #20]
 80082b0:	ea41 0909 	orr.w	r9, r1, r9
 80082b4:	9906      	ldr	r1, [sp, #24]
 80082b6:	ea59 0101 	orrs.w	r1, r9, r1
 80082ba:	d120      	bne.n	80082fe <_dtoa_r+0xad6>
 80082bc:	2a00      	cmp	r2, #0
 80082be:	ddec      	ble.n	800829a <_dtoa_r+0xa72>
 80082c0:	4659      	mov	r1, fp
 80082c2:	2201      	movs	r2, #1
 80082c4:	4620      	mov	r0, r4
 80082c6:	9301      	str	r3, [sp, #4]
 80082c8:	f000 fcd8 	bl	8008c7c <__lshift>
 80082cc:	4631      	mov	r1, r6
 80082ce:	4683      	mov	fp, r0
 80082d0:	f000 fd40 	bl	8008d54 <__mcmp>
 80082d4:	2800      	cmp	r0, #0
 80082d6:	9b01      	ldr	r3, [sp, #4]
 80082d8:	dc02      	bgt.n	80082e0 <_dtoa_r+0xab8>
 80082da:	d1de      	bne.n	800829a <_dtoa_r+0xa72>
 80082dc:	07da      	lsls	r2, r3, #31
 80082de:	d5dc      	bpl.n	800829a <_dtoa_r+0xa72>
 80082e0:	2b39      	cmp	r3, #57	; 0x39
 80082e2:	d1d8      	bne.n	8008296 <_dtoa_r+0xa6e>
 80082e4:	9a02      	ldr	r2, [sp, #8]
 80082e6:	2339      	movs	r3, #57	; 0x39
 80082e8:	7013      	strb	r3, [r2, #0]
 80082ea:	462b      	mov	r3, r5
 80082ec:	461d      	mov	r5, r3
 80082ee:	3b01      	subs	r3, #1
 80082f0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80082f4:	2a39      	cmp	r2, #57	; 0x39
 80082f6:	d050      	beq.n	800839a <_dtoa_r+0xb72>
 80082f8:	3201      	adds	r2, #1
 80082fa:	701a      	strb	r2, [r3, #0]
 80082fc:	e745      	b.n	800818a <_dtoa_r+0x962>
 80082fe:	2a00      	cmp	r2, #0
 8008300:	dd03      	ble.n	800830a <_dtoa_r+0xae2>
 8008302:	2b39      	cmp	r3, #57	; 0x39
 8008304:	d0ee      	beq.n	80082e4 <_dtoa_r+0xabc>
 8008306:	3301      	adds	r3, #1
 8008308:	e7c7      	b.n	800829a <_dtoa_r+0xa72>
 800830a:	9a01      	ldr	r2, [sp, #4]
 800830c:	9907      	ldr	r1, [sp, #28]
 800830e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008312:	428a      	cmp	r2, r1
 8008314:	d02a      	beq.n	800836c <_dtoa_r+0xb44>
 8008316:	4659      	mov	r1, fp
 8008318:	2300      	movs	r3, #0
 800831a:	220a      	movs	r2, #10
 800831c:	4620      	mov	r0, r4
 800831e:	f000 fafd 	bl	800891c <__multadd>
 8008322:	45b8      	cmp	r8, r7
 8008324:	4683      	mov	fp, r0
 8008326:	f04f 0300 	mov.w	r3, #0
 800832a:	f04f 020a 	mov.w	r2, #10
 800832e:	4641      	mov	r1, r8
 8008330:	4620      	mov	r0, r4
 8008332:	d107      	bne.n	8008344 <_dtoa_r+0xb1c>
 8008334:	f000 faf2 	bl	800891c <__multadd>
 8008338:	4680      	mov	r8, r0
 800833a:	4607      	mov	r7, r0
 800833c:	9b01      	ldr	r3, [sp, #4]
 800833e:	3301      	adds	r3, #1
 8008340:	9301      	str	r3, [sp, #4]
 8008342:	e775      	b.n	8008230 <_dtoa_r+0xa08>
 8008344:	f000 faea 	bl	800891c <__multadd>
 8008348:	4639      	mov	r1, r7
 800834a:	4680      	mov	r8, r0
 800834c:	2300      	movs	r3, #0
 800834e:	220a      	movs	r2, #10
 8008350:	4620      	mov	r0, r4
 8008352:	f000 fae3 	bl	800891c <__multadd>
 8008356:	4607      	mov	r7, r0
 8008358:	e7f0      	b.n	800833c <_dtoa_r+0xb14>
 800835a:	f1b9 0f00 	cmp.w	r9, #0
 800835e:	9a00      	ldr	r2, [sp, #0]
 8008360:	bfcc      	ite	gt
 8008362:	464d      	movgt	r5, r9
 8008364:	2501      	movle	r5, #1
 8008366:	4415      	add	r5, r2
 8008368:	f04f 0800 	mov.w	r8, #0
 800836c:	4659      	mov	r1, fp
 800836e:	2201      	movs	r2, #1
 8008370:	4620      	mov	r0, r4
 8008372:	9301      	str	r3, [sp, #4]
 8008374:	f000 fc82 	bl	8008c7c <__lshift>
 8008378:	4631      	mov	r1, r6
 800837a:	4683      	mov	fp, r0
 800837c:	f000 fcea 	bl	8008d54 <__mcmp>
 8008380:	2800      	cmp	r0, #0
 8008382:	dcb2      	bgt.n	80082ea <_dtoa_r+0xac2>
 8008384:	d102      	bne.n	800838c <_dtoa_r+0xb64>
 8008386:	9b01      	ldr	r3, [sp, #4]
 8008388:	07db      	lsls	r3, r3, #31
 800838a:	d4ae      	bmi.n	80082ea <_dtoa_r+0xac2>
 800838c:	462b      	mov	r3, r5
 800838e:	461d      	mov	r5, r3
 8008390:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008394:	2a30      	cmp	r2, #48	; 0x30
 8008396:	d0fa      	beq.n	800838e <_dtoa_r+0xb66>
 8008398:	e6f7      	b.n	800818a <_dtoa_r+0x962>
 800839a:	9a00      	ldr	r2, [sp, #0]
 800839c:	429a      	cmp	r2, r3
 800839e:	d1a5      	bne.n	80082ec <_dtoa_r+0xac4>
 80083a0:	f10a 0a01 	add.w	sl, sl, #1
 80083a4:	2331      	movs	r3, #49	; 0x31
 80083a6:	e779      	b.n	800829c <_dtoa_r+0xa74>
 80083a8:	4b13      	ldr	r3, [pc, #76]	; (80083f8 <_dtoa_r+0xbd0>)
 80083aa:	f7ff baaf 	b.w	800790c <_dtoa_r+0xe4>
 80083ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f47f aa86 	bne.w	80078c2 <_dtoa_r+0x9a>
 80083b6:	4b11      	ldr	r3, [pc, #68]	; (80083fc <_dtoa_r+0xbd4>)
 80083b8:	f7ff baa8 	b.w	800790c <_dtoa_r+0xe4>
 80083bc:	f1b9 0f00 	cmp.w	r9, #0
 80083c0:	dc03      	bgt.n	80083ca <_dtoa_r+0xba2>
 80083c2:	9b05      	ldr	r3, [sp, #20]
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	f73f aec9 	bgt.w	800815c <_dtoa_r+0x934>
 80083ca:	9d00      	ldr	r5, [sp, #0]
 80083cc:	4631      	mov	r1, r6
 80083ce:	4658      	mov	r0, fp
 80083d0:	f7ff f99c 	bl	800770c <quorem>
 80083d4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80083d8:	f805 3b01 	strb.w	r3, [r5], #1
 80083dc:	9a00      	ldr	r2, [sp, #0]
 80083de:	1aaa      	subs	r2, r5, r2
 80083e0:	4591      	cmp	r9, r2
 80083e2:	ddba      	ble.n	800835a <_dtoa_r+0xb32>
 80083e4:	4659      	mov	r1, fp
 80083e6:	2300      	movs	r3, #0
 80083e8:	220a      	movs	r2, #10
 80083ea:	4620      	mov	r0, r4
 80083ec:	f000 fa96 	bl	800891c <__multadd>
 80083f0:	4683      	mov	fp, r0
 80083f2:	e7eb      	b.n	80083cc <_dtoa_r+0xba4>
 80083f4:	080097df 	.word	0x080097df
 80083f8:	08009738 	.word	0x08009738
 80083fc:	0800975c 	.word	0x0800975c

08008400 <__sflush_r>:
 8008400:	898a      	ldrh	r2, [r1, #12]
 8008402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008406:	4605      	mov	r5, r0
 8008408:	0710      	lsls	r0, r2, #28
 800840a:	460c      	mov	r4, r1
 800840c:	d458      	bmi.n	80084c0 <__sflush_r+0xc0>
 800840e:	684b      	ldr	r3, [r1, #4]
 8008410:	2b00      	cmp	r3, #0
 8008412:	dc05      	bgt.n	8008420 <__sflush_r+0x20>
 8008414:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008416:	2b00      	cmp	r3, #0
 8008418:	dc02      	bgt.n	8008420 <__sflush_r+0x20>
 800841a:	2000      	movs	r0, #0
 800841c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008420:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008422:	2e00      	cmp	r6, #0
 8008424:	d0f9      	beq.n	800841a <__sflush_r+0x1a>
 8008426:	2300      	movs	r3, #0
 8008428:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800842c:	682f      	ldr	r7, [r5, #0]
 800842e:	602b      	str	r3, [r5, #0]
 8008430:	d032      	beq.n	8008498 <__sflush_r+0x98>
 8008432:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008434:	89a3      	ldrh	r3, [r4, #12]
 8008436:	075a      	lsls	r2, r3, #29
 8008438:	d505      	bpl.n	8008446 <__sflush_r+0x46>
 800843a:	6863      	ldr	r3, [r4, #4]
 800843c:	1ac0      	subs	r0, r0, r3
 800843e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008440:	b10b      	cbz	r3, 8008446 <__sflush_r+0x46>
 8008442:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008444:	1ac0      	subs	r0, r0, r3
 8008446:	2300      	movs	r3, #0
 8008448:	4602      	mov	r2, r0
 800844a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800844c:	6a21      	ldr	r1, [r4, #32]
 800844e:	4628      	mov	r0, r5
 8008450:	47b0      	blx	r6
 8008452:	1c43      	adds	r3, r0, #1
 8008454:	89a3      	ldrh	r3, [r4, #12]
 8008456:	d106      	bne.n	8008466 <__sflush_r+0x66>
 8008458:	6829      	ldr	r1, [r5, #0]
 800845a:	291d      	cmp	r1, #29
 800845c:	d82c      	bhi.n	80084b8 <__sflush_r+0xb8>
 800845e:	4a2a      	ldr	r2, [pc, #168]	; (8008508 <__sflush_r+0x108>)
 8008460:	40ca      	lsrs	r2, r1
 8008462:	07d6      	lsls	r6, r2, #31
 8008464:	d528      	bpl.n	80084b8 <__sflush_r+0xb8>
 8008466:	2200      	movs	r2, #0
 8008468:	6062      	str	r2, [r4, #4]
 800846a:	04d9      	lsls	r1, r3, #19
 800846c:	6922      	ldr	r2, [r4, #16]
 800846e:	6022      	str	r2, [r4, #0]
 8008470:	d504      	bpl.n	800847c <__sflush_r+0x7c>
 8008472:	1c42      	adds	r2, r0, #1
 8008474:	d101      	bne.n	800847a <__sflush_r+0x7a>
 8008476:	682b      	ldr	r3, [r5, #0]
 8008478:	b903      	cbnz	r3, 800847c <__sflush_r+0x7c>
 800847a:	6560      	str	r0, [r4, #84]	; 0x54
 800847c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800847e:	602f      	str	r7, [r5, #0]
 8008480:	2900      	cmp	r1, #0
 8008482:	d0ca      	beq.n	800841a <__sflush_r+0x1a>
 8008484:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008488:	4299      	cmp	r1, r3
 800848a:	d002      	beq.n	8008492 <__sflush_r+0x92>
 800848c:	4628      	mov	r0, r5
 800848e:	f000 fd71 	bl	8008f74 <_free_r>
 8008492:	2000      	movs	r0, #0
 8008494:	6360      	str	r0, [r4, #52]	; 0x34
 8008496:	e7c1      	b.n	800841c <__sflush_r+0x1c>
 8008498:	6a21      	ldr	r1, [r4, #32]
 800849a:	2301      	movs	r3, #1
 800849c:	4628      	mov	r0, r5
 800849e:	47b0      	blx	r6
 80084a0:	1c41      	adds	r1, r0, #1
 80084a2:	d1c7      	bne.n	8008434 <__sflush_r+0x34>
 80084a4:	682b      	ldr	r3, [r5, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d0c4      	beq.n	8008434 <__sflush_r+0x34>
 80084aa:	2b1d      	cmp	r3, #29
 80084ac:	d001      	beq.n	80084b2 <__sflush_r+0xb2>
 80084ae:	2b16      	cmp	r3, #22
 80084b0:	d101      	bne.n	80084b6 <__sflush_r+0xb6>
 80084b2:	602f      	str	r7, [r5, #0]
 80084b4:	e7b1      	b.n	800841a <__sflush_r+0x1a>
 80084b6:	89a3      	ldrh	r3, [r4, #12]
 80084b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084bc:	81a3      	strh	r3, [r4, #12]
 80084be:	e7ad      	b.n	800841c <__sflush_r+0x1c>
 80084c0:	690f      	ldr	r7, [r1, #16]
 80084c2:	2f00      	cmp	r7, #0
 80084c4:	d0a9      	beq.n	800841a <__sflush_r+0x1a>
 80084c6:	0793      	lsls	r3, r2, #30
 80084c8:	680e      	ldr	r6, [r1, #0]
 80084ca:	bf08      	it	eq
 80084cc:	694b      	ldreq	r3, [r1, #20]
 80084ce:	600f      	str	r7, [r1, #0]
 80084d0:	bf18      	it	ne
 80084d2:	2300      	movne	r3, #0
 80084d4:	eba6 0807 	sub.w	r8, r6, r7
 80084d8:	608b      	str	r3, [r1, #8]
 80084da:	f1b8 0f00 	cmp.w	r8, #0
 80084de:	dd9c      	ble.n	800841a <__sflush_r+0x1a>
 80084e0:	6a21      	ldr	r1, [r4, #32]
 80084e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80084e4:	4643      	mov	r3, r8
 80084e6:	463a      	mov	r2, r7
 80084e8:	4628      	mov	r0, r5
 80084ea:	47b0      	blx	r6
 80084ec:	2800      	cmp	r0, #0
 80084ee:	dc06      	bgt.n	80084fe <__sflush_r+0xfe>
 80084f0:	89a3      	ldrh	r3, [r4, #12]
 80084f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084f6:	81a3      	strh	r3, [r4, #12]
 80084f8:	f04f 30ff 	mov.w	r0, #4294967295
 80084fc:	e78e      	b.n	800841c <__sflush_r+0x1c>
 80084fe:	4407      	add	r7, r0
 8008500:	eba8 0800 	sub.w	r8, r8, r0
 8008504:	e7e9      	b.n	80084da <__sflush_r+0xda>
 8008506:	bf00      	nop
 8008508:	20400001 	.word	0x20400001

0800850c <_fflush_r>:
 800850c:	b538      	push	{r3, r4, r5, lr}
 800850e:	690b      	ldr	r3, [r1, #16]
 8008510:	4605      	mov	r5, r0
 8008512:	460c      	mov	r4, r1
 8008514:	b913      	cbnz	r3, 800851c <_fflush_r+0x10>
 8008516:	2500      	movs	r5, #0
 8008518:	4628      	mov	r0, r5
 800851a:	bd38      	pop	{r3, r4, r5, pc}
 800851c:	b118      	cbz	r0, 8008526 <_fflush_r+0x1a>
 800851e:	6983      	ldr	r3, [r0, #24]
 8008520:	b90b      	cbnz	r3, 8008526 <_fflush_r+0x1a>
 8008522:	f000 f887 	bl	8008634 <__sinit>
 8008526:	4b14      	ldr	r3, [pc, #80]	; (8008578 <_fflush_r+0x6c>)
 8008528:	429c      	cmp	r4, r3
 800852a:	d11b      	bne.n	8008564 <_fflush_r+0x58>
 800852c:	686c      	ldr	r4, [r5, #4]
 800852e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d0ef      	beq.n	8008516 <_fflush_r+0xa>
 8008536:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008538:	07d0      	lsls	r0, r2, #31
 800853a:	d404      	bmi.n	8008546 <_fflush_r+0x3a>
 800853c:	0599      	lsls	r1, r3, #22
 800853e:	d402      	bmi.n	8008546 <_fflush_r+0x3a>
 8008540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008542:	f000 f91a 	bl	800877a <__retarget_lock_acquire_recursive>
 8008546:	4628      	mov	r0, r5
 8008548:	4621      	mov	r1, r4
 800854a:	f7ff ff59 	bl	8008400 <__sflush_r>
 800854e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008550:	07da      	lsls	r2, r3, #31
 8008552:	4605      	mov	r5, r0
 8008554:	d4e0      	bmi.n	8008518 <_fflush_r+0xc>
 8008556:	89a3      	ldrh	r3, [r4, #12]
 8008558:	059b      	lsls	r3, r3, #22
 800855a:	d4dd      	bmi.n	8008518 <_fflush_r+0xc>
 800855c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800855e:	f000 f90d 	bl	800877c <__retarget_lock_release_recursive>
 8008562:	e7d9      	b.n	8008518 <_fflush_r+0xc>
 8008564:	4b05      	ldr	r3, [pc, #20]	; (800857c <_fflush_r+0x70>)
 8008566:	429c      	cmp	r4, r3
 8008568:	d101      	bne.n	800856e <_fflush_r+0x62>
 800856a:	68ac      	ldr	r4, [r5, #8]
 800856c:	e7df      	b.n	800852e <_fflush_r+0x22>
 800856e:	4b04      	ldr	r3, [pc, #16]	; (8008580 <_fflush_r+0x74>)
 8008570:	429c      	cmp	r4, r3
 8008572:	bf08      	it	eq
 8008574:	68ec      	ldreq	r4, [r5, #12]
 8008576:	e7da      	b.n	800852e <_fflush_r+0x22>
 8008578:	08009810 	.word	0x08009810
 800857c:	08009830 	.word	0x08009830
 8008580:	080097f0 	.word	0x080097f0

08008584 <std>:
 8008584:	2300      	movs	r3, #0
 8008586:	b510      	push	{r4, lr}
 8008588:	4604      	mov	r4, r0
 800858a:	e9c0 3300 	strd	r3, r3, [r0]
 800858e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008592:	6083      	str	r3, [r0, #8]
 8008594:	8181      	strh	r1, [r0, #12]
 8008596:	6643      	str	r3, [r0, #100]	; 0x64
 8008598:	81c2      	strh	r2, [r0, #14]
 800859a:	6183      	str	r3, [r0, #24]
 800859c:	4619      	mov	r1, r3
 800859e:	2208      	movs	r2, #8
 80085a0:	305c      	adds	r0, #92	; 0x5c
 80085a2:	f7fe faf3 	bl	8006b8c <memset>
 80085a6:	4b05      	ldr	r3, [pc, #20]	; (80085bc <std+0x38>)
 80085a8:	6263      	str	r3, [r4, #36]	; 0x24
 80085aa:	4b05      	ldr	r3, [pc, #20]	; (80085c0 <std+0x3c>)
 80085ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80085ae:	4b05      	ldr	r3, [pc, #20]	; (80085c4 <std+0x40>)
 80085b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80085b2:	4b05      	ldr	r3, [pc, #20]	; (80085c8 <std+0x44>)
 80085b4:	6224      	str	r4, [r4, #32]
 80085b6:	6323      	str	r3, [r4, #48]	; 0x30
 80085b8:	bd10      	pop	{r4, pc}
 80085ba:	bf00      	nop
 80085bc:	0800939d 	.word	0x0800939d
 80085c0:	080093bf 	.word	0x080093bf
 80085c4:	080093f7 	.word	0x080093f7
 80085c8:	0800941b 	.word	0x0800941b

080085cc <_cleanup_r>:
 80085cc:	4901      	ldr	r1, [pc, #4]	; (80085d4 <_cleanup_r+0x8>)
 80085ce:	f000 b8af 	b.w	8008730 <_fwalk_reent>
 80085d2:	bf00      	nop
 80085d4:	0800850d 	.word	0x0800850d

080085d8 <__sfmoreglue>:
 80085d8:	b570      	push	{r4, r5, r6, lr}
 80085da:	1e4a      	subs	r2, r1, #1
 80085dc:	2568      	movs	r5, #104	; 0x68
 80085de:	4355      	muls	r5, r2
 80085e0:	460e      	mov	r6, r1
 80085e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085e6:	f000 fd15 	bl	8009014 <_malloc_r>
 80085ea:	4604      	mov	r4, r0
 80085ec:	b140      	cbz	r0, 8008600 <__sfmoreglue+0x28>
 80085ee:	2100      	movs	r1, #0
 80085f0:	e9c0 1600 	strd	r1, r6, [r0]
 80085f4:	300c      	adds	r0, #12
 80085f6:	60a0      	str	r0, [r4, #8]
 80085f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80085fc:	f7fe fac6 	bl	8006b8c <memset>
 8008600:	4620      	mov	r0, r4
 8008602:	bd70      	pop	{r4, r5, r6, pc}

08008604 <__sfp_lock_acquire>:
 8008604:	4801      	ldr	r0, [pc, #4]	; (800860c <__sfp_lock_acquire+0x8>)
 8008606:	f000 b8b8 	b.w	800877a <__retarget_lock_acquire_recursive>
 800860a:	bf00      	nop
 800860c:	200042f0 	.word	0x200042f0

08008610 <__sfp_lock_release>:
 8008610:	4801      	ldr	r0, [pc, #4]	; (8008618 <__sfp_lock_release+0x8>)
 8008612:	f000 b8b3 	b.w	800877c <__retarget_lock_release_recursive>
 8008616:	bf00      	nop
 8008618:	200042f0 	.word	0x200042f0

0800861c <__sinit_lock_acquire>:
 800861c:	4801      	ldr	r0, [pc, #4]	; (8008624 <__sinit_lock_acquire+0x8>)
 800861e:	f000 b8ac 	b.w	800877a <__retarget_lock_acquire_recursive>
 8008622:	bf00      	nop
 8008624:	200042eb 	.word	0x200042eb

08008628 <__sinit_lock_release>:
 8008628:	4801      	ldr	r0, [pc, #4]	; (8008630 <__sinit_lock_release+0x8>)
 800862a:	f000 b8a7 	b.w	800877c <__retarget_lock_release_recursive>
 800862e:	bf00      	nop
 8008630:	200042eb 	.word	0x200042eb

08008634 <__sinit>:
 8008634:	b510      	push	{r4, lr}
 8008636:	4604      	mov	r4, r0
 8008638:	f7ff fff0 	bl	800861c <__sinit_lock_acquire>
 800863c:	69a3      	ldr	r3, [r4, #24]
 800863e:	b11b      	cbz	r3, 8008648 <__sinit+0x14>
 8008640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008644:	f7ff bff0 	b.w	8008628 <__sinit_lock_release>
 8008648:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800864c:	6523      	str	r3, [r4, #80]	; 0x50
 800864e:	4b13      	ldr	r3, [pc, #76]	; (800869c <__sinit+0x68>)
 8008650:	4a13      	ldr	r2, [pc, #76]	; (80086a0 <__sinit+0x6c>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	62a2      	str	r2, [r4, #40]	; 0x28
 8008656:	42a3      	cmp	r3, r4
 8008658:	bf04      	itt	eq
 800865a:	2301      	moveq	r3, #1
 800865c:	61a3      	streq	r3, [r4, #24]
 800865e:	4620      	mov	r0, r4
 8008660:	f000 f820 	bl	80086a4 <__sfp>
 8008664:	6060      	str	r0, [r4, #4]
 8008666:	4620      	mov	r0, r4
 8008668:	f000 f81c 	bl	80086a4 <__sfp>
 800866c:	60a0      	str	r0, [r4, #8]
 800866e:	4620      	mov	r0, r4
 8008670:	f000 f818 	bl	80086a4 <__sfp>
 8008674:	2200      	movs	r2, #0
 8008676:	60e0      	str	r0, [r4, #12]
 8008678:	2104      	movs	r1, #4
 800867a:	6860      	ldr	r0, [r4, #4]
 800867c:	f7ff ff82 	bl	8008584 <std>
 8008680:	68a0      	ldr	r0, [r4, #8]
 8008682:	2201      	movs	r2, #1
 8008684:	2109      	movs	r1, #9
 8008686:	f7ff ff7d 	bl	8008584 <std>
 800868a:	68e0      	ldr	r0, [r4, #12]
 800868c:	2202      	movs	r2, #2
 800868e:	2112      	movs	r1, #18
 8008690:	f7ff ff78 	bl	8008584 <std>
 8008694:	2301      	movs	r3, #1
 8008696:	61a3      	str	r3, [r4, #24]
 8008698:	e7d2      	b.n	8008640 <__sinit+0xc>
 800869a:	bf00      	nop
 800869c:	08009724 	.word	0x08009724
 80086a0:	080085cd 	.word	0x080085cd

080086a4 <__sfp>:
 80086a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a6:	4607      	mov	r7, r0
 80086a8:	f7ff ffac 	bl	8008604 <__sfp_lock_acquire>
 80086ac:	4b1e      	ldr	r3, [pc, #120]	; (8008728 <__sfp+0x84>)
 80086ae:	681e      	ldr	r6, [r3, #0]
 80086b0:	69b3      	ldr	r3, [r6, #24]
 80086b2:	b913      	cbnz	r3, 80086ba <__sfp+0x16>
 80086b4:	4630      	mov	r0, r6
 80086b6:	f7ff ffbd 	bl	8008634 <__sinit>
 80086ba:	3648      	adds	r6, #72	; 0x48
 80086bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80086c0:	3b01      	subs	r3, #1
 80086c2:	d503      	bpl.n	80086cc <__sfp+0x28>
 80086c4:	6833      	ldr	r3, [r6, #0]
 80086c6:	b30b      	cbz	r3, 800870c <__sfp+0x68>
 80086c8:	6836      	ldr	r6, [r6, #0]
 80086ca:	e7f7      	b.n	80086bc <__sfp+0x18>
 80086cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80086d0:	b9d5      	cbnz	r5, 8008708 <__sfp+0x64>
 80086d2:	4b16      	ldr	r3, [pc, #88]	; (800872c <__sfp+0x88>)
 80086d4:	60e3      	str	r3, [r4, #12]
 80086d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086da:	6665      	str	r5, [r4, #100]	; 0x64
 80086dc:	f000 f84c 	bl	8008778 <__retarget_lock_init_recursive>
 80086e0:	f7ff ff96 	bl	8008610 <__sfp_lock_release>
 80086e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80086e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80086ec:	6025      	str	r5, [r4, #0]
 80086ee:	61a5      	str	r5, [r4, #24]
 80086f0:	2208      	movs	r2, #8
 80086f2:	4629      	mov	r1, r5
 80086f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80086f8:	f7fe fa48 	bl	8006b8c <memset>
 80086fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008700:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008704:	4620      	mov	r0, r4
 8008706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008708:	3468      	adds	r4, #104	; 0x68
 800870a:	e7d9      	b.n	80086c0 <__sfp+0x1c>
 800870c:	2104      	movs	r1, #4
 800870e:	4638      	mov	r0, r7
 8008710:	f7ff ff62 	bl	80085d8 <__sfmoreglue>
 8008714:	4604      	mov	r4, r0
 8008716:	6030      	str	r0, [r6, #0]
 8008718:	2800      	cmp	r0, #0
 800871a:	d1d5      	bne.n	80086c8 <__sfp+0x24>
 800871c:	f7ff ff78 	bl	8008610 <__sfp_lock_release>
 8008720:	230c      	movs	r3, #12
 8008722:	603b      	str	r3, [r7, #0]
 8008724:	e7ee      	b.n	8008704 <__sfp+0x60>
 8008726:	bf00      	nop
 8008728:	08009724 	.word	0x08009724
 800872c:	ffff0001 	.word	0xffff0001

08008730 <_fwalk_reent>:
 8008730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008734:	4606      	mov	r6, r0
 8008736:	4688      	mov	r8, r1
 8008738:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800873c:	2700      	movs	r7, #0
 800873e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008742:	f1b9 0901 	subs.w	r9, r9, #1
 8008746:	d505      	bpl.n	8008754 <_fwalk_reent+0x24>
 8008748:	6824      	ldr	r4, [r4, #0]
 800874a:	2c00      	cmp	r4, #0
 800874c:	d1f7      	bne.n	800873e <_fwalk_reent+0xe>
 800874e:	4638      	mov	r0, r7
 8008750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008754:	89ab      	ldrh	r3, [r5, #12]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d907      	bls.n	800876a <_fwalk_reent+0x3a>
 800875a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800875e:	3301      	adds	r3, #1
 8008760:	d003      	beq.n	800876a <_fwalk_reent+0x3a>
 8008762:	4629      	mov	r1, r5
 8008764:	4630      	mov	r0, r6
 8008766:	47c0      	blx	r8
 8008768:	4307      	orrs	r7, r0
 800876a:	3568      	adds	r5, #104	; 0x68
 800876c:	e7e9      	b.n	8008742 <_fwalk_reent+0x12>
	...

08008770 <_localeconv_r>:
 8008770:	4800      	ldr	r0, [pc, #0]	; (8008774 <_localeconv_r+0x4>)
 8008772:	4770      	bx	lr
 8008774:	20000164 	.word	0x20000164

08008778 <__retarget_lock_init_recursive>:
 8008778:	4770      	bx	lr

0800877a <__retarget_lock_acquire_recursive>:
 800877a:	4770      	bx	lr

0800877c <__retarget_lock_release_recursive>:
 800877c:	4770      	bx	lr

0800877e <__swhatbuf_r>:
 800877e:	b570      	push	{r4, r5, r6, lr}
 8008780:	460e      	mov	r6, r1
 8008782:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008786:	2900      	cmp	r1, #0
 8008788:	b096      	sub	sp, #88	; 0x58
 800878a:	4614      	mov	r4, r2
 800878c:	461d      	mov	r5, r3
 800878e:	da07      	bge.n	80087a0 <__swhatbuf_r+0x22>
 8008790:	2300      	movs	r3, #0
 8008792:	602b      	str	r3, [r5, #0]
 8008794:	89b3      	ldrh	r3, [r6, #12]
 8008796:	061a      	lsls	r2, r3, #24
 8008798:	d410      	bmi.n	80087bc <__swhatbuf_r+0x3e>
 800879a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800879e:	e00e      	b.n	80087be <__swhatbuf_r+0x40>
 80087a0:	466a      	mov	r2, sp
 80087a2:	f000 fe91 	bl	80094c8 <_fstat_r>
 80087a6:	2800      	cmp	r0, #0
 80087a8:	dbf2      	blt.n	8008790 <__swhatbuf_r+0x12>
 80087aa:	9a01      	ldr	r2, [sp, #4]
 80087ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80087b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80087b4:	425a      	negs	r2, r3
 80087b6:	415a      	adcs	r2, r3
 80087b8:	602a      	str	r2, [r5, #0]
 80087ba:	e7ee      	b.n	800879a <__swhatbuf_r+0x1c>
 80087bc:	2340      	movs	r3, #64	; 0x40
 80087be:	2000      	movs	r0, #0
 80087c0:	6023      	str	r3, [r4, #0]
 80087c2:	b016      	add	sp, #88	; 0x58
 80087c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080087c8 <__smakebuf_r>:
 80087c8:	898b      	ldrh	r3, [r1, #12]
 80087ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087cc:	079d      	lsls	r5, r3, #30
 80087ce:	4606      	mov	r6, r0
 80087d0:	460c      	mov	r4, r1
 80087d2:	d507      	bpl.n	80087e4 <__smakebuf_r+0x1c>
 80087d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087d8:	6023      	str	r3, [r4, #0]
 80087da:	6123      	str	r3, [r4, #16]
 80087dc:	2301      	movs	r3, #1
 80087de:	6163      	str	r3, [r4, #20]
 80087e0:	b002      	add	sp, #8
 80087e2:	bd70      	pop	{r4, r5, r6, pc}
 80087e4:	ab01      	add	r3, sp, #4
 80087e6:	466a      	mov	r2, sp
 80087e8:	f7ff ffc9 	bl	800877e <__swhatbuf_r>
 80087ec:	9900      	ldr	r1, [sp, #0]
 80087ee:	4605      	mov	r5, r0
 80087f0:	4630      	mov	r0, r6
 80087f2:	f000 fc0f 	bl	8009014 <_malloc_r>
 80087f6:	b948      	cbnz	r0, 800880c <__smakebuf_r+0x44>
 80087f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087fc:	059a      	lsls	r2, r3, #22
 80087fe:	d4ef      	bmi.n	80087e0 <__smakebuf_r+0x18>
 8008800:	f023 0303 	bic.w	r3, r3, #3
 8008804:	f043 0302 	orr.w	r3, r3, #2
 8008808:	81a3      	strh	r3, [r4, #12]
 800880a:	e7e3      	b.n	80087d4 <__smakebuf_r+0xc>
 800880c:	4b0d      	ldr	r3, [pc, #52]	; (8008844 <__smakebuf_r+0x7c>)
 800880e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	6020      	str	r0, [r4, #0]
 8008814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008818:	81a3      	strh	r3, [r4, #12]
 800881a:	9b00      	ldr	r3, [sp, #0]
 800881c:	6163      	str	r3, [r4, #20]
 800881e:	9b01      	ldr	r3, [sp, #4]
 8008820:	6120      	str	r0, [r4, #16]
 8008822:	b15b      	cbz	r3, 800883c <__smakebuf_r+0x74>
 8008824:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008828:	4630      	mov	r0, r6
 800882a:	f000 fe5f 	bl	80094ec <_isatty_r>
 800882e:	b128      	cbz	r0, 800883c <__smakebuf_r+0x74>
 8008830:	89a3      	ldrh	r3, [r4, #12]
 8008832:	f023 0303 	bic.w	r3, r3, #3
 8008836:	f043 0301 	orr.w	r3, r3, #1
 800883a:	81a3      	strh	r3, [r4, #12]
 800883c:	89a0      	ldrh	r0, [r4, #12]
 800883e:	4305      	orrs	r5, r0
 8008840:	81a5      	strh	r5, [r4, #12]
 8008842:	e7cd      	b.n	80087e0 <__smakebuf_r+0x18>
 8008844:	080085cd 	.word	0x080085cd

08008848 <malloc>:
 8008848:	4b02      	ldr	r3, [pc, #8]	; (8008854 <malloc+0xc>)
 800884a:	4601      	mov	r1, r0
 800884c:	6818      	ldr	r0, [r3, #0]
 800884e:	f000 bbe1 	b.w	8009014 <_malloc_r>
 8008852:	bf00      	nop
 8008854:	20000010 	.word	0x20000010

08008858 <_Balloc>:
 8008858:	b570      	push	{r4, r5, r6, lr}
 800885a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800885c:	4604      	mov	r4, r0
 800885e:	460d      	mov	r5, r1
 8008860:	b976      	cbnz	r6, 8008880 <_Balloc+0x28>
 8008862:	2010      	movs	r0, #16
 8008864:	f7ff fff0 	bl	8008848 <malloc>
 8008868:	4602      	mov	r2, r0
 800886a:	6260      	str	r0, [r4, #36]	; 0x24
 800886c:	b920      	cbnz	r0, 8008878 <_Balloc+0x20>
 800886e:	4b18      	ldr	r3, [pc, #96]	; (80088d0 <_Balloc+0x78>)
 8008870:	4818      	ldr	r0, [pc, #96]	; (80088d4 <_Balloc+0x7c>)
 8008872:	2166      	movs	r1, #102	; 0x66
 8008874:	f000 fde8 	bl	8009448 <__assert_func>
 8008878:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800887c:	6006      	str	r6, [r0, #0]
 800887e:	60c6      	str	r6, [r0, #12]
 8008880:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008882:	68f3      	ldr	r3, [r6, #12]
 8008884:	b183      	cbz	r3, 80088a8 <_Balloc+0x50>
 8008886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800888e:	b9b8      	cbnz	r0, 80088c0 <_Balloc+0x68>
 8008890:	2101      	movs	r1, #1
 8008892:	fa01 f605 	lsl.w	r6, r1, r5
 8008896:	1d72      	adds	r2, r6, #5
 8008898:	0092      	lsls	r2, r2, #2
 800889a:	4620      	mov	r0, r4
 800889c:	f000 fb5a 	bl	8008f54 <_calloc_r>
 80088a0:	b160      	cbz	r0, 80088bc <_Balloc+0x64>
 80088a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088a6:	e00e      	b.n	80088c6 <_Balloc+0x6e>
 80088a8:	2221      	movs	r2, #33	; 0x21
 80088aa:	2104      	movs	r1, #4
 80088ac:	4620      	mov	r0, r4
 80088ae:	f000 fb51 	bl	8008f54 <_calloc_r>
 80088b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088b4:	60f0      	str	r0, [r6, #12]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d1e4      	bne.n	8008886 <_Balloc+0x2e>
 80088bc:	2000      	movs	r0, #0
 80088be:	bd70      	pop	{r4, r5, r6, pc}
 80088c0:	6802      	ldr	r2, [r0, #0]
 80088c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088c6:	2300      	movs	r3, #0
 80088c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088cc:	e7f7      	b.n	80088be <_Balloc+0x66>
 80088ce:	bf00      	nop
 80088d0:	08009769 	.word	0x08009769
 80088d4:	08009850 	.word	0x08009850

080088d8 <_Bfree>:
 80088d8:	b570      	push	{r4, r5, r6, lr}
 80088da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80088dc:	4605      	mov	r5, r0
 80088de:	460c      	mov	r4, r1
 80088e0:	b976      	cbnz	r6, 8008900 <_Bfree+0x28>
 80088e2:	2010      	movs	r0, #16
 80088e4:	f7ff ffb0 	bl	8008848 <malloc>
 80088e8:	4602      	mov	r2, r0
 80088ea:	6268      	str	r0, [r5, #36]	; 0x24
 80088ec:	b920      	cbnz	r0, 80088f8 <_Bfree+0x20>
 80088ee:	4b09      	ldr	r3, [pc, #36]	; (8008914 <_Bfree+0x3c>)
 80088f0:	4809      	ldr	r0, [pc, #36]	; (8008918 <_Bfree+0x40>)
 80088f2:	218a      	movs	r1, #138	; 0x8a
 80088f4:	f000 fda8 	bl	8009448 <__assert_func>
 80088f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088fc:	6006      	str	r6, [r0, #0]
 80088fe:	60c6      	str	r6, [r0, #12]
 8008900:	b13c      	cbz	r4, 8008912 <_Bfree+0x3a>
 8008902:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008904:	6862      	ldr	r2, [r4, #4]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800890c:	6021      	str	r1, [r4, #0]
 800890e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008912:	bd70      	pop	{r4, r5, r6, pc}
 8008914:	08009769 	.word	0x08009769
 8008918:	08009850 	.word	0x08009850

0800891c <__multadd>:
 800891c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008920:	690e      	ldr	r6, [r1, #16]
 8008922:	4607      	mov	r7, r0
 8008924:	4698      	mov	r8, r3
 8008926:	460c      	mov	r4, r1
 8008928:	f101 0014 	add.w	r0, r1, #20
 800892c:	2300      	movs	r3, #0
 800892e:	6805      	ldr	r5, [r0, #0]
 8008930:	b2a9      	uxth	r1, r5
 8008932:	fb02 8101 	mla	r1, r2, r1, r8
 8008936:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800893a:	0c2d      	lsrs	r5, r5, #16
 800893c:	fb02 c505 	mla	r5, r2, r5, ip
 8008940:	b289      	uxth	r1, r1
 8008942:	3301      	adds	r3, #1
 8008944:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008948:	429e      	cmp	r6, r3
 800894a:	f840 1b04 	str.w	r1, [r0], #4
 800894e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008952:	dcec      	bgt.n	800892e <__multadd+0x12>
 8008954:	f1b8 0f00 	cmp.w	r8, #0
 8008958:	d022      	beq.n	80089a0 <__multadd+0x84>
 800895a:	68a3      	ldr	r3, [r4, #8]
 800895c:	42b3      	cmp	r3, r6
 800895e:	dc19      	bgt.n	8008994 <__multadd+0x78>
 8008960:	6861      	ldr	r1, [r4, #4]
 8008962:	4638      	mov	r0, r7
 8008964:	3101      	adds	r1, #1
 8008966:	f7ff ff77 	bl	8008858 <_Balloc>
 800896a:	4605      	mov	r5, r0
 800896c:	b928      	cbnz	r0, 800897a <__multadd+0x5e>
 800896e:	4602      	mov	r2, r0
 8008970:	4b0d      	ldr	r3, [pc, #52]	; (80089a8 <__multadd+0x8c>)
 8008972:	480e      	ldr	r0, [pc, #56]	; (80089ac <__multadd+0x90>)
 8008974:	21b5      	movs	r1, #181	; 0xb5
 8008976:	f000 fd67 	bl	8009448 <__assert_func>
 800897a:	6922      	ldr	r2, [r4, #16]
 800897c:	3202      	adds	r2, #2
 800897e:	f104 010c 	add.w	r1, r4, #12
 8008982:	0092      	lsls	r2, r2, #2
 8008984:	300c      	adds	r0, #12
 8008986:	f7fe f8f3 	bl	8006b70 <memcpy>
 800898a:	4621      	mov	r1, r4
 800898c:	4638      	mov	r0, r7
 800898e:	f7ff ffa3 	bl	80088d8 <_Bfree>
 8008992:	462c      	mov	r4, r5
 8008994:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008998:	3601      	adds	r6, #1
 800899a:	f8c3 8014 	str.w	r8, [r3, #20]
 800899e:	6126      	str	r6, [r4, #16]
 80089a0:	4620      	mov	r0, r4
 80089a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089a6:	bf00      	nop
 80089a8:	080097df 	.word	0x080097df
 80089ac:	08009850 	.word	0x08009850

080089b0 <__hi0bits>:
 80089b0:	0c03      	lsrs	r3, r0, #16
 80089b2:	041b      	lsls	r3, r3, #16
 80089b4:	b9d3      	cbnz	r3, 80089ec <__hi0bits+0x3c>
 80089b6:	0400      	lsls	r0, r0, #16
 80089b8:	2310      	movs	r3, #16
 80089ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80089be:	bf04      	itt	eq
 80089c0:	0200      	lsleq	r0, r0, #8
 80089c2:	3308      	addeq	r3, #8
 80089c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80089c8:	bf04      	itt	eq
 80089ca:	0100      	lsleq	r0, r0, #4
 80089cc:	3304      	addeq	r3, #4
 80089ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80089d2:	bf04      	itt	eq
 80089d4:	0080      	lsleq	r0, r0, #2
 80089d6:	3302      	addeq	r3, #2
 80089d8:	2800      	cmp	r0, #0
 80089da:	db05      	blt.n	80089e8 <__hi0bits+0x38>
 80089dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80089e0:	f103 0301 	add.w	r3, r3, #1
 80089e4:	bf08      	it	eq
 80089e6:	2320      	moveq	r3, #32
 80089e8:	4618      	mov	r0, r3
 80089ea:	4770      	bx	lr
 80089ec:	2300      	movs	r3, #0
 80089ee:	e7e4      	b.n	80089ba <__hi0bits+0xa>

080089f0 <__lo0bits>:
 80089f0:	6803      	ldr	r3, [r0, #0]
 80089f2:	f013 0207 	ands.w	r2, r3, #7
 80089f6:	4601      	mov	r1, r0
 80089f8:	d00b      	beq.n	8008a12 <__lo0bits+0x22>
 80089fa:	07da      	lsls	r2, r3, #31
 80089fc:	d424      	bmi.n	8008a48 <__lo0bits+0x58>
 80089fe:	0798      	lsls	r0, r3, #30
 8008a00:	bf49      	itett	mi
 8008a02:	085b      	lsrmi	r3, r3, #1
 8008a04:	089b      	lsrpl	r3, r3, #2
 8008a06:	2001      	movmi	r0, #1
 8008a08:	600b      	strmi	r3, [r1, #0]
 8008a0a:	bf5c      	itt	pl
 8008a0c:	600b      	strpl	r3, [r1, #0]
 8008a0e:	2002      	movpl	r0, #2
 8008a10:	4770      	bx	lr
 8008a12:	b298      	uxth	r0, r3
 8008a14:	b9b0      	cbnz	r0, 8008a44 <__lo0bits+0x54>
 8008a16:	0c1b      	lsrs	r3, r3, #16
 8008a18:	2010      	movs	r0, #16
 8008a1a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008a1e:	bf04      	itt	eq
 8008a20:	0a1b      	lsreq	r3, r3, #8
 8008a22:	3008      	addeq	r0, #8
 8008a24:	071a      	lsls	r2, r3, #28
 8008a26:	bf04      	itt	eq
 8008a28:	091b      	lsreq	r3, r3, #4
 8008a2a:	3004      	addeq	r0, #4
 8008a2c:	079a      	lsls	r2, r3, #30
 8008a2e:	bf04      	itt	eq
 8008a30:	089b      	lsreq	r3, r3, #2
 8008a32:	3002      	addeq	r0, #2
 8008a34:	07da      	lsls	r2, r3, #31
 8008a36:	d403      	bmi.n	8008a40 <__lo0bits+0x50>
 8008a38:	085b      	lsrs	r3, r3, #1
 8008a3a:	f100 0001 	add.w	r0, r0, #1
 8008a3e:	d005      	beq.n	8008a4c <__lo0bits+0x5c>
 8008a40:	600b      	str	r3, [r1, #0]
 8008a42:	4770      	bx	lr
 8008a44:	4610      	mov	r0, r2
 8008a46:	e7e8      	b.n	8008a1a <__lo0bits+0x2a>
 8008a48:	2000      	movs	r0, #0
 8008a4a:	4770      	bx	lr
 8008a4c:	2020      	movs	r0, #32
 8008a4e:	4770      	bx	lr

08008a50 <__i2b>:
 8008a50:	b510      	push	{r4, lr}
 8008a52:	460c      	mov	r4, r1
 8008a54:	2101      	movs	r1, #1
 8008a56:	f7ff feff 	bl	8008858 <_Balloc>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	b928      	cbnz	r0, 8008a6a <__i2b+0x1a>
 8008a5e:	4b05      	ldr	r3, [pc, #20]	; (8008a74 <__i2b+0x24>)
 8008a60:	4805      	ldr	r0, [pc, #20]	; (8008a78 <__i2b+0x28>)
 8008a62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008a66:	f000 fcef 	bl	8009448 <__assert_func>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	6144      	str	r4, [r0, #20]
 8008a6e:	6103      	str	r3, [r0, #16]
 8008a70:	bd10      	pop	{r4, pc}
 8008a72:	bf00      	nop
 8008a74:	080097df 	.word	0x080097df
 8008a78:	08009850 	.word	0x08009850

08008a7c <__multiply>:
 8008a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a80:	4614      	mov	r4, r2
 8008a82:	690a      	ldr	r2, [r1, #16]
 8008a84:	6923      	ldr	r3, [r4, #16]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	bfb8      	it	lt
 8008a8a:	460b      	movlt	r3, r1
 8008a8c:	460d      	mov	r5, r1
 8008a8e:	bfbc      	itt	lt
 8008a90:	4625      	movlt	r5, r4
 8008a92:	461c      	movlt	r4, r3
 8008a94:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008a98:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008a9c:	68ab      	ldr	r3, [r5, #8]
 8008a9e:	6869      	ldr	r1, [r5, #4]
 8008aa0:	eb0a 0709 	add.w	r7, sl, r9
 8008aa4:	42bb      	cmp	r3, r7
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	bfb8      	it	lt
 8008aaa:	3101      	addlt	r1, #1
 8008aac:	f7ff fed4 	bl	8008858 <_Balloc>
 8008ab0:	b930      	cbnz	r0, 8008ac0 <__multiply+0x44>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	4b42      	ldr	r3, [pc, #264]	; (8008bc0 <__multiply+0x144>)
 8008ab6:	4843      	ldr	r0, [pc, #268]	; (8008bc4 <__multiply+0x148>)
 8008ab8:	f240 115d 	movw	r1, #349	; 0x15d
 8008abc:	f000 fcc4 	bl	8009448 <__assert_func>
 8008ac0:	f100 0614 	add.w	r6, r0, #20
 8008ac4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008ac8:	4633      	mov	r3, r6
 8008aca:	2200      	movs	r2, #0
 8008acc:	4543      	cmp	r3, r8
 8008ace:	d31e      	bcc.n	8008b0e <__multiply+0x92>
 8008ad0:	f105 0c14 	add.w	ip, r5, #20
 8008ad4:	f104 0314 	add.w	r3, r4, #20
 8008ad8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008adc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008ae0:	9202      	str	r2, [sp, #8]
 8008ae2:	ebac 0205 	sub.w	r2, ip, r5
 8008ae6:	3a15      	subs	r2, #21
 8008ae8:	f022 0203 	bic.w	r2, r2, #3
 8008aec:	3204      	adds	r2, #4
 8008aee:	f105 0115 	add.w	r1, r5, #21
 8008af2:	458c      	cmp	ip, r1
 8008af4:	bf38      	it	cc
 8008af6:	2204      	movcc	r2, #4
 8008af8:	9201      	str	r2, [sp, #4]
 8008afa:	9a02      	ldr	r2, [sp, #8]
 8008afc:	9303      	str	r3, [sp, #12]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d808      	bhi.n	8008b14 <__multiply+0x98>
 8008b02:	2f00      	cmp	r7, #0
 8008b04:	dc55      	bgt.n	8008bb2 <__multiply+0x136>
 8008b06:	6107      	str	r7, [r0, #16]
 8008b08:	b005      	add	sp, #20
 8008b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b0e:	f843 2b04 	str.w	r2, [r3], #4
 8008b12:	e7db      	b.n	8008acc <__multiply+0x50>
 8008b14:	f8b3 a000 	ldrh.w	sl, [r3]
 8008b18:	f1ba 0f00 	cmp.w	sl, #0
 8008b1c:	d020      	beq.n	8008b60 <__multiply+0xe4>
 8008b1e:	f105 0e14 	add.w	lr, r5, #20
 8008b22:	46b1      	mov	r9, r6
 8008b24:	2200      	movs	r2, #0
 8008b26:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008b2a:	f8d9 b000 	ldr.w	fp, [r9]
 8008b2e:	b2a1      	uxth	r1, r4
 8008b30:	fa1f fb8b 	uxth.w	fp, fp
 8008b34:	fb0a b101 	mla	r1, sl, r1, fp
 8008b38:	4411      	add	r1, r2
 8008b3a:	f8d9 2000 	ldr.w	r2, [r9]
 8008b3e:	0c24      	lsrs	r4, r4, #16
 8008b40:	0c12      	lsrs	r2, r2, #16
 8008b42:	fb0a 2404 	mla	r4, sl, r4, r2
 8008b46:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008b4a:	b289      	uxth	r1, r1
 8008b4c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008b50:	45f4      	cmp	ip, lr
 8008b52:	f849 1b04 	str.w	r1, [r9], #4
 8008b56:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008b5a:	d8e4      	bhi.n	8008b26 <__multiply+0xaa>
 8008b5c:	9901      	ldr	r1, [sp, #4]
 8008b5e:	5072      	str	r2, [r6, r1]
 8008b60:	9a03      	ldr	r2, [sp, #12]
 8008b62:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b66:	3304      	adds	r3, #4
 8008b68:	f1b9 0f00 	cmp.w	r9, #0
 8008b6c:	d01f      	beq.n	8008bae <__multiply+0x132>
 8008b6e:	6834      	ldr	r4, [r6, #0]
 8008b70:	f105 0114 	add.w	r1, r5, #20
 8008b74:	46b6      	mov	lr, r6
 8008b76:	f04f 0a00 	mov.w	sl, #0
 8008b7a:	880a      	ldrh	r2, [r1, #0]
 8008b7c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008b80:	fb09 b202 	mla	r2, r9, r2, fp
 8008b84:	4492      	add	sl, r2
 8008b86:	b2a4      	uxth	r4, r4
 8008b88:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008b8c:	f84e 4b04 	str.w	r4, [lr], #4
 8008b90:	f851 4b04 	ldr.w	r4, [r1], #4
 8008b94:	f8be 2000 	ldrh.w	r2, [lr]
 8008b98:	0c24      	lsrs	r4, r4, #16
 8008b9a:	fb09 2404 	mla	r4, r9, r4, r2
 8008b9e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008ba2:	458c      	cmp	ip, r1
 8008ba4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008ba8:	d8e7      	bhi.n	8008b7a <__multiply+0xfe>
 8008baa:	9a01      	ldr	r2, [sp, #4]
 8008bac:	50b4      	str	r4, [r6, r2]
 8008bae:	3604      	adds	r6, #4
 8008bb0:	e7a3      	b.n	8008afa <__multiply+0x7e>
 8008bb2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1a5      	bne.n	8008b06 <__multiply+0x8a>
 8008bba:	3f01      	subs	r7, #1
 8008bbc:	e7a1      	b.n	8008b02 <__multiply+0x86>
 8008bbe:	bf00      	nop
 8008bc0:	080097df 	.word	0x080097df
 8008bc4:	08009850 	.word	0x08009850

08008bc8 <__pow5mult>:
 8008bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bcc:	4615      	mov	r5, r2
 8008bce:	f012 0203 	ands.w	r2, r2, #3
 8008bd2:	4606      	mov	r6, r0
 8008bd4:	460f      	mov	r7, r1
 8008bd6:	d007      	beq.n	8008be8 <__pow5mult+0x20>
 8008bd8:	4c25      	ldr	r4, [pc, #148]	; (8008c70 <__pow5mult+0xa8>)
 8008bda:	3a01      	subs	r2, #1
 8008bdc:	2300      	movs	r3, #0
 8008bde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008be2:	f7ff fe9b 	bl	800891c <__multadd>
 8008be6:	4607      	mov	r7, r0
 8008be8:	10ad      	asrs	r5, r5, #2
 8008bea:	d03d      	beq.n	8008c68 <__pow5mult+0xa0>
 8008bec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008bee:	b97c      	cbnz	r4, 8008c10 <__pow5mult+0x48>
 8008bf0:	2010      	movs	r0, #16
 8008bf2:	f7ff fe29 	bl	8008848 <malloc>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	6270      	str	r0, [r6, #36]	; 0x24
 8008bfa:	b928      	cbnz	r0, 8008c08 <__pow5mult+0x40>
 8008bfc:	4b1d      	ldr	r3, [pc, #116]	; (8008c74 <__pow5mult+0xac>)
 8008bfe:	481e      	ldr	r0, [pc, #120]	; (8008c78 <__pow5mult+0xb0>)
 8008c00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008c04:	f000 fc20 	bl	8009448 <__assert_func>
 8008c08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c0c:	6004      	str	r4, [r0, #0]
 8008c0e:	60c4      	str	r4, [r0, #12]
 8008c10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008c14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c18:	b94c      	cbnz	r4, 8008c2e <__pow5mult+0x66>
 8008c1a:	f240 2171 	movw	r1, #625	; 0x271
 8008c1e:	4630      	mov	r0, r6
 8008c20:	f7ff ff16 	bl	8008a50 <__i2b>
 8008c24:	2300      	movs	r3, #0
 8008c26:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c2a:	4604      	mov	r4, r0
 8008c2c:	6003      	str	r3, [r0, #0]
 8008c2e:	f04f 0900 	mov.w	r9, #0
 8008c32:	07eb      	lsls	r3, r5, #31
 8008c34:	d50a      	bpl.n	8008c4c <__pow5mult+0x84>
 8008c36:	4639      	mov	r1, r7
 8008c38:	4622      	mov	r2, r4
 8008c3a:	4630      	mov	r0, r6
 8008c3c:	f7ff ff1e 	bl	8008a7c <__multiply>
 8008c40:	4639      	mov	r1, r7
 8008c42:	4680      	mov	r8, r0
 8008c44:	4630      	mov	r0, r6
 8008c46:	f7ff fe47 	bl	80088d8 <_Bfree>
 8008c4a:	4647      	mov	r7, r8
 8008c4c:	106d      	asrs	r5, r5, #1
 8008c4e:	d00b      	beq.n	8008c68 <__pow5mult+0xa0>
 8008c50:	6820      	ldr	r0, [r4, #0]
 8008c52:	b938      	cbnz	r0, 8008c64 <__pow5mult+0x9c>
 8008c54:	4622      	mov	r2, r4
 8008c56:	4621      	mov	r1, r4
 8008c58:	4630      	mov	r0, r6
 8008c5a:	f7ff ff0f 	bl	8008a7c <__multiply>
 8008c5e:	6020      	str	r0, [r4, #0]
 8008c60:	f8c0 9000 	str.w	r9, [r0]
 8008c64:	4604      	mov	r4, r0
 8008c66:	e7e4      	b.n	8008c32 <__pow5mult+0x6a>
 8008c68:	4638      	mov	r0, r7
 8008c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c6e:	bf00      	nop
 8008c70:	080099a0 	.word	0x080099a0
 8008c74:	08009769 	.word	0x08009769
 8008c78:	08009850 	.word	0x08009850

08008c7c <__lshift>:
 8008c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c80:	460c      	mov	r4, r1
 8008c82:	6849      	ldr	r1, [r1, #4]
 8008c84:	6923      	ldr	r3, [r4, #16]
 8008c86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c8a:	68a3      	ldr	r3, [r4, #8]
 8008c8c:	4607      	mov	r7, r0
 8008c8e:	4691      	mov	r9, r2
 8008c90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c94:	f108 0601 	add.w	r6, r8, #1
 8008c98:	42b3      	cmp	r3, r6
 8008c9a:	db0b      	blt.n	8008cb4 <__lshift+0x38>
 8008c9c:	4638      	mov	r0, r7
 8008c9e:	f7ff fddb 	bl	8008858 <_Balloc>
 8008ca2:	4605      	mov	r5, r0
 8008ca4:	b948      	cbnz	r0, 8008cba <__lshift+0x3e>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	4b28      	ldr	r3, [pc, #160]	; (8008d4c <__lshift+0xd0>)
 8008caa:	4829      	ldr	r0, [pc, #164]	; (8008d50 <__lshift+0xd4>)
 8008cac:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008cb0:	f000 fbca 	bl	8009448 <__assert_func>
 8008cb4:	3101      	adds	r1, #1
 8008cb6:	005b      	lsls	r3, r3, #1
 8008cb8:	e7ee      	b.n	8008c98 <__lshift+0x1c>
 8008cba:	2300      	movs	r3, #0
 8008cbc:	f100 0114 	add.w	r1, r0, #20
 8008cc0:	f100 0210 	add.w	r2, r0, #16
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	4553      	cmp	r3, sl
 8008cc8:	db33      	blt.n	8008d32 <__lshift+0xb6>
 8008cca:	6920      	ldr	r0, [r4, #16]
 8008ccc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008cd0:	f104 0314 	add.w	r3, r4, #20
 8008cd4:	f019 091f 	ands.w	r9, r9, #31
 8008cd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008cdc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008ce0:	d02b      	beq.n	8008d3a <__lshift+0xbe>
 8008ce2:	f1c9 0e20 	rsb	lr, r9, #32
 8008ce6:	468a      	mov	sl, r1
 8008ce8:	2200      	movs	r2, #0
 8008cea:	6818      	ldr	r0, [r3, #0]
 8008cec:	fa00 f009 	lsl.w	r0, r0, r9
 8008cf0:	4302      	orrs	r2, r0
 8008cf2:	f84a 2b04 	str.w	r2, [sl], #4
 8008cf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cfa:	459c      	cmp	ip, r3
 8008cfc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d00:	d8f3      	bhi.n	8008cea <__lshift+0x6e>
 8008d02:	ebac 0304 	sub.w	r3, ip, r4
 8008d06:	3b15      	subs	r3, #21
 8008d08:	f023 0303 	bic.w	r3, r3, #3
 8008d0c:	3304      	adds	r3, #4
 8008d0e:	f104 0015 	add.w	r0, r4, #21
 8008d12:	4584      	cmp	ip, r0
 8008d14:	bf38      	it	cc
 8008d16:	2304      	movcc	r3, #4
 8008d18:	50ca      	str	r2, [r1, r3]
 8008d1a:	b10a      	cbz	r2, 8008d20 <__lshift+0xa4>
 8008d1c:	f108 0602 	add.w	r6, r8, #2
 8008d20:	3e01      	subs	r6, #1
 8008d22:	4638      	mov	r0, r7
 8008d24:	612e      	str	r6, [r5, #16]
 8008d26:	4621      	mov	r1, r4
 8008d28:	f7ff fdd6 	bl	80088d8 <_Bfree>
 8008d2c:	4628      	mov	r0, r5
 8008d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d32:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d36:	3301      	adds	r3, #1
 8008d38:	e7c5      	b.n	8008cc6 <__lshift+0x4a>
 8008d3a:	3904      	subs	r1, #4
 8008d3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d40:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d44:	459c      	cmp	ip, r3
 8008d46:	d8f9      	bhi.n	8008d3c <__lshift+0xc0>
 8008d48:	e7ea      	b.n	8008d20 <__lshift+0xa4>
 8008d4a:	bf00      	nop
 8008d4c:	080097df 	.word	0x080097df
 8008d50:	08009850 	.word	0x08009850

08008d54 <__mcmp>:
 8008d54:	b530      	push	{r4, r5, lr}
 8008d56:	6902      	ldr	r2, [r0, #16]
 8008d58:	690c      	ldr	r4, [r1, #16]
 8008d5a:	1b12      	subs	r2, r2, r4
 8008d5c:	d10e      	bne.n	8008d7c <__mcmp+0x28>
 8008d5e:	f100 0314 	add.w	r3, r0, #20
 8008d62:	3114      	adds	r1, #20
 8008d64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008d68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008d6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008d70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008d74:	42a5      	cmp	r5, r4
 8008d76:	d003      	beq.n	8008d80 <__mcmp+0x2c>
 8008d78:	d305      	bcc.n	8008d86 <__mcmp+0x32>
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	4610      	mov	r0, r2
 8008d7e:	bd30      	pop	{r4, r5, pc}
 8008d80:	4283      	cmp	r3, r0
 8008d82:	d3f3      	bcc.n	8008d6c <__mcmp+0x18>
 8008d84:	e7fa      	b.n	8008d7c <__mcmp+0x28>
 8008d86:	f04f 32ff 	mov.w	r2, #4294967295
 8008d8a:	e7f7      	b.n	8008d7c <__mcmp+0x28>

08008d8c <__mdiff>:
 8008d8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d90:	460c      	mov	r4, r1
 8008d92:	4606      	mov	r6, r0
 8008d94:	4611      	mov	r1, r2
 8008d96:	4620      	mov	r0, r4
 8008d98:	4617      	mov	r7, r2
 8008d9a:	f7ff ffdb 	bl	8008d54 <__mcmp>
 8008d9e:	1e05      	subs	r5, r0, #0
 8008da0:	d110      	bne.n	8008dc4 <__mdiff+0x38>
 8008da2:	4629      	mov	r1, r5
 8008da4:	4630      	mov	r0, r6
 8008da6:	f7ff fd57 	bl	8008858 <_Balloc>
 8008daa:	b930      	cbnz	r0, 8008dba <__mdiff+0x2e>
 8008dac:	4b39      	ldr	r3, [pc, #228]	; (8008e94 <__mdiff+0x108>)
 8008dae:	4602      	mov	r2, r0
 8008db0:	f240 2132 	movw	r1, #562	; 0x232
 8008db4:	4838      	ldr	r0, [pc, #224]	; (8008e98 <__mdiff+0x10c>)
 8008db6:	f000 fb47 	bl	8009448 <__assert_func>
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008dc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc4:	bfa4      	itt	ge
 8008dc6:	463b      	movge	r3, r7
 8008dc8:	4627      	movge	r7, r4
 8008dca:	4630      	mov	r0, r6
 8008dcc:	6879      	ldr	r1, [r7, #4]
 8008dce:	bfa6      	itte	ge
 8008dd0:	461c      	movge	r4, r3
 8008dd2:	2500      	movge	r5, #0
 8008dd4:	2501      	movlt	r5, #1
 8008dd6:	f7ff fd3f 	bl	8008858 <_Balloc>
 8008dda:	b920      	cbnz	r0, 8008de6 <__mdiff+0x5a>
 8008ddc:	4b2d      	ldr	r3, [pc, #180]	; (8008e94 <__mdiff+0x108>)
 8008dde:	4602      	mov	r2, r0
 8008de0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008de4:	e7e6      	b.n	8008db4 <__mdiff+0x28>
 8008de6:	693e      	ldr	r6, [r7, #16]
 8008de8:	60c5      	str	r5, [r0, #12]
 8008dea:	6925      	ldr	r5, [r4, #16]
 8008dec:	f107 0114 	add.w	r1, r7, #20
 8008df0:	f104 0914 	add.w	r9, r4, #20
 8008df4:	f100 0e14 	add.w	lr, r0, #20
 8008df8:	f107 0210 	add.w	r2, r7, #16
 8008dfc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008e00:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008e04:	46f2      	mov	sl, lr
 8008e06:	2700      	movs	r7, #0
 8008e08:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008e10:	fa1f f883 	uxth.w	r8, r3
 8008e14:	fa17 f78b 	uxtah	r7, r7, fp
 8008e18:	0c1b      	lsrs	r3, r3, #16
 8008e1a:	eba7 0808 	sub.w	r8, r7, r8
 8008e1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008e26:	fa1f f888 	uxth.w	r8, r8
 8008e2a:	141f      	asrs	r7, r3, #16
 8008e2c:	454d      	cmp	r5, r9
 8008e2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008e32:	f84a 3b04 	str.w	r3, [sl], #4
 8008e36:	d8e7      	bhi.n	8008e08 <__mdiff+0x7c>
 8008e38:	1b2b      	subs	r3, r5, r4
 8008e3a:	3b15      	subs	r3, #21
 8008e3c:	f023 0303 	bic.w	r3, r3, #3
 8008e40:	3304      	adds	r3, #4
 8008e42:	3415      	adds	r4, #21
 8008e44:	42a5      	cmp	r5, r4
 8008e46:	bf38      	it	cc
 8008e48:	2304      	movcc	r3, #4
 8008e4a:	4419      	add	r1, r3
 8008e4c:	4473      	add	r3, lr
 8008e4e:	469e      	mov	lr, r3
 8008e50:	460d      	mov	r5, r1
 8008e52:	4565      	cmp	r5, ip
 8008e54:	d30e      	bcc.n	8008e74 <__mdiff+0xe8>
 8008e56:	f10c 0203 	add.w	r2, ip, #3
 8008e5a:	1a52      	subs	r2, r2, r1
 8008e5c:	f022 0203 	bic.w	r2, r2, #3
 8008e60:	3903      	subs	r1, #3
 8008e62:	458c      	cmp	ip, r1
 8008e64:	bf38      	it	cc
 8008e66:	2200      	movcc	r2, #0
 8008e68:	441a      	add	r2, r3
 8008e6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008e6e:	b17b      	cbz	r3, 8008e90 <__mdiff+0x104>
 8008e70:	6106      	str	r6, [r0, #16]
 8008e72:	e7a5      	b.n	8008dc0 <__mdiff+0x34>
 8008e74:	f855 8b04 	ldr.w	r8, [r5], #4
 8008e78:	fa17 f488 	uxtah	r4, r7, r8
 8008e7c:	1422      	asrs	r2, r4, #16
 8008e7e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008e82:	b2a4      	uxth	r4, r4
 8008e84:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008e88:	f84e 4b04 	str.w	r4, [lr], #4
 8008e8c:	1417      	asrs	r7, r2, #16
 8008e8e:	e7e0      	b.n	8008e52 <__mdiff+0xc6>
 8008e90:	3e01      	subs	r6, #1
 8008e92:	e7ea      	b.n	8008e6a <__mdiff+0xde>
 8008e94:	080097df 	.word	0x080097df
 8008e98:	08009850 	.word	0x08009850

08008e9c <__d2b>:
 8008e9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ea0:	4689      	mov	r9, r1
 8008ea2:	2101      	movs	r1, #1
 8008ea4:	ec57 6b10 	vmov	r6, r7, d0
 8008ea8:	4690      	mov	r8, r2
 8008eaa:	f7ff fcd5 	bl	8008858 <_Balloc>
 8008eae:	4604      	mov	r4, r0
 8008eb0:	b930      	cbnz	r0, 8008ec0 <__d2b+0x24>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	4b25      	ldr	r3, [pc, #148]	; (8008f4c <__d2b+0xb0>)
 8008eb6:	4826      	ldr	r0, [pc, #152]	; (8008f50 <__d2b+0xb4>)
 8008eb8:	f240 310a 	movw	r1, #778	; 0x30a
 8008ebc:	f000 fac4 	bl	8009448 <__assert_func>
 8008ec0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008ec4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008ec8:	bb35      	cbnz	r5, 8008f18 <__d2b+0x7c>
 8008eca:	2e00      	cmp	r6, #0
 8008ecc:	9301      	str	r3, [sp, #4]
 8008ece:	d028      	beq.n	8008f22 <__d2b+0x86>
 8008ed0:	4668      	mov	r0, sp
 8008ed2:	9600      	str	r6, [sp, #0]
 8008ed4:	f7ff fd8c 	bl	80089f0 <__lo0bits>
 8008ed8:	9900      	ldr	r1, [sp, #0]
 8008eda:	b300      	cbz	r0, 8008f1e <__d2b+0x82>
 8008edc:	9a01      	ldr	r2, [sp, #4]
 8008ede:	f1c0 0320 	rsb	r3, r0, #32
 8008ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee6:	430b      	orrs	r3, r1
 8008ee8:	40c2      	lsrs	r2, r0
 8008eea:	6163      	str	r3, [r4, #20]
 8008eec:	9201      	str	r2, [sp, #4]
 8008eee:	9b01      	ldr	r3, [sp, #4]
 8008ef0:	61a3      	str	r3, [r4, #24]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	bf14      	ite	ne
 8008ef6:	2202      	movne	r2, #2
 8008ef8:	2201      	moveq	r2, #1
 8008efa:	6122      	str	r2, [r4, #16]
 8008efc:	b1d5      	cbz	r5, 8008f34 <__d2b+0x98>
 8008efe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008f02:	4405      	add	r5, r0
 8008f04:	f8c9 5000 	str.w	r5, [r9]
 8008f08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f0c:	f8c8 0000 	str.w	r0, [r8]
 8008f10:	4620      	mov	r0, r4
 8008f12:	b003      	add	sp, #12
 8008f14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f1c:	e7d5      	b.n	8008eca <__d2b+0x2e>
 8008f1e:	6161      	str	r1, [r4, #20]
 8008f20:	e7e5      	b.n	8008eee <__d2b+0x52>
 8008f22:	a801      	add	r0, sp, #4
 8008f24:	f7ff fd64 	bl	80089f0 <__lo0bits>
 8008f28:	9b01      	ldr	r3, [sp, #4]
 8008f2a:	6163      	str	r3, [r4, #20]
 8008f2c:	2201      	movs	r2, #1
 8008f2e:	6122      	str	r2, [r4, #16]
 8008f30:	3020      	adds	r0, #32
 8008f32:	e7e3      	b.n	8008efc <__d2b+0x60>
 8008f34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f3c:	f8c9 0000 	str.w	r0, [r9]
 8008f40:	6918      	ldr	r0, [r3, #16]
 8008f42:	f7ff fd35 	bl	80089b0 <__hi0bits>
 8008f46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f4a:	e7df      	b.n	8008f0c <__d2b+0x70>
 8008f4c:	080097df 	.word	0x080097df
 8008f50:	08009850 	.word	0x08009850

08008f54 <_calloc_r>:
 8008f54:	b513      	push	{r0, r1, r4, lr}
 8008f56:	434a      	muls	r2, r1
 8008f58:	4611      	mov	r1, r2
 8008f5a:	9201      	str	r2, [sp, #4]
 8008f5c:	f000 f85a 	bl	8009014 <_malloc_r>
 8008f60:	4604      	mov	r4, r0
 8008f62:	b118      	cbz	r0, 8008f6c <_calloc_r+0x18>
 8008f64:	9a01      	ldr	r2, [sp, #4]
 8008f66:	2100      	movs	r1, #0
 8008f68:	f7fd fe10 	bl	8006b8c <memset>
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	b002      	add	sp, #8
 8008f70:	bd10      	pop	{r4, pc}
	...

08008f74 <_free_r>:
 8008f74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f76:	2900      	cmp	r1, #0
 8008f78:	d048      	beq.n	800900c <_free_r+0x98>
 8008f7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f7e:	9001      	str	r0, [sp, #4]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	f1a1 0404 	sub.w	r4, r1, #4
 8008f86:	bfb8      	it	lt
 8008f88:	18e4      	addlt	r4, r4, r3
 8008f8a:	f000 fae3 	bl	8009554 <__malloc_lock>
 8008f8e:	4a20      	ldr	r2, [pc, #128]	; (8009010 <_free_r+0x9c>)
 8008f90:	9801      	ldr	r0, [sp, #4]
 8008f92:	6813      	ldr	r3, [r2, #0]
 8008f94:	4615      	mov	r5, r2
 8008f96:	b933      	cbnz	r3, 8008fa6 <_free_r+0x32>
 8008f98:	6063      	str	r3, [r4, #4]
 8008f9a:	6014      	str	r4, [r2, #0]
 8008f9c:	b003      	add	sp, #12
 8008f9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fa2:	f000 badd 	b.w	8009560 <__malloc_unlock>
 8008fa6:	42a3      	cmp	r3, r4
 8008fa8:	d90b      	bls.n	8008fc2 <_free_r+0x4e>
 8008faa:	6821      	ldr	r1, [r4, #0]
 8008fac:	1862      	adds	r2, r4, r1
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	bf04      	itt	eq
 8008fb2:	681a      	ldreq	r2, [r3, #0]
 8008fb4:	685b      	ldreq	r3, [r3, #4]
 8008fb6:	6063      	str	r3, [r4, #4]
 8008fb8:	bf04      	itt	eq
 8008fba:	1852      	addeq	r2, r2, r1
 8008fbc:	6022      	streq	r2, [r4, #0]
 8008fbe:	602c      	str	r4, [r5, #0]
 8008fc0:	e7ec      	b.n	8008f9c <_free_r+0x28>
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	b10b      	cbz	r3, 8008fcc <_free_r+0x58>
 8008fc8:	42a3      	cmp	r3, r4
 8008fca:	d9fa      	bls.n	8008fc2 <_free_r+0x4e>
 8008fcc:	6811      	ldr	r1, [r2, #0]
 8008fce:	1855      	adds	r5, r2, r1
 8008fd0:	42a5      	cmp	r5, r4
 8008fd2:	d10b      	bne.n	8008fec <_free_r+0x78>
 8008fd4:	6824      	ldr	r4, [r4, #0]
 8008fd6:	4421      	add	r1, r4
 8008fd8:	1854      	adds	r4, r2, r1
 8008fda:	42a3      	cmp	r3, r4
 8008fdc:	6011      	str	r1, [r2, #0]
 8008fde:	d1dd      	bne.n	8008f9c <_free_r+0x28>
 8008fe0:	681c      	ldr	r4, [r3, #0]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	6053      	str	r3, [r2, #4]
 8008fe6:	4421      	add	r1, r4
 8008fe8:	6011      	str	r1, [r2, #0]
 8008fea:	e7d7      	b.n	8008f9c <_free_r+0x28>
 8008fec:	d902      	bls.n	8008ff4 <_free_r+0x80>
 8008fee:	230c      	movs	r3, #12
 8008ff0:	6003      	str	r3, [r0, #0]
 8008ff2:	e7d3      	b.n	8008f9c <_free_r+0x28>
 8008ff4:	6825      	ldr	r5, [r4, #0]
 8008ff6:	1961      	adds	r1, r4, r5
 8008ff8:	428b      	cmp	r3, r1
 8008ffa:	bf04      	itt	eq
 8008ffc:	6819      	ldreq	r1, [r3, #0]
 8008ffe:	685b      	ldreq	r3, [r3, #4]
 8009000:	6063      	str	r3, [r4, #4]
 8009002:	bf04      	itt	eq
 8009004:	1949      	addeq	r1, r1, r5
 8009006:	6021      	streq	r1, [r4, #0]
 8009008:	6054      	str	r4, [r2, #4]
 800900a:	e7c7      	b.n	8008f9c <_free_r+0x28>
 800900c:	b003      	add	sp, #12
 800900e:	bd30      	pop	{r4, r5, pc}
 8009010:	200041b0 	.word	0x200041b0

08009014 <_malloc_r>:
 8009014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009016:	1ccd      	adds	r5, r1, #3
 8009018:	f025 0503 	bic.w	r5, r5, #3
 800901c:	3508      	adds	r5, #8
 800901e:	2d0c      	cmp	r5, #12
 8009020:	bf38      	it	cc
 8009022:	250c      	movcc	r5, #12
 8009024:	2d00      	cmp	r5, #0
 8009026:	4606      	mov	r6, r0
 8009028:	db01      	blt.n	800902e <_malloc_r+0x1a>
 800902a:	42a9      	cmp	r1, r5
 800902c:	d903      	bls.n	8009036 <_malloc_r+0x22>
 800902e:	230c      	movs	r3, #12
 8009030:	6033      	str	r3, [r6, #0]
 8009032:	2000      	movs	r0, #0
 8009034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009036:	f000 fa8d 	bl	8009554 <__malloc_lock>
 800903a:	4921      	ldr	r1, [pc, #132]	; (80090c0 <_malloc_r+0xac>)
 800903c:	680a      	ldr	r2, [r1, #0]
 800903e:	4614      	mov	r4, r2
 8009040:	b99c      	cbnz	r4, 800906a <_malloc_r+0x56>
 8009042:	4f20      	ldr	r7, [pc, #128]	; (80090c4 <_malloc_r+0xb0>)
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	b923      	cbnz	r3, 8009052 <_malloc_r+0x3e>
 8009048:	4621      	mov	r1, r4
 800904a:	4630      	mov	r0, r6
 800904c:	f000 f996 	bl	800937c <_sbrk_r>
 8009050:	6038      	str	r0, [r7, #0]
 8009052:	4629      	mov	r1, r5
 8009054:	4630      	mov	r0, r6
 8009056:	f000 f991 	bl	800937c <_sbrk_r>
 800905a:	1c43      	adds	r3, r0, #1
 800905c:	d123      	bne.n	80090a6 <_malloc_r+0x92>
 800905e:	230c      	movs	r3, #12
 8009060:	6033      	str	r3, [r6, #0]
 8009062:	4630      	mov	r0, r6
 8009064:	f000 fa7c 	bl	8009560 <__malloc_unlock>
 8009068:	e7e3      	b.n	8009032 <_malloc_r+0x1e>
 800906a:	6823      	ldr	r3, [r4, #0]
 800906c:	1b5b      	subs	r3, r3, r5
 800906e:	d417      	bmi.n	80090a0 <_malloc_r+0x8c>
 8009070:	2b0b      	cmp	r3, #11
 8009072:	d903      	bls.n	800907c <_malloc_r+0x68>
 8009074:	6023      	str	r3, [r4, #0]
 8009076:	441c      	add	r4, r3
 8009078:	6025      	str	r5, [r4, #0]
 800907a:	e004      	b.n	8009086 <_malloc_r+0x72>
 800907c:	6863      	ldr	r3, [r4, #4]
 800907e:	42a2      	cmp	r2, r4
 8009080:	bf0c      	ite	eq
 8009082:	600b      	streq	r3, [r1, #0]
 8009084:	6053      	strne	r3, [r2, #4]
 8009086:	4630      	mov	r0, r6
 8009088:	f000 fa6a 	bl	8009560 <__malloc_unlock>
 800908c:	f104 000b 	add.w	r0, r4, #11
 8009090:	1d23      	adds	r3, r4, #4
 8009092:	f020 0007 	bic.w	r0, r0, #7
 8009096:	1ac2      	subs	r2, r0, r3
 8009098:	d0cc      	beq.n	8009034 <_malloc_r+0x20>
 800909a:	1a1b      	subs	r3, r3, r0
 800909c:	50a3      	str	r3, [r4, r2]
 800909e:	e7c9      	b.n	8009034 <_malloc_r+0x20>
 80090a0:	4622      	mov	r2, r4
 80090a2:	6864      	ldr	r4, [r4, #4]
 80090a4:	e7cc      	b.n	8009040 <_malloc_r+0x2c>
 80090a6:	1cc4      	adds	r4, r0, #3
 80090a8:	f024 0403 	bic.w	r4, r4, #3
 80090ac:	42a0      	cmp	r0, r4
 80090ae:	d0e3      	beq.n	8009078 <_malloc_r+0x64>
 80090b0:	1a21      	subs	r1, r4, r0
 80090b2:	4630      	mov	r0, r6
 80090b4:	f000 f962 	bl	800937c <_sbrk_r>
 80090b8:	3001      	adds	r0, #1
 80090ba:	d1dd      	bne.n	8009078 <_malloc_r+0x64>
 80090bc:	e7cf      	b.n	800905e <_malloc_r+0x4a>
 80090be:	bf00      	nop
 80090c0:	200041b0 	.word	0x200041b0
 80090c4:	200041b4 	.word	0x200041b4

080090c8 <__sfputc_r>:
 80090c8:	6893      	ldr	r3, [r2, #8]
 80090ca:	3b01      	subs	r3, #1
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	b410      	push	{r4}
 80090d0:	6093      	str	r3, [r2, #8]
 80090d2:	da08      	bge.n	80090e6 <__sfputc_r+0x1e>
 80090d4:	6994      	ldr	r4, [r2, #24]
 80090d6:	42a3      	cmp	r3, r4
 80090d8:	db01      	blt.n	80090de <__sfputc_r+0x16>
 80090da:	290a      	cmp	r1, #10
 80090dc:	d103      	bne.n	80090e6 <__sfputc_r+0x1e>
 80090de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090e2:	f7fe ba53 	b.w	800758c <__swbuf_r>
 80090e6:	6813      	ldr	r3, [r2, #0]
 80090e8:	1c58      	adds	r0, r3, #1
 80090ea:	6010      	str	r0, [r2, #0]
 80090ec:	7019      	strb	r1, [r3, #0]
 80090ee:	4608      	mov	r0, r1
 80090f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090f4:	4770      	bx	lr

080090f6 <__sfputs_r>:
 80090f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090f8:	4606      	mov	r6, r0
 80090fa:	460f      	mov	r7, r1
 80090fc:	4614      	mov	r4, r2
 80090fe:	18d5      	adds	r5, r2, r3
 8009100:	42ac      	cmp	r4, r5
 8009102:	d101      	bne.n	8009108 <__sfputs_r+0x12>
 8009104:	2000      	movs	r0, #0
 8009106:	e007      	b.n	8009118 <__sfputs_r+0x22>
 8009108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800910c:	463a      	mov	r2, r7
 800910e:	4630      	mov	r0, r6
 8009110:	f7ff ffda 	bl	80090c8 <__sfputc_r>
 8009114:	1c43      	adds	r3, r0, #1
 8009116:	d1f3      	bne.n	8009100 <__sfputs_r+0xa>
 8009118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800911c <_vfiprintf_r>:
 800911c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009120:	460d      	mov	r5, r1
 8009122:	b09d      	sub	sp, #116	; 0x74
 8009124:	4614      	mov	r4, r2
 8009126:	4698      	mov	r8, r3
 8009128:	4606      	mov	r6, r0
 800912a:	b118      	cbz	r0, 8009134 <_vfiprintf_r+0x18>
 800912c:	6983      	ldr	r3, [r0, #24]
 800912e:	b90b      	cbnz	r3, 8009134 <_vfiprintf_r+0x18>
 8009130:	f7ff fa80 	bl	8008634 <__sinit>
 8009134:	4b89      	ldr	r3, [pc, #548]	; (800935c <_vfiprintf_r+0x240>)
 8009136:	429d      	cmp	r5, r3
 8009138:	d11b      	bne.n	8009172 <_vfiprintf_r+0x56>
 800913a:	6875      	ldr	r5, [r6, #4]
 800913c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800913e:	07d9      	lsls	r1, r3, #31
 8009140:	d405      	bmi.n	800914e <_vfiprintf_r+0x32>
 8009142:	89ab      	ldrh	r3, [r5, #12]
 8009144:	059a      	lsls	r2, r3, #22
 8009146:	d402      	bmi.n	800914e <_vfiprintf_r+0x32>
 8009148:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800914a:	f7ff fb16 	bl	800877a <__retarget_lock_acquire_recursive>
 800914e:	89ab      	ldrh	r3, [r5, #12]
 8009150:	071b      	lsls	r3, r3, #28
 8009152:	d501      	bpl.n	8009158 <_vfiprintf_r+0x3c>
 8009154:	692b      	ldr	r3, [r5, #16]
 8009156:	b9eb      	cbnz	r3, 8009194 <_vfiprintf_r+0x78>
 8009158:	4629      	mov	r1, r5
 800915a:	4630      	mov	r0, r6
 800915c:	f7fe fa68 	bl	8007630 <__swsetup_r>
 8009160:	b1c0      	cbz	r0, 8009194 <_vfiprintf_r+0x78>
 8009162:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009164:	07dc      	lsls	r4, r3, #31
 8009166:	d50e      	bpl.n	8009186 <_vfiprintf_r+0x6a>
 8009168:	f04f 30ff 	mov.w	r0, #4294967295
 800916c:	b01d      	add	sp, #116	; 0x74
 800916e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009172:	4b7b      	ldr	r3, [pc, #492]	; (8009360 <_vfiprintf_r+0x244>)
 8009174:	429d      	cmp	r5, r3
 8009176:	d101      	bne.n	800917c <_vfiprintf_r+0x60>
 8009178:	68b5      	ldr	r5, [r6, #8]
 800917a:	e7df      	b.n	800913c <_vfiprintf_r+0x20>
 800917c:	4b79      	ldr	r3, [pc, #484]	; (8009364 <_vfiprintf_r+0x248>)
 800917e:	429d      	cmp	r5, r3
 8009180:	bf08      	it	eq
 8009182:	68f5      	ldreq	r5, [r6, #12]
 8009184:	e7da      	b.n	800913c <_vfiprintf_r+0x20>
 8009186:	89ab      	ldrh	r3, [r5, #12]
 8009188:	0598      	lsls	r0, r3, #22
 800918a:	d4ed      	bmi.n	8009168 <_vfiprintf_r+0x4c>
 800918c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800918e:	f7ff faf5 	bl	800877c <__retarget_lock_release_recursive>
 8009192:	e7e9      	b.n	8009168 <_vfiprintf_r+0x4c>
 8009194:	2300      	movs	r3, #0
 8009196:	9309      	str	r3, [sp, #36]	; 0x24
 8009198:	2320      	movs	r3, #32
 800919a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800919e:	f8cd 800c 	str.w	r8, [sp, #12]
 80091a2:	2330      	movs	r3, #48	; 0x30
 80091a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009368 <_vfiprintf_r+0x24c>
 80091a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80091ac:	f04f 0901 	mov.w	r9, #1
 80091b0:	4623      	mov	r3, r4
 80091b2:	469a      	mov	sl, r3
 80091b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091b8:	b10a      	cbz	r2, 80091be <_vfiprintf_r+0xa2>
 80091ba:	2a25      	cmp	r2, #37	; 0x25
 80091bc:	d1f9      	bne.n	80091b2 <_vfiprintf_r+0x96>
 80091be:	ebba 0b04 	subs.w	fp, sl, r4
 80091c2:	d00b      	beq.n	80091dc <_vfiprintf_r+0xc0>
 80091c4:	465b      	mov	r3, fp
 80091c6:	4622      	mov	r2, r4
 80091c8:	4629      	mov	r1, r5
 80091ca:	4630      	mov	r0, r6
 80091cc:	f7ff ff93 	bl	80090f6 <__sfputs_r>
 80091d0:	3001      	adds	r0, #1
 80091d2:	f000 80aa 	beq.w	800932a <_vfiprintf_r+0x20e>
 80091d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091d8:	445a      	add	r2, fp
 80091da:	9209      	str	r2, [sp, #36]	; 0x24
 80091dc:	f89a 3000 	ldrb.w	r3, [sl]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f000 80a2 	beq.w	800932a <_vfiprintf_r+0x20e>
 80091e6:	2300      	movs	r3, #0
 80091e8:	f04f 32ff 	mov.w	r2, #4294967295
 80091ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091f0:	f10a 0a01 	add.w	sl, sl, #1
 80091f4:	9304      	str	r3, [sp, #16]
 80091f6:	9307      	str	r3, [sp, #28]
 80091f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091fc:	931a      	str	r3, [sp, #104]	; 0x68
 80091fe:	4654      	mov	r4, sl
 8009200:	2205      	movs	r2, #5
 8009202:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009206:	4858      	ldr	r0, [pc, #352]	; (8009368 <_vfiprintf_r+0x24c>)
 8009208:	f7f6 ffea 	bl	80001e0 <memchr>
 800920c:	9a04      	ldr	r2, [sp, #16]
 800920e:	b9d8      	cbnz	r0, 8009248 <_vfiprintf_r+0x12c>
 8009210:	06d1      	lsls	r1, r2, #27
 8009212:	bf44      	itt	mi
 8009214:	2320      	movmi	r3, #32
 8009216:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800921a:	0713      	lsls	r3, r2, #28
 800921c:	bf44      	itt	mi
 800921e:	232b      	movmi	r3, #43	; 0x2b
 8009220:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009224:	f89a 3000 	ldrb.w	r3, [sl]
 8009228:	2b2a      	cmp	r3, #42	; 0x2a
 800922a:	d015      	beq.n	8009258 <_vfiprintf_r+0x13c>
 800922c:	9a07      	ldr	r2, [sp, #28]
 800922e:	4654      	mov	r4, sl
 8009230:	2000      	movs	r0, #0
 8009232:	f04f 0c0a 	mov.w	ip, #10
 8009236:	4621      	mov	r1, r4
 8009238:	f811 3b01 	ldrb.w	r3, [r1], #1
 800923c:	3b30      	subs	r3, #48	; 0x30
 800923e:	2b09      	cmp	r3, #9
 8009240:	d94e      	bls.n	80092e0 <_vfiprintf_r+0x1c4>
 8009242:	b1b0      	cbz	r0, 8009272 <_vfiprintf_r+0x156>
 8009244:	9207      	str	r2, [sp, #28]
 8009246:	e014      	b.n	8009272 <_vfiprintf_r+0x156>
 8009248:	eba0 0308 	sub.w	r3, r0, r8
 800924c:	fa09 f303 	lsl.w	r3, r9, r3
 8009250:	4313      	orrs	r3, r2
 8009252:	9304      	str	r3, [sp, #16]
 8009254:	46a2      	mov	sl, r4
 8009256:	e7d2      	b.n	80091fe <_vfiprintf_r+0xe2>
 8009258:	9b03      	ldr	r3, [sp, #12]
 800925a:	1d19      	adds	r1, r3, #4
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	9103      	str	r1, [sp, #12]
 8009260:	2b00      	cmp	r3, #0
 8009262:	bfbb      	ittet	lt
 8009264:	425b      	neglt	r3, r3
 8009266:	f042 0202 	orrlt.w	r2, r2, #2
 800926a:	9307      	strge	r3, [sp, #28]
 800926c:	9307      	strlt	r3, [sp, #28]
 800926e:	bfb8      	it	lt
 8009270:	9204      	strlt	r2, [sp, #16]
 8009272:	7823      	ldrb	r3, [r4, #0]
 8009274:	2b2e      	cmp	r3, #46	; 0x2e
 8009276:	d10c      	bne.n	8009292 <_vfiprintf_r+0x176>
 8009278:	7863      	ldrb	r3, [r4, #1]
 800927a:	2b2a      	cmp	r3, #42	; 0x2a
 800927c:	d135      	bne.n	80092ea <_vfiprintf_r+0x1ce>
 800927e:	9b03      	ldr	r3, [sp, #12]
 8009280:	1d1a      	adds	r2, r3, #4
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	9203      	str	r2, [sp, #12]
 8009286:	2b00      	cmp	r3, #0
 8009288:	bfb8      	it	lt
 800928a:	f04f 33ff 	movlt.w	r3, #4294967295
 800928e:	3402      	adds	r4, #2
 8009290:	9305      	str	r3, [sp, #20]
 8009292:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009378 <_vfiprintf_r+0x25c>
 8009296:	7821      	ldrb	r1, [r4, #0]
 8009298:	2203      	movs	r2, #3
 800929a:	4650      	mov	r0, sl
 800929c:	f7f6 ffa0 	bl	80001e0 <memchr>
 80092a0:	b140      	cbz	r0, 80092b4 <_vfiprintf_r+0x198>
 80092a2:	2340      	movs	r3, #64	; 0x40
 80092a4:	eba0 000a 	sub.w	r0, r0, sl
 80092a8:	fa03 f000 	lsl.w	r0, r3, r0
 80092ac:	9b04      	ldr	r3, [sp, #16]
 80092ae:	4303      	orrs	r3, r0
 80092b0:	3401      	adds	r4, #1
 80092b2:	9304      	str	r3, [sp, #16]
 80092b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092b8:	482c      	ldr	r0, [pc, #176]	; (800936c <_vfiprintf_r+0x250>)
 80092ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092be:	2206      	movs	r2, #6
 80092c0:	f7f6 ff8e 	bl	80001e0 <memchr>
 80092c4:	2800      	cmp	r0, #0
 80092c6:	d03f      	beq.n	8009348 <_vfiprintf_r+0x22c>
 80092c8:	4b29      	ldr	r3, [pc, #164]	; (8009370 <_vfiprintf_r+0x254>)
 80092ca:	bb1b      	cbnz	r3, 8009314 <_vfiprintf_r+0x1f8>
 80092cc:	9b03      	ldr	r3, [sp, #12]
 80092ce:	3307      	adds	r3, #7
 80092d0:	f023 0307 	bic.w	r3, r3, #7
 80092d4:	3308      	adds	r3, #8
 80092d6:	9303      	str	r3, [sp, #12]
 80092d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092da:	443b      	add	r3, r7
 80092dc:	9309      	str	r3, [sp, #36]	; 0x24
 80092de:	e767      	b.n	80091b0 <_vfiprintf_r+0x94>
 80092e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80092e4:	460c      	mov	r4, r1
 80092e6:	2001      	movs	r0, #1
 80092e8:	e7a5      	b.n	8009236 <_vfiprintf_r+0x11a>
 80092ea:	2300      	movs	r3, #0
 80092ec:	3401      	adds	r4, #1
 80092ee:	9305      	str	r3, [sp, #20]
 80092f0:	4619      	mov	r1, r3
 80092f2:	f04f 0c0a 	mov.w	ip, #10
 80092f6:	4620      	mov	r0, r4
 80092f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092fc:	3a30      	subs	r2, #48	; 0x30
 80092fe:	2a09      	cmp	r2, #9
 8009300:	d903      	bls.n	800930a <_vfiprintf_r+0x1ee>
 8009302:	2b00      	cmp	r3, #0
 8009304:	d0c5      	beq.n	8009292 <_vfiprintf_r+0x176>
 8009306:	9105      	str	r1, [sp, #20]
 8009308:	e7c3      	b.n	8009292 <_vfiprintf_r+0x176>
 800930a:	fb0c 2101 	mla	r1, ip, r1, r2
 800930e:	4604      	mov	r4, r0
 8009310:	2301      	movs	r3, #1
 8009312:	e7f0      	b.n	80092f6 <_vfiprintf_r+0x1da>
 8009314:	ab03      	add	r3, sp, #12
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	462a      	mov	r2, r5
 800931a:	4b16      	ldr	r3, [pc, #88]	; (8009374 <_vfiprintf_r+0x258>)
 800931c:	a904      	add	r1, sp, #16
 800931e:	4630      	mov	r0, r6
 8009320:	f7fd fcdc 	bl	8006cdc <_printf_float>
 8009324:	4607      	mov	r7, r0
 8009326:	1c78      	adds	r0, r7, #1
 8009328:	d1d6      	bne.n	80092d8 <_vfiprintf_r+0x1bc>
 800932a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800932c:	07d9      	lsls	r1, r3, #31
 800932e:	d405      	bmi.n	800933c <_vfiprintf_r+0x220>
 8009330:	89ab      	ldrh	r3, [r5, #12]
 8009332:	059a      	lsls	r2, r3, #22
 8009334:	d402      	bmi.n	800933c <_vfiprintf_r+0x220>
 8009336:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009338:	f7ff fa20 	bl	800877c <__retarget_lock_release_recursive>
 800933c:	89ab      	ldrh	r3, [r5, #12]
 800933e:	065b      	lsls	r3, r3, #25
 8009340:	f53f af12 	bmi.w	8009168 <_vfiprintf_r+0x4c>
 8009344:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009346:	e711      	b.n	800916c <_vfiprintf_r+0x50>
 8009348:	ab03      	add	r3, sp, #12
 800934a:	9300      	str	r3, [sp, #0]
 800934c:	462a      	mov	r2, r5
 800934e:	4b09      	ldr	r3, [pc, #36]	; (8009374 <_vfiprintf_r+0x258>)
 8009350:	a904      	add	r1, sp, #16
 8009352:	4630      	mov	r0, r6
 8009354:	f7fd ff66 	bl	8007224 <_printf_i>
 8009358:	e7e4      	b.n	8009324 <_vfiprintf_r+0x208>
 800935a:	bf00      	nop
 800935c:	08009810 	.word	0x08009810
 8009360:	08009830 	.word	0x08009830
 8009364:	080097f0 	.word	0x080097f0
 8009368:	080099ac 	.word	0x080099ac
 800936c:	080099b6 	.word	0x080099b6
 8009370:	08006cdd 	.word	0x08006cdd
 8009374:	080090f7 	.word	0x080090f7
 8009378:	080099b2 	.word	0x080099b2

0800937c <_sbrk_r>:
 800937c:	b538      	push	{r3, r4, r5, lr}
 800937e:	4d06      	ldr	r5, [pc, #24]	; (8009398 <_sbrk_r+0x1c>)
 8009380:	2300      	movs	r3, #0
 8009382:	4604      	mov	r4, r0
 8009384:	4608      	mov	r0, r1
 8009386:	602b      	str	r3, [r5, #0]
 8009388:	f7f8 fab0 	bl	80018ec <_sbrk>
 800938c:	1c43      	adds	r3, r0, #1
 800938e:	d102      	bne.n	8009396 <_sbrk_r+0x1a>
 8009390:	682b      	ldr	r3, [r5, #0]
 8009392:	b103      	cbz	r3, 8009396 <_sbrk_r+0x1a>
 8009394:	6023      	str	r3, [r4, #0]
 8009396:	bd38      	pop	{r3, r4, r5, pc}
 8009398:	200042f4 	.word	0x200042f4

0800939c <__sread>:
 800939c:	b510      	push	{r4, lr}
 800939e:	460c      	mov	r4, r1
 80093a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093a4:	f000 f8e2 	bl	800956c <_read_r>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	bfab      	itete	ge
 80093ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80093ae:	89a3      	ldrhlt	r3, [r4, #12]
 80093b0:	181b      	addge	r3, r3, r0
 80093b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80093b6:	bfac      	ite	ge
 80093b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80093ba:	81a3      	strhlt	r3, [r4, #12]
 80093bc:	bd10      	pop	{r4, pc}

080093be <__swrite>:
 80093be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093c2:	461f      	mov	r7, r3
 80093c4:	898b      	ldrh	r3, [r1, #12]
 80093c6:	05db      	lsls	r3, r3, #23
 80093c8:	4605      	mov	r5, r0
 80093ca:	460c      	mov	r4, r1
 80093cc:	4616      	mov	r6, r2
 80093ce:	d505      	bpl.n	80093dc <__swrite+0x1e>
 80093d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093d4:	2302      	movs	r3, #2
 80093d6:	2200      	movs	r2, #0
 80093d8:	f000 f898 	bl	800950c <_lseek_r>
 80093dc:	89a3      	ldrh	r3, [r4, #12]
 80093de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093e6:	81a3      	strh	r3, [r4, #12]
 80093e8:	4632      	mov	r2, r6
 80093ea:	463b      	mov	r3, r7
 80093ec:	4628      	mov	r0, r5
 80093ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093f2:	f000 b817 	b.w	8009424 <_write_r>

080093f6 <__sseek>:
 80093f6:	b510      	push	{r4, lr}
 80093f8:	460c      	mov	r4, r1
 80093fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093fe:	f000 f885 	bl	800950c <_lseek_r>
 8009402:	1c43      	adds	r3, r0, #1
 8009404:	89a3      	ldrh	r3, [r4, #12]
 8009406:	bf15      	itete	ne
 8009408:	6560      	strne	r0, [r4, #84]	; 0x54
 800940a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800940e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009412:	81a3      	strheq	r3, [r4, #12]
 8009414:	bf18      	it	ne
 8009416:	81a3      	strhne	r3, [r4, #12]
 8009418:	bd10      	pop	{r4, pc}

0800941a <__sclose>:
 800941a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800941e:	f000 b831 	b.w	8009484 <_close_r>
	...

08009424 <_write_r>:
 8009424:	b538      	push	{r3, r4, r5, lr}
 8009426:	4d07      	ldr	r5, [pc, #28]	; (8009444 <_write_r+0x20>)
 8009428:	4604      	mov	r4, r0
 800942a:	4608      	mov	r0, r1
 800942c:	4611      	mov	r1, r2
 800942e:	2200      	movs	r2, #0
 8009430:	602a      	str	r2, [r5, #0]
 8009432:	461a      	mov	r2, r3
 8009434:	f7f7 fd75 	bl	8000f22 <_write>
 8009438:	1c43      	adds	r3, r0, #1
 800943a:	d102      	bne.n	8009442 <_write_r+0x1e>
 800943c:	682b      	ldr	r3, [r5, #0]
 800943e:	b103      	cbz	r3, 8009442 <_write_r+0x1e>
 8009440:	6023      	str	r3, [r4, #0]
 8009442:	bd38      	pop	{r3, r4, r5, pc}
 8009444:	200042f4 	.word	0x200042f4

08009448 <__assert_func>:
 8009448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800944a:	4614      	mov	r4, r2
 800944c:	461a      	mov	r2, r3
 800944e:	4b09      	ldr	r3, [pc, #36]	; (8009474 <__assert_func+0x2c>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4605      	mov	r5, r0
 8009454:	68d8      	ldr	r0, [r3, #12]
 8009456:	b14c      	cbz	r4, 800946c <__assert_func+0x24>
 8009458:	4b07      	ldr	r3, [pc, #28]	; (8009478 <__assert_func+0x30>)
 800945a:	9100      	str	r1, [sp, #0]
 800945c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009460:	4906      	ldr	r1, [pc, #24]	; (800947c <__assert_func+0x34>)
 8009462:	462b      	mov	r3, r5
 8009464:	f000 f81e 	bl	80094a4 <fiprintf>
 8009468:	f000 f89f 	bl	80095aa <abort>
 800946c:	4b04      	ldr	r3, [pc, #16]	; (8009480 <__assert_func+0x38>)
 800946e:	461c      	mov	r4, r3
 8009470:	e7f3      	b.n	800945a <__assert_func+0x12>
 8009472:	bf00      	nop
 8009474:	20000010 	.word	0x20000010
 8009478:	080099bd 	.word	0x080099bd
 800947c:	080099ca 	.word	0x080099ca
 8009480:	080099f8 	.word	0x080099f8

08009484 <_close_r>:
 8009484:	b538      	push	{r3, r4, r5, lr}
 8009486:	4d06      	ldr	r5, [pc, #24]	; (80094a0 <_close_r+0x1c>)
 8009488:	2300      	movs	r3, #0
 800948a:	4604      	mov	r4, r0
 800948c:	4608      	mov	r0, r1
 800948e:	602b      	str	r3, [r5, #0]
 8009490:	f7f8 f9f7 	bl	8001882 <_close>
 8009494:	1c43      	adds	r3, r0, #1
 8009496:	d102      	bne.n	800949e <_close_r+0x1a>
 8009498:	682b      	ldr	r3, [r5, #0]
 800949a:	b103      	cbz	r3, 800949e <_close_r+0x1a>
 800949c:	6023      	str	r3, [r4, #0]
 800949e:	bd38      	pop	{r3, r4, r5, pc}
 80094a0:	200042f4 	.word	0x200042f4

080094a4 <fiprintf>:
 80094a4:	b40e      	push	{r1, r2, r3}
 80094a6:	b503      	push	{r0, r1, lr}
 80094a8:	4601      	mov	r1, r0
 80094aa:	ab03      	add	r3, sp, #12
 80094ac:	4805      	ldr	r0, [pc, #20]	; (80094c4 <fiprintf+0x20>)
 80094ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80094b2:	6800      	ldr	r0, [r0, #0]
 80094b4:	9301      	str	r3, [sp, #4]
 80094b6:	f7ff fe31 	bl	800911c <_vfiprintf_r>
 80094ba:	b002      	add	sp, #8
 80094bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80094c0:	b003      	add	sp, #12
 80094c2:	4770      	bx	lr
 80094c4:	20000010 	.word	0x20000010

080094c8 <_fstat_r>:
 80094c8:	b538      	push	{r3, r4, r5, lr}
 80094ca:	4d07      	ldr	r5, [pc, #28]	; (80094e8 <_fstat_r+0x20>)
 80094cc:	2300      	movs	r3, #0
 80094ce:	4604      	mov	r4, r0
 80094d0:	4608      	mov	r0, r1
 80094d2:	4611      	mov	r1, r2
 80094d4:	602b      	str	r3, [r5, #0]
 80094d6:	f7f8 f9e0 	bl	800189a <_fstat>
 80094da:	1c43      	adds	r3, r0, #1
 80094dc:	d102      	bne.n	80094e4 <_fstat_r+0x1c>
 80094de:	682b      	ldr	r3, [r5, #0]
 80094e0:	b103      	cbz	r3, 80094e4 <_fstat_r+0x1c>
 80094e2:	6023      	str	r3, [r4, #0]
 80094e4:	bd38      	pop	{r3, r4, r5, pc}
 80094e6:	bf00      	nop
 80094e8:	200042f4 	.word	0x200042f4

080094ec <_isatty_r>:
 80094ec:	b538      	push	{r3, r4, r5, lr}
 80094ee:	4d06      	ldr	r5, [pc, #24]	; (8009508 <_isatty_r+0x1c>)
 80094f0:	2300      	movs	r3, #0
 80094f2:	4604      	mov	r4, r0
 80094f4:	4608      	mov	r0, r1
 80094f6:	602b      	str	r3, [r5, #0]
 80094f8:	f7f8 f9df 	bl	80018ba <_isatty>
 80094fc:	1c43      	adds	r3, r0, #1
 80094fe:	d102      	bne.n	8009506 <_isatty_r+0x1a>
 8009500:	682b      	ldr	r3, [r5, #0]
 8009502:	b103      	cbz	r3, 8009506 <_isatty_r+0x1a>
 8009504:	6023      	str	r3, [r4, #0]
 8009506:	bd38      	pop	{r3, r4, r5, pc}
 8009508:	200042f4 	.word	0x200042f4

0800950c <_lseek_r>:
 800950c:	b538      	push	{r3, r4, r5, lr}
 800950e:	4d07      	ldr	r5, [pc, #28]	; (800952c <_lseek_r+0x20>)
 8009510:	4604      	mov	r4, r0
 8009512:	4608      	mov	r0, r1
 8009514:	4611      	mov	r1, r2
 8009516:	2200      	movs	r2, #0
 8009518:	602a      	str	r2, [r5, #0]
 800951a:	461a      	mov	r2, r3
 800951c:	f7f8 f9d8 	bl	80018d0 <_lseek>
 8009520:	1c43      	adds	r3, r0, #1
 8009522:	d102      	bne.n	800952a <_lseek_r+0x1e>
 8009524:	682b      	ldr	r3, [r5, #0]
 8009526:	b103      	cbz	r3, 800952a <_lseek_r+0x1e>
 8009528:	6023      	str	r3, [r4, #0]
 800952a:	bd38      	pop	{r3, r4, r5, pc}
 800952c:	200042f4 	.word	0x200042f4

08009530 <__ascii_mbtowc>:
 8009530:	b082      	sub	sp, #8
 8009532:	b901      	cbnz	r1, 8009536 <__ascii_mbtowc+0x6>
 8009534:	a901      	add	r1, sp, #4
 8009536:	b142      	cbz	r2, 800954a <__ascii_mbtowc+0x1a>
 8009538:	b14b      	cbz	r3, 800954e <__ascii_mbtowc+0x1e>
 800953a:	7813      	ldrb	r3, [r2, #0]
 800953c:	600b      	str	r3, [r1, #0]
 800953e:	7812      	ldrb	r2, [r2, #0]
 8009540:	1e10      	subs	r0, r2, #0
 8009542:	bf18      	it	ne
 8009544:	2001      	movne	r0, #1
 8009546:	b002      	add	sp, #8
 8009548:	4770      	bx	lr
 800954a:	4610      	mov	r0, r2
 800954c:	e7fb      	b.n	8009546 <__ascii_mbtowc+0x16>
 800954e:	f06f 0001 	mvn.w	r0, #1
 8009552:	e7f8      	b.n	8009546 <__ascii_mbtowc+0x16>

08009554 <__malloc_lock>:
 8009554:	4801      	ldr	r0, [pc, #4]	; (800955c <__malloc_lock+0x8>)
 8009556:	f7ff b910 	b.w	800877a <__retarget_lock_acquire_recursive>
 800955a:	bf00      	nop
 800955c:	200042ec 	.word	0x200042ec

08009560 <__malloc_unlock>:
 8009560:	4801      	ldr	r0, [pc, #4]	; (8009568 <__malloc_unlock+0x8>)
 8009562:	f7ff b90b 	b.w	800877c <__retarget_lock_release_recursive>
 8009566:	bf00      	nop
 8009568:	200042ec 	.word	0x200042ec

0800956c <_read_r>:
 800956c:	b538      	push	{r3, r4, r5, lr}
 800956e:	4d07      	ldr	r5, [pc, #28]	; (800958c <_read_r+0x20>)
 8009570:	4604      	mov	r4, r0
 8009572:	4608      	mov	r0, r1
 8009574:	4611      	mov	r1, r2
 8009576:	2200      	movs	r2, #0
 8009578:	602a      	str	r2, [r5, #0]
 800957a:	461a      	mov	r2, r3
 800957c:	f7f8 f964 	bl	8001848 <_read>
 8009580:	1c43      	adds	r3, r0, #1
 8009582:	d102      	bne.n	800958a <_read_r+0x1e>
 8009584:	682b      	ldr	r3, [r5, #0]
 8009586:	b103      	cbz	r3, 800958a <_read_r+0x1e>
 8009588:	6023      	str	r3, [r4, #0]
 800958a:	bd38      	pop	{r3, r4, r5, pc}
 800958c:	200042f4 	.word	0x200042f4

08009590 <__ascii_wctomb>:
 8009590:	b149      	cbz	r1, 80095a6 <__ascii_wctomb+0x16>
 8009592:	2aff      	cmp	r2, #255	; 0xff
 8009594:	bf85      	ittet	hi
 8009596:	238a      	movhi	r3, #138	; 0x8a
 8009598:	6003      	strhi	r3, [r0, #0]
 800959a:	700a      	strbls	r2, [r1, #0]
 800959c:	f04f 30ff 	movhi.w	r0, #4294967295
 80095a0:	bf98      	it	ls
 80095a2:	2001      	movls	r0, #1
 80095a4:	4770      	bx	lr
 80095a6:	4608      	mov	r0, r1
 80095a8:	4770      	bx	lr

080095aa <abort>:
 80095aa:	b508      	push	{r3, lr}
 80095ac:	2006      	movs	r0, #6
 80095ae:	f000 f82b 	bl	8009608 <raise>
 80095b2:	2001      	movs	r0, #1
 80095b4:	f7f8 f93e 	bl	8001834 <_exit>

080095b8 <_raise_r>:
 80095b8:	291f      	cmp	r1, #31
 80095ba:	b538      	push	{r3, r4, r5, lr}
 80095bc:	4604      	mov	r4, r0
 80095be:	460d      	mov	r5, r1
 80095c0:	d904      	bls.n	80095cc <_raise_r+0x14>
 80095c2:	2316      	movs	r3, #22
 80095c4:	6003      	str	r3, [r0, #0]
 80095c6:	f04f 30ff 	mov.w	r0, #4294967295
 80095ca:	bd38      	pop	{r3, r4, r5, pc}
 80095cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80095ce:	b112      	cbz	r2, 80095d6 <_raise_r+0x1e>
 80095d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095d4:	b94b      	cbnz	r3, 80095ea <_raise_r+0x32>
 80095d6:	4620      	mov	r0, r4
 80095d8:	f000 f830 	bl	800963c <_getpid_r>
 80095dc:	462a      	mov	r2, r5
 80095de:	4601      	mov	r1, r0
 80095e0:	4620      	mov	r0, r4
 80095e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095e6:	f000 b817 	b.w	8009618 <_kill_r>
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d00a      	beq.n	8009604 <_raise_r+0x4c>
 80095ee:	1c59      	adds	r1, r3, #1
 80095f0:	d103      	bne.n	80095fa <_raise_r+0x42>
 80095f2:	2316      	movs	r3, #22
 80095f4:	6003      	str	r3, [r0, #0]
 80095f6:	2001      	movs	r0, #1
 80095f8:	e7e7      	b.n	80095ca <_raise_r+0x12>
 80095fa:	2400      	movs	r4, #0
 80095fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009600:	4628      	mov	r0, r5
 8009602:	4798      	blx	r3
 8009604:	2000      	movs	r0, #0
 8009606:	e7e0      	b.n	80095ca <_raise_r+0x12>

08009608 <raise>:
 8009608:	4b02      	ldr	r3, [pc, #8]	; (8009614 <raise+0xc>)
 800960a:	4601      	mov	r1, r0
 800960c:	6818      	ldr	r0, [r3, #0]
 800960e:	f7ff bfd3 	b.w	80095b8 <_raise_r>
 8009612:	bf00      	nop
 8009614:	20000010 	.word	0x20000010

08009618 <_kill_r>:
 8009618:	b538      	push	{r3, r4, r5, lr}
 800961a:	4d07      	ldr	r5, [pc, #28]	; (8009638 <_kill_r+0x20>)
 800961c:	2300      	movs	r3, #0
 800961e:	4604      	mov	r4, r0
 8009620:	4608      	mov	r0, r1
 8009622:	4611      	mov	r1, r2
 8009624:	602b      	str	r3, [r5, #0]
 8009626:	f7f8 f8f5 	bl	8001814 <_kill>
 800962a:	1c43      	adds	r3, r0, #1
 800962c:	d102      	bne.n	8009634 <_kill_r+0x1c>
 800962e:	682b      	ldr	r3, [r5, #0]
 8009630:	b103      	cbz	r3, 8009634 <_kill_r+0x1c>
 8009632:	6023      	str	r3, [r4, #0]
 8009634:	bd38      	pop	{r3, r4, r5, pc}
 8009636:	bf00      	nop
 8009638:	200042f4 	.word	0x200042f4

0800963c <_getpid_r>:
 800963c:	f7f8 b8e2 	b.w	8001804 <_getpid>

08009640 <_init>:
 8009640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009642:	bf00      	nop
 8009644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009646:	bc08      	pop	{r3}
 8009648:	469e      	mov	lr, r3
 800964a:	4770      	bx	lr

0800964c <_fini>:
 800964c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800964e:	bf00      	nop
 8009650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009652:	bc08      	pop	{r3}
 8009654:	469e      	mov	lr, r3
 8009656:	4770      	bx	lr
